variables:
  rh_20_release: '2-0-8'
  rh_22_release: '2.2-latest-release'
  rh_23_release: '2.3-latest-release'
  rh_30_release: '3.0-latest-release'
  namespace: rh.
  asset_name: none
  lowercase_asset_name: None
  latest_version: __LATEST_V__
  release_version: __RELEASE_V__
  short_version: '__SHORT_V__'
  arch: __ARCH__
  results_dir: results/${asset_name}-${dist}-${arch}

stages:
  - base_build
  - create_library_repo
  - build_libraries
  - create_repo__BUILDCOMPONENTS__
  - test
  - test_assembly
  - deploy
  - build-yum-repo

#Global before script, determine if this is a tag and handle rpm release field accordingly
before_script:
    - safe_version=$(echo ${short_version} | tr -d -)
    - safe_ref=$(echo ${CI_COMMIT_REF_NAME} | tr -d /| tr '[:upper:]' '[:lower:]')
    - |
      redhawk_repo_proj="redhawk/cf-and-deps"
      if [ -z "$CI_COMMIT_TAG" ];
      then
        redhawk_version=${latest_version}
        rpm_release="0.$CI_PIPELINE_ID.rh${safe_version}";
      else
        if [[ $CI_COMMIT_TAG =~ ^[0-9]+\.[0-9]+\.[0-9]+(-rc[0-9]+)?$ ]];
        then
             redhawk_version=${CI_COMMIT_REF_SLUG}
        else
             redhawk_repo_proj="redhawk-all"
             redhawk_version=${release_version}
        fi
        cd $(find -maxdepth 3 -name ${asset_name})        
        rpm_release="`rpm --query --queryformat "%{release}\n" --specfile $namespace$asset_name.spec | head -n 1 | awk -F"." "{print $1}"`.rh${safe_version}"
        cd - ;
      fi
    - redhawk_repo=${s3_repo_url}$redhawk_repo_proj/yum/__REDHAWK_VERSION__/$dist/$arch
    - rtl_repo=${s3_repo_url}redhawk-dependencies/librtlsdr/yum/0.5.2/$dist/$arch
    - librf_repo=${s3_repo_url}redhawk-dependencies/librfsimulators/yum/develop/$dist/$arch
    - asset_repo=${s3_repo_url}redhawk/assets/yum/$redhawk_version/$dist/$arch

.create_local_repo: &create_local_repo
  image: ${docker_registry}redhawk/buildenv:${short_version}-$dist-$arch
  before_script:
    - safe_version=$(echo ${short_version} | tr -d -)
    - safe_ref=$(echo ${CI_COMMIT_REF_NAME} | tr -d /| tr '[:upper:]' '[:lower:]')
  tags:
    - redhawk
    - docker
  script:
     - createrepo output
  artifacts:
    paths:
      - output/*
    expire_in: 2 days
  except:
    - /^(\d+\.)?(\d+)?(\.\d+)$/    
    

.base_package: &base_package
  image: ${docker_registry}redhawk/alpine-dockerd-plus-utils
  stage: base_build
  tags:
    - redhawk
    - docker
  script:
     - echo "librf_repo => $librf_repo"
     - echo "redhawk_repo => $redhawk_repo"
     - echo "rtl_repo => $rtl_repo"
     - cd $(find -maxdepth 3 -name ${asset_name})
     - printf "FROM ${docker_registry}redhawk/rpmbuild:$dist-$arch-onbuild" > Dockerfile
     - docker login ${docker_registry} -u ${docker_user_redhawk} -p ${docker_password_redhawk}
     - docker image build --pull
                          --tag=$CI_PROJECT_PATH_SLUG-components-${lowercase_asset_name}-$safe_ref-$dist-$arch-rh${safe_version}
                          --build-arg "project=${asset_name}"
                          --build-arg "rpm_release=$rpm_release"
                          --build-arg "spec_file=${namespace}${asset_name}.spec"
                          --build-arg "arch=$arch"
                          --build-arg "other_repos=$redhawk_repo $rtl_repo $librf_repo" .
     - id=$(docker container create $CI_PROJECT_PATH_SLUG-components-${lowercase_asset_name}-$safe_ref-$dist-$arch-rh${safe_version})
     - docker container cp $id:/root/rpmbuild/RPMS/ ../../../output
     - cd ../../..
     - docker container rm -f $id || true
     - docker image rm -f $CI_PROJECT_PATH_SLUG-components-${lowercase_asset_name}-$safe_ref-$dist-$arch-rh${safe_version} || true
  artifacts:
    paths:
      - output/*/*.rpm
    expire_in: 2 days
  except:
    - master
    - /^.*-external$/
    - /^(\d+\.)?(\d+)?(\.\d+)$/

.package: &package
  image: ${docker_registry}redhawk/alpine-dockerd-plus-utils
  #stage: build
  tags:
    - redhawk
    - docker
  script:
     - echo "librf_repo => $librf_repo"
     - echo "redhawk_repo => $redhawk_repo"
     - echo "rtl_repo => $rtl_repo"
     - cd $(find -maxdepth 3 -name ${asset_name})
     - cp -R ../../../output local_yumrepo
     - rm -rf ../../../output/*
     - printf "FROM ${docker_registry}redhawk/rpmbuild:$dist-$arch-onbuild" > Dockerfile
     - docker login ${docker_registry} -u ${docker_user_redhawk} -p ${docker_password_redhawk}
     - docker image build --pull
                          --tag=$CI_PROJECT_PATH_SLUG-components-${lowercase_asset_name}-$safe_ref-$dist-$arch-rh${safe_version}
                          --build-arg "project=${asset_name}"
                          --build-arg "rpm_release=$rpm_release"
                          --build-arg "spec_file=${namespace}${asset_name}.spec"
                          --build-arg "arch=$arch"
                          --build-arg "local_repo=local_yumrepo"
                          --build-arg "other_repos=$redhawk_repo $rtl_repo $librf_repo" .
     - id=$(docker container create $CI_PROJECT_PATH_SLUG-components-${lowercase_asset_name}-$safe_ref-$dist-$arch-rh${safe_version})
     - docker container cp $id:/root/rpmbuild/RPMS/ ../../../output
     - cd ../../..
     - cd output
     - mv RPMS/* .
     - rmdir RPMS
     - docker container rm -f $id || true
     - docker image rm -f $CI_PROJECT_PATH_SLUG-components-${lowercase_asset_name}-$safe_ref-$dist-$arch-rh${safe_version} || true
  artifacts:
    paths:
      - output/*/*.rpm
    expire_in: 2 days
  except:
    - master
    - /^.*-external$/
    - /^(\d+\.)?(\d+)?(\.\d+)$/

.package-msddc: &package-msddc
  image: ${docker_registry}redhawk/alpine-dockerd-plus-utils
  #stage: build
  tags:
    - redhawk
    - docker
  script:
     - cd $(find -maxdepth 3 -name ${asset_name})
     - rm MSDD python/MSDD
     - cp -r ../MSDD .
     - cp -r ../MSDD/python python/MSDD
     - cp -R ../../../output local_yumrepo
     - rm -rf ../../../output/*
     - printf "FROM ${docker_registry}redhawk/rpmbuild:$dist-$arch-onbuild" > Dockerfile
     - docker login ${docker_registry} -u ${docker_user_redhawk} -p ${docker_password_redhawk}
     - docker image build --pull
                          --tag=$CI_PROJECT_PATH_SLUG-components-${lowercase_asset_name}-$safe_ref-$dist-$arch-rh${safe_version}
                          --build-arg "project=${asset_name}"
                          --build-arg "rpm_release=$rpm_release"
                          --build-arg "spec_file=${namespace}${asset_name}.spec"
                          --build-arg "arch=$arch"
                          --build-arg "local_repo=local_yumrepo"
                          --build-arg "other_repos=$redhawk_repo $rtl_repo $librf_repo" .
     - id=$(docker container create $CI_PROJECT_PATH_SLUG-components-${lowercase_asset_name}-$safe_ref-$dist-$arch-rh${safe_version})
     - docker container cp $id:/root/rpmbuild/RPMS/ ../../../output
     - cd ../../..
     - cd output
     - mv RPMS/* .
     - rmdir RPMS
     - docker container rm -f $id || true
     - docker image rm -f $CI_PROJECT_PATH_SLUG-components-${lowercase_asset_name}-$safe_ref-$dist-$arch-rh${safe_version} || true
  artifacts:
    paths:
      - output/*/*.rpm
    expire_in: 2 days
  except:
    - master
    - /^.*-external$/
    - /^(\d+\.)?(\d+)?(\.\d+)$/


.test: &test
  image: ${docker_registry}redhawk/buildenv:${short_version}-$dist-$arch
  stage: test
  tags:
    - redhawk
  script:
    - . /usr/local/redhawk/python-virtualenv/bin/activate
    - yum-config-manager --add-repo $redhawk_repo
    - yum-config-manager --add-repo $rtl_repo
    - yum-config-manager --add-repo $librf_repo
    - cp -R output local_yumrepo || true
    - yum-config-manager --add-repo file://$(pwd)/local_yumrepo
    - yum-config-manager --save --setopt=mpf*.s3_enabled=1
    - yum-config-manager --save --setopt=mpf*.region=us-east-1
    - yum-config-manager --save --setopt=mpf*.gpgcheck=0
    - mkdir -p $results_dir
    - asset_location=$(find -maxdepth 3 -name ${asset_name})
    - cd $asset_location
    - touch /var/lib/rpm/* && yum-builddep --nogpgcheck -y ${namespace}$asset_name.spec
    - source /etc/profile.d/redhawk.sh
    - export SDRROOT=/var/redhawk/sdr
    - if [ -d cpp ] && [ "${dist}" == "el7" ]; then
        export CXXFLAGS='-g -Og -fprofile-arcs -ftest-coverage' V=1;
      fi
    - yum install --nogpgcheck -y redhawk-sdrroot-dom-mgr
    - ./build.sh
    - IFS='/'; currdir=("$(pwd)")
    - arr=($currdir)
    - arr_length=${#arr[@]}
    - count=`expr $arr_length - 2`
    - comp_type=${arr[$count]}
    - cd tests
    - env | tee -a ../$asset_name-$CI_COMMIT_SHA-tests.log
    - pip list | tee -a ../$asset_name-$CI_COMMIT_SHA-tests.log
    - python test_$asset_name.py 2>&1 | tee -a ../$asset_name-$CI_COMMIT_SHA-tests.log
    - cd ..
    - if [ -d cpp ]; then
        gcovr -r . --xml --exclude-directories=tests > gcovr.xml;
        cppcheck --enable=all --xml-version=2 -i tests . 2> cppcheck-results.xml;
      fi
    - cp tests/TEST*.xml ../../../results/${asset_name}-${dist}-${arch}
  artifacts:
    paths:
      - results/${asset_name}-${dist}-${arch}/*.xml
    expire_in: 2 days
  except:
      - /^(\d+\.)?(\d+)?(\.\d+)$/      

assembletests:
  image: ${docker_registry}redhawk/centos7-evo
  stage: test_assembly
  before_script:
    - echo "Assembling the test results from the different component tests"
  script:
    - echo $(ls)
    - cd results
    - echo $(find .)
    - cd ..
  dependencies:__TESTJOBS__
  artifacts:
    paths:
      - results 
  except:
      - /^(\d+\.)?(\d+)?(\.\d+)$/           

deploy:html:
  image: ${docker_registry}redhawk/xunit-viewer:latest
  stage: deploy
  before_script:
    - safe_version=$(echo ${short_version} | tr -d -)
    - safe_ref=$(echo ${CI_COMMIT_REF_NAME} | tr -d /| tr '[:upper:]' '[:lower:]')
  script:
    # Display a summary of test results in the job log
    - |
      echo "******************************************************************************"
      find results -name '*.xml' | xargs xunit-summarize
      echo "******************************************************************************"
    # Process CppUnit results into JUnit format through an XSLT stylesheet so
    # that xunit-viewer can handle them
    - find results -name '*cppunit*.xml' -exec xsltproc -o \{\} /usr/local/share/xslt/cpp2junit.xslt \{\} \;
    - xunit-viewer --results=./results --output=xunit-results.html --title="REDHAWK Core Framework $triggering_ref_name"
  dependencies:
    - assembletests
  artifacts:
    paths:
      - xunit-results.html
  #except:
  #  variables:
  #    - $triggering_ref_name =~ /^develop.*$/
  except:
      - /^(\d+\.)?(\d+)?(\.\d+)$/

  

.s3: &s3
  image: ${docker_registry}redhawk/rpmbuild:el7-x86_64
  stage: deploy
  tags:
    - redhawk
  script:
    - mkdir -p $arch
    - for file in `find output -name *.rpm`; do
        cp $file $arch;
      done
    - /usr/bin/s3cmd put -F -v -r $arch/ s3://${s3_bucket}/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/yum/$CI_COMMIT_REF_SLUG/$dist/$arch/
  only:
    variables:
      - $latest_version =~ /^develop.*$/
  except:
      - /^(\d+\.)?(\d+)?(\.\d+)$/            

.create-repo: &create-repo
  image: ${docker_registry}redhawk/rpmbuild:el7-x86_64
  stage: build-yum-repo
  tags:
    - redhawk
  script:
    - /usr/bin/s3cmd sync s3://${s3_bucket}/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/yum/$CI_COMMIT_REF_SLUG/$dist/$arch .
    - repomanage --keep=2 --old $arch| xargs rm -f; createrepo --update $arch
    - /usr/bin/s3cmd sync -F -v --delete-removed $arch s3://${s3_bucket}/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/yum/$CI_COMMIT_REF_SLUG/$dist/ && s3cmd setacl -v s3://${s3_bucket}/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/yum/$CI_COMMIT_REF_SLUG/$dist --acl-public --recursive || true

  only:
    variables:
      - $latest_version =~ /^develop.*$/
  except:
      - /^(\d+\.)?(\d+)?(\.\d+)$/            

__JOBS__
