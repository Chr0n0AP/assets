variables:
  rh_20_release: '2-0-8'
  rh_22_release: '2-2-0'
  rh_23_release: '2-3-0'
  namespace: rh.
  asset_name: none
  lowercase_asset_name: None
  results_dir: results/${asset_name}-${dist}-${arch}

stages:
  - base_build
  - create_library_repo
  - build_libraries
  - create_repo__BUILDCOMPONENTS__
  - test
  - test_assembly
  - deploy

#Global before script, determine if this is a tag and handle rpm release field accordingly
before_script:
    - safe_version=$(echo ${short_version} | tr -d -)
    - safe_ref=$(echo ${CI_COMMIT_REF_NAME} | tr -d /| tr '[:upper:]' '[:lower:]')
    - if [ -z "$CI_COMMIT_TAG" ]; then
        redhawk_version=${latest_version}
        rpm_release="0.$CI_PIPELINE_ID.rh${safe_version}";
      else
        redhawk_version=${release_version}
        rpm_release="`rpm --query --queryformat "%{release}\n" --specfile ${namespace}$CI_PROJECT_NAME.spec | head -n 1 | awk -F"." "{print $1}"`.rh${safe_version}";
      fi
    - redhawk_repo=$s3_repo_url/redhawk/cf-and-deps/yum/__REDHAWK_VERSION__/$dist/$arch
    - rtl_repo=$s3_repo_url/redhawk-dependencies/librtlsdr/yum/0.5.2/$dist/$arch
    - librf_repo=$s3_repo_url/redhawk-dependencies/libRfSimulators/yum/develop/$dist/$arch
    #- uhd_repo=$s3_repo_url/redhawk-dependencies/uhd/yum/3.7.3/$dist/$arch # el6
    #- uhd_repo=$s3_repo_url/redhawk-dependencies/uhd/yum/3.9.4/$dist/$arch # el7
    - asset_repo=$s3_repo_url/redhawk/assets/yum/$redhawk_version/rh${safe_version}/$dist/$arch

.create_local_repo: &create_local_repo
  image: ${docker_registry}redhawk/buildenv:${short_version}-$dist-$arch
  #stage: create_repo
  tags:
    - ca
    - docker
  script:
     - createrepo output
  artifacts:
    paths:
      - output/*
    expire_in: 2 days

.base_package: &base_package
  image: ${docker_registry}${docker_rpm_repository}docker:latest
  stage: base_build
  tags:
    - ca
    - docker
  script:
     - cd $(find -maxdepth 3 -name ${asset_name})
     - printf "FROM ${docker_registry}${rpmbuild_repository}rpmbuild:$dist-$arch-onbuild" > Dockerfile
     - docker login ${docker_registry} -u ${docker_user} -p ${docker_password}
     - docker image build --pull
                          --tag=$CI_PROJECT_PATH_SLUG-components-${lowercase_asset_name}-$safe_ref-$dist-$arch-rh${safe_version}
                          --build-arg "project=${asset_name}"
                          --build-arg "rpm_release=$rpm_release"
                          --build-arg "spec_file=${namespace}${asset_name}.spec"
                          --build-arg "arch=$arch"
                          --build-arg "other_repos=$redhawk_repo $rtl_repo $uhd_repo $librf_repo" .
     - id=$(docker container create $CI_PROJECT_PATH_SLUG-components-${lowercase_asset_name}-$safe_ref-$dist-$arch-rh${safe_version})
     - docker container cp $id:/root/rpmbuild/RPMS/ ../../../output
     - cd ../../..
     - docker container rm -f $id || true
     - docker image rm -f $CI_PROJECT_PATH_SLUG-components-${lowercase_asset_name}-$safe_ref-$dist-$arch-rh${safe_version} || true
  artifacts:
    paths:
      - output/*/*.rpm
    expire_in: 2 days
  except:
    - master
    - /^.*-external$/
    - /^(\d+\.)?(\d+)?(\.\d+)$/

.package: &package
  image: ${docker_registry}${docker_rpm_repository}docker:latest
  #stage: build
  tags:
    - ca
    - docker
  script:
     - cd $(find -maxdepth 3 -name ${asset_name})
     - cp -R ../../../output local_yumrepo
     - rm -rf ../../../output/*
     - printf "FROM ${docker_registry}${rpmbuild_repository}rpmbuild:$dist-$arch-onbuild" > Dockerfile
     - docker login ${docker_registry} -u ${docker_user} -p ${docker_password}
     - docker image build --pull
                          --tag=$CI_PROJECT_PATH_SLUG-components-${lowercase_asset_name}-$safe_ref-$dist-$arch-rh${safe_version}
                          --build-arg "project=${asset_name}"
                          --build-arg "rpm_release=$rpm_release"
                          --build-arg "spec_file=${namespace}${asset_name}.spec"
                          --build-arg "arch=$arch"
                          --build-arg "local_repo=local_yumrepo"
                          --build-arg "other_repos=$redhawk_repo $rtl_repo $uhd_repo $librf_repo" .
     - id=$(docker container create $CI_PROJECT_PATH_SLUG-components-${lowercase_asset_name}-$safe_ref-$dist-$arch-rh${safe_version})
     - docker container cp $id:/root/rpmbuild/RPMS/ ../../../output
     - cd ../../..
     - cd output
     - mv RPMS/* .
     - rmdir RPMS
     - docker container rm -f $id || true
     - docker image rm -f $CI_PROJECT_PATH_SLUG-components-${lowercase_asset_name}-$safe_ref-$dist-$arch-rh${safe_version} || true
  artifacts:
    paths:
      - output/*/*.rpm
    expire_in: 2 days
  except:
    - master
    - /^.*-external$/
    - /^(\d+\.)?(\d+)?(\.\d+)$/

.test: &test
  image: ${docker_registry}redhawk/buildenv:${short_version}-$dist-$arch
  stage: test
  tags:
    - ca
  script:
    - . /usr/local/redhawk/python-virtualenv/bin/activate
    - yum-config-manager --add-repo $redhawk_repo
    - yum-config-manager --add-repo $rtl_repo
    - yum-config-manager --add-repo $uhd_repo
    - yum-config-manager --add-repo $librf_repo
    - cp -R output local_yumrepo || true
    - yum-config-manager --add-repo file://$(pwd)/local_yumrepo
    - mkdir -p $results_dir
    - asset_location=$(find -maxdepth 3 -name ${asset_name})
    - cd $asset_location
    - touch /var/lib/rpm/* && yum-builddep --nogpgcheck -y ${namespace}$asset_name.spec
    - source /etc/profile.d/redhawk.sh
    - export SDRROOT=/var/redhawk/sdr
    - if [ -d cpp ] && [ "${dist}" == "el7" ]; then
        export CXXFLAGS='-g -Og -fprofile-arcs -ftest-coverage' V=1;
      fi
    - ./build.sh
    - IFS='/'; currdir=("$(pwd)")
    - arr=($currdir)
    - arr_length=${#arr[@]}
    - count=`expr $arr_length - 2`
    - comp_type=${arr[$count]}
    - cd tests
    - env | tee -a ../$asset_name-$CI_COMMIT_SHA-tests.log
    - pip list | tee -a ../$asset_name-$CI_COMMIT_SHA-tests.log
    - python test_$asset_name.py 2>&1 | tee -a ../$asset_name-$CI_COMMIT_SHA-tests.log
    - cd ..
    - if [ -d cpp ]; then
        gcovr -r . --xml --exclude-directories=tests > gcovr.xml;
        cppcheck --enable=all --xml-version=2 -i tests . 2> cppcheck-results.xml;
      fi
    - cp tests/TEST*.xml ../../../results/${asset_name}-${dist}-${arch}
  artifacts:
    paths:
      - results/${asset_name}-${dist}-${arch}/*.xml
    expire_in: 2 days

assembletests:
  image: ${docker_registry}centos:7
  stage: test_assembly
  before_script:
    - echo "Assembling the test results from the different component tests"
  script:
    - echo $(ls)
    - cd results
    - echo $(find .)
    - cd ..
  dependencies:__TESTJOBS__
  artifacts:
    paths:
      - results

deploytests:
  image: ${docker_registry}centos:7
  stage: deploy
  before_script:
    - echo "Deploying to $jenkins_url/job/$CI_PROJECT_NAMESPACE/job/$CI_PROJECT_NAME-$CI_COMMIT_REF_NAME"
  script:
    - echo $(ls)
    - cd results
    - echo $(find .)
    - cd ..
    - if [ -n "$jenkins_url" ]; then
        curl --insecure -X POST $jenkins_url/job/$CI_PROJECT_NAMESPACE/job/$CI_PROJECT_NAME-$CI_COMMIT_REF_NAME/buildWithParameters?pipeline_id=$CI_PIPELINE_ID --user $jenkins_user:$jenkins_api_token;
      fi
  dependencies:
    - assembletests
  artifacts:
    paths:
      - results

.s3: &s3
  image: ${docker_registry}utils/s3cmd:el6-createrepo
  stage: deploy
  tags:
    - s3
  script:
    - /usr/bin/s3cmd sync s3://$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/yum/$CI_COMMIT_REF_SLUG/rh${short_version}/$dist/$arch .
    - mkdir -p $arch
    - for file in `find output -name *.rpm`; do
        cp $file $arch;
      done
    - repomanage --keep=2 --old $arch| xargs rm -f; createrepo --update $arch
    - /usr/bin/s3cmd sync -F -v --delete-removed $arch s3://$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/yum/$CI_COMMIT_REF_SLUG/rh${short_version}/$dist/  && s3cmd setacl -v s3://$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/yum/$CI_COMMIT_REF_SLUG/rh${short_version}/$dist --acl-public --recursive || true

__JOBS__
