/* ===================== COPYRIGHT NOTICE =====================
 * This file is protected by Copyright. Please refer to the COPYRIGHT file
 * distributed with this source distribution.
 *
 * This file is part of REDHAWK.
 *
 * REDHAWK is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by the
 * Free Software Foundation, either version 3 of the License, or (at your
 * option) any later version.
 *
 * REDHAWK is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License
 * for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 * ============================================================
 */

#include "BasicQueryAcknowledgePacketTest.h"
#include "BasicDataPacket.h"
#include "BasicQueryAcknowledgePacket.h"
#include "HasFieldsTest.h"
#include "TestRunner.h"
#include "VRTConfig.h"
#include <iomanip>

using namespace std;
using namespace vrt;
using namespace vrttest;
using namespace TestRunner;

#define _CHANGE_IND     0x80000000
#define _REF_POINT      0x40000000
#define _BANDWIDTH      0x20000000
#define _IF_FREQ        0x10000000
#define _RF_FREQ        0x08000000
#define _RF_OFFSET      0x04000000
#define _IF_OFFSET      0x02000000
#define _REF_LEVEL      0x01000000
#define _GAIN           0x00800000
#define _OVER_RANGE     0x00400000
#define _SAMPLE_RATE    0x00200000
#define _TIME_ADJUST    0x00100000
#define _TIME_CALIB     0x00080000
#define _TEMPERATURE    0x00040000
#define _DEVICE_ID      0x00020000
#define _STATE_EVENT    0x00010000
#define _DATA_FORMAT    0x00008000
#define _GPS_EPHEM      0x00004000
#define _INS_EPHEM      0x00002000
#define _ECEF_EPHEM     0x00001000
#define _REL_EPHEM      0x00000800
#define _EPHEM_REF      0x00000400
#define _GPS_ASCII      0x00000200
#define _CONTEXT_ASOC   0x00000100
#define _CIF7_ENABLE    0x00000080
//#define _RESERVED       0x00000040
//#define _RESERVED       0x00000020
//#define _RESERVED       0x00000010
#define _CIF3_ENABLE    0x00000008
#define _CIF2_ENABLE    0x00000004
#define _CIF1_ENABLE    0x00000002
//#define _RESERVED       0x00000001

// CIF7 mapping, etc
#define _BELIEF              0x00080000
#define _BELIEF_MASK         0x000000FF
#define _BELIEF_SIZE         4
#define _PROBABILITY         0x00100000
#define _PROBABILITY_MASK    0x0000FFFF
#define _PROBABILITY_SIZE    4
#define _THIRD_DERIVATIVE    0x00200000
#define _SECOND_DERIVATIVE   0x00400000
#define _FIRST_DERIVATIVE    0x00800000
#define _ACCURACY            0x01000000
#define _PRECISION           0x02000000
#define _MIN_VALUE           0x04000000
#define _MAX_VALUE           0x08000000
#define _STANDARD_DEVIATION  0x10000000
#define _MEDIAN_VALUE        0x20000000
#define _AVERAGE_VALUE       0x40000000
#define _CURRENT_VALUE       0x80000000

static int32_t getByteOffset (char*, int64_t field);
static int32_t getOneWordFieldValue (char*, int64_t field);
static int64_t getTwoWordFieldValue (char* input, int64_t field);

string BasicQueryAcknowledgePacketTest::getTestedClass () {
  return "vrt::BasicQueryAcknowledgePacket";
}

vector<TestSet> BasicQueryAcknowledgePacketTest::init () {
  vector<TestSet> tests;

  tests.push_back(TestSet("setPacketType",                this, "testSetPacketType"));
  tests.push_back(TestSet("resetForResend",               this, "testResetForResend"));

  tests.push_back(TestSet("getAdjustedTimeStamp",         this, "testGetAdjustedTimeStamp"));
  tests.push_back(TestSet("getBandOffsetIF",              this, "+testSetBandOffsetIF"));
  tests.push_back(TestSet("getBandwidth",                 this, "+testSetBandwidth"));
  tests.push_back(TestSet("getContextAssocLists",         this, "+testSetContextAssocLists"));
  tests.push_back(TestSet("getDataPayloadFormat",         this, "+testSetDataPayloadFormat"));
  tests.push_back(TestSet("getDeviceID",                  this, "+testSetDeviceID"));
  tests.push_back(TestSet("getDeviceIdentifier",          this, "+testSetDeviceID"));
  tests.push_back(TestSet("getEphemerisECEF",             this, "+testSetEphemerisECEF"));
  tests.push_back(TestSet("getEphemerisReference",        this, "+testSetEphemerisReference"));
  tests.push_back(TestSet("getEphemerisRelative",         this, "+testSetEphemerisECEF"));
  tests.push_back(TestSet("getFrequencyIF",               this, "+testSetFrequencyIF"));
  tests.push_back(TestSet("getFrequencyOffsetRF",         this, "+testSetFrequencyOffsetRF"));
  tests.push_back(TestSet("getFrequencyRF",               this, "+testSetFrequencyRF"));
  tests.push_back(TestSet("getGain",                      this, "+testSetGain"));
  tests.push_back(TestSet("getGain1",                     this, "+testSetGain"));
  tests.push_back(TestSet("getGain2",                     this, "+testSetGain"));
  tests.push_back(TestSet("getGeolocationGPS",            this, "+testSetGeolocation"));
  tests.push_back(TestSet("getGeolocationINS",            this, "+testSetGeolocation"));
  tests.push_back(TestSet("getGeoSentences",              this, "+testSetGeoSentences"));
  tests.push_back(TestSet("getOverRangeCount",            this, "+testSetOverRangeCount"));
  tests.push_back(TestSet("getReferenceLevel",            this, "+testSetReferenceLevel"));
  tests.push_back(TestSet("getReferencePointIdentifier",  this, "+testSetReferencePointIdentifier"));
  tests.push_back(TestSet("getSampleRate",                this, "+testSetSampleRate"));
  tests.push_back(TestSet("getTimeStampAdjustment",       this, "+testSetTimeStampAdjustment"));
  tests.push_back(TestSet("getTimeStampCalibration",      this, "+testSetTimeStampCalibration"));
  tests.push_back(TestSet("getTemperature",               this, "+testSetTemperature"));
  tests.push_back(TestSet("getUserDefinedBits",           this, "+testSetUserDefinedBits"));
  tests.push_back(TestSet("isAutomaticGainControl",       this, "+testSetAutomaticGainControl"));
  tests.push_back(TestSet("isCalibratedTimestamp",        this, "+testSetCalibratedTimestamp"));
  tests.push_back(TestSet("isChangePacket",               this, "+testSetChangePacket"));
  tests.push_back(TestSet("isDataValid",                  this, "+testSetDataValid"));
  tests.push_back(TestSet("isDiscontinuous",              this, "+testSetDiscontinuous"));
  tests.push_back(TestSet("isDiscontinuious",             this, "+testSetDiscontinuous"));
  tests.push_back(TestSet("isInvertedSpectrum",           this, "+testSetInvertedSpectrum"));
  tests.push_back(TestSet("isOverRange",                  this, "+testSetOverRange"));
  tests.push_back(TestSet("isReferenceLocked",            this, "+testSetReferenceLocked"));
  tests.push_back(TestSet("isSignalDetected",             this, "+testSetSignalDetected"));
  tests.push_back(TestSet("setAutomaticGainControl",      this, "testSetAutomaticGainControl"));
  tests.push_back(TestSet("setBandOffsetIF",              this, "testSetBandOffsetIF"));
  tests.push_back(TestSet("setBandwidth",                 this, "testSetBandwidth"));
  tests.push_back(TestSet("setCalibratedTimestamp",       this, "testSetCalibratedTimestamp"));
  tests.push_back(TestSet("setChangePacket",              this, "testSetChangePacket"));
  tests.push_back(TestSet("setContextAssocLists",         this, "testSetContextAssocLists"));
  tests.push_back(TestSet("setDataPayloadFormat",         this, "testSetDataPayloadFormat"));
  tests.push_back(TestSet("setDataValid",                 this, "testSetDataValid"));
  tests.push_back(TestSet("setDeviceID",                  this, "testSetDeviceID"));
  tests.push_back(TestSet("setDeviceIdentifier",          this, "+testSetDeviceID"));
  tests.push_back(TestSet("setDiscontinuous",             this, "testSetDiscontinuous"));
  tests.push_back(TestSet("setDiscontinuious",            this, "+testSetDiscontinuous"));
  tests.push_back(TestSet("setEphemerisECEF",             this, "testSetEphemerisECEF"));
  tests.push_back(TestSet("setEphemerisReference",        this, "testSetEphemerisReference"));
  tests.push_back(TestSet("setEphemerisRelative",         this, "+testSetEphemerisECEF"));
  tests.push_back(TestSet("setGain",                      this, "testSetGain"));
  tests.push_back(TestSet("setGain1",                     this, "+testSetGain"));
  tests.push_back(TestSet("setGain2",                     this, "+testSetGain"));
  tests.push_back(TestSet("setGeolocationGPS",            this, "testSetGeolocation"));
  tests.push_back(TestSet("setGeolocationINS",            this, "+testSetGeolocation"));
  tests.push_back(TestSet("setGeoSentences",              this, "testSetGeoSentences"));
  tests.push_back(TestSet("setFrequencyIF",               this, "testSetFrequencyIF"));
  tests.push_back(TestSet("setFrequencyOffsetRF",         this, "testSetFrequencyOffsetRF"));
  tests.push_back(TestSet("setFrequencyRF",               this, "testSetFrequencyRF"));
  tests.push_back(TestSet("setInvertedSpectrum",          this, "testSetInvertedSpectrum"));
  tests.push_back(TestSet("setOverRange",                 this, "testSetOverRange"));
  tests.push_back(TestSet("setOverRangeCount",            this, "testSetOverRangeCount"));
  tests.push_back(TestSet("setReferenceLevel",            this, "testSetReferenceLevel"));
  tests.push_back(TestSet("setReferenceLocked",           this, "testSetReferenceLocked"));
  tests.push_back(TestSet("setReferencePointIdentifier",  this, "testSetReferencePointIdentifier"));
  tests.push_back(TestSet("setSampleRate",                this, "testSetSampleRate"));
  tests.push_back(TestSet("setSamplePeriod",              this, "testSetSamplePeriod"));
  tests.push_back(TestSet("setSignalDetected",            this, "testSetSignalDetected"));
//  tests.push_back(TestSet("setStateEventBit",             this, "testSetStateEventBit")); // See comment below
  tests.push_back(TestSet("setTimeStampAdjustment",       this, "testSetTimeStampAdjustment"));
  tests.push_back(TestSet("setTimeStampCalibration",      this, "testSetTimeStampCalibration"));
  tests.push_back(TestSet("setTemperature",               this, "testSetTemperature"));
  tests.push_back(TestSet("setUserDefinedBits",           this, "testSetUserDefinedBits"));

  tests.push_back(TestSet("addCIF1",                      this, "testAddCIF1"));
  tests.push_back(TestSet("addCIF2",                      this, "testAddCIF2"));
  tests.push_back(TestSet("addCIF3",                      this, "testAddCIF3"));
  tests.push_back(TestSet("addCIF7",                      this, "testAddCIF7"));

  // CIF1
  tests.push_back(TestSet("setBufferStatus",              this, "testSetBufferStatus"));
  tests.push_back(TestSet("setBuildVersion",              this, "testSetBuildVersion"));
  tests.push_back(TestSet("setV49SpecVersion",            this, "testSetV49SpecVersion"));
  tests.push_back(TestSet("setHealthStatus",              this, "testSetHealthStatus"));
  tests.push_back(TestSet("setDiscreteIO64",              this, "testSetDiscreteIO64"));
  tests.push_back(TestSet("setDiscreteIO32",              this, "testSetDiscreteIO32"));
  tests.push_back(TestSet("setDiscreteIO32+FunctionID",   this, "testSetDiscreteIO32CallOrder"));
  tests.push_back(TestSet("setIndexList",                 this, "testSetIndexList"));
  tests.push_back(TestSet("setSectorScanStep",            this, "testSetSectorScanStep"));
  tests.push_back(TestSet("setCIFsArray",                 this, "testSetCIFsArray"));
  tests.push_back(TestSet("setSpectrumField",             this, "testSetSpectrumField"));
  tests.push_back(TestSet("setAuxBandwidth",              this, "testSetAuxBandwidth"));
  tests.push_back(TestSet("setAuxGain",                   this, "testSetAuxGain"));
  tests.push_back(TestSet("setAuxGain1",                  this, "+testSetAuxGain"));
  tests.push_back(TestSet("setAuxGain2",                  this, "+testSetAuxGain"));
  tests.push_back(TestSet("setAuxFrequency",              this, "testSetAuxFrequency"));
  tests.push_back(TestSet("setSNR",                       this, "testSetSNR"));
  tests.push_back(TestSet("setNoiseFigure",               this, "testSetNoiseFigure"));
  tests.push_back(TestSet("setSecondOrderInputInterceptPoint", this, "testSetSecondOrderInputInterceptPoint"));
  tests.push_back(TestSet("setThirdOrderInputInterceptPoint",  this, "testSetThirdOrderInputInterceptPoint"));
  tests.push_back(TestSet("setOneDecibelCompressionPoint",     this, "testSetOneDecibelCompressionPoint"));
  tests.push_back(TestSet("setThreshold",                 this, "testSetThreshold"));
  tests.push_back(TestSet("setEbN0",                      this, "testSetEbN0"));
  tests.push_back(TestSet("setBitErrorRate",              this, "testSetBitErrorRate"));
  tests.push_back(TestSet("setRange",                     this, "testSetRange"));
  tests.push_back(TestSet("setBeamwidth",                 this, "testSetBeamwidth"));
  tests.push_back(TestSet("setHorizontalBeamwidth",       this, "+testSetBeamwidth"));
  tests.push_back(TestSet("setVerticalBeamwidth",         this, "+testSetBeamwidth"));
  tests.push_back(TestSet("set3DPointingVectorStructured", this, "testSet3DPointingVectorStructured"));
  tests.push_back(TestSet("set3DPointingVectorElevation",  this, "testSet3DPointingVectorElevation"));
  tests.push_back(TestSet("set3DPointingVectorAzimuth",    this, "testSet3DPointingVectorAzimuth"));
  tests.push_back(TestSet("setPolarizationTiltAngle",     this, "testSetPolarizationTiltAngle"));
  tests.push_back(TestSet("setPolarizationEllipticityAngle",   this, "testSetPolarizationEllipticityAngle"));
  tests.push_back(TestSet("setPhaseOffset",               this, "testSetPhaseOffset"));

  // CIF2
  tests.push_back(TestSet("setModeID",                    this, "testSetModeID"));
  tests.push_back(TestSet("setSpatialReferenceType",      this, "testSetSpatialReferenceType"));
  tests.push_back(TestSet("setSpatialScanType",           this, "testSetSpatialScanType"));
  tests.push_back(TestSet("setFunctionPriorityID",        this, "testSetFunctionPriorityID"));
  tests.push_back(TestSet("setEventID",                   this, "testSetEventID"));
  tests.push_back(TestSet("setFunctionID",                this, "testSetFunctionID"));
  tests.push_back(TestSet("setModulationType",            this, "testSetModulationType"));
  tests.push_back(TestSet("setModulationClass",           this, "testSetModulationClass"));
  tests.push_back(TestSet("setEmsDeviceClass",            this, "testSetEmsDeviceClass"));
  tests.push_back(TestSet("setOperator",                  this, "testSetOperator"));
  tests.push_back(TestSet("setCountryCode",               this, "testSetCountryCode"));

  tests.push_back(TestSet("setPlatformClass",             this, "testSetPlatformClass"));
  tests.push_back(TestSet("setPlatformInstance",          this, "testSetPlatformInstance"));
  tests.push_back(TestSet("setTrackID",                   this, "testSetTrackID"));
  tests.push_back(TestSet("setRFFootprintRange",          this, "testSetRFFootprintRange"));
  tests.push_back(TestSet("setRFFootprint",               this, "testSetRFFootprint"));
  tests.push_back(TestSet("setCommunicationPriorityID",   this, "testSetCommunicationPriorityID"));
  tests.push_back(TestSet("setEmsDeviceInstance",         this, "testSetEmsDeviceInstance"));
  tests.push_back(TestSet("setEmsDeviceType",             this, "testSetEmsDeviceType"));
  tests.push_back(TestSet("setPlatformDisplay",           this, "testSetPlatformDisplay"));
  tests.push_back(TestSet("setInformationSource",         this, "testSetInformationSource"));
  tests.push_back(TestSet("setControllerUUIDField",       this, "testSetControllerUUIDField"));
  tests.push_back(TestSet("setControllerIDField",         this, "testSetControllerIDField"));
  tests.push_back(TestSet("setControlleeUUIDField",       this, "testSetControlleeUUIDField"));
  tests.push_back(TestSet("setControlleeIDField",         this, "testSetControlleeIDField"));
  tests.push_back(TestSet("setCitedMessageID",            this, "testSetCitedMessageID"));
  tests.push_back(TestSet("setChildrenSID",               this, "testSetChildrenSID"));
  tests.push_back(TestSet("setParentsSID",                this, "testSetParentsSID"));
  tests.push_back(TestSet("setSiblingsSID",               this, "testSetSiblingsSID"));
  tests.push_back(TestSet("setCitedSID",                  this, "testSetCitedSID"));
  tests.push_back(TestSet("setBindField",                 this, "testSetBindField"));

  // CIF3
  tests.push_back(TestSet("setNetworkID",                 this, "testSetNetworkID"));
  tests.push_back(TestSet("setTroposphericState",         this, "testSetTroposphericState"));
  tests.push_back(TestSet("setSeaAndSwellState",          this, "testSetSeaAndSwellState"));
  tests.push_back(TestSet("setBarometricPressure",        this, "testSetBarometricPressure"));
  tests.push_back(TestSet("setHumidity",                  this, "testSetHumidity"));
  tests.push_back(TestSet("setSeaGroundTemperature",      this, "testSetSeaGroundTemperature"));
  tests.push_back(TestSet("setAirTemperature",            this, "testSetAirTemperature"));
  tests.push_back(TestSet("setShelfLife",                 this, "testSetShelfLife"));
  tests.push_back(TestSet("setAge",                       this, "testSetAge"));
  tests.push_back(TestSet("setJitter",                    this, "testSetJitter"));
  tests.push_back(TestSet("setDwell",                     this, "testSetDwell"));
  tests.push_back(TestSet("setDuration",                  this, "testSetDuration"));
  tests.push_back(TestSet("setPeriod",                    this, "testSetPeriod"));
  tests.push_back(TestSet("setPulseWidth",                this, "testSetPulseWidth"));
  tests.push_back(TestSet("setOffsetTime",                this, "testSetOffsetTime"));
  tests.push_back(TestSet("setFallTime",                  this, "testSetFallTime"));
  tests.push_back(TestSet("setRiseTime",                  this, "testSetRiseTime"));
  tests.push_back(TestSet("setTimestampSkew",             this, "testSetTimestampSkew"));
  tests.push_back(TestSet("setTimestampDetails",          this, "testSetTimestampDetails"));

  // CIF7
  tests.push_back(TestSet("setCIF7Belief",                            this, "testSetCIF7Belief"));
  tests.push_back(TestSet("setCIF7Probability",                       this, "testSetCIF7Probability"));
  tests.push_back(TestSet("setReferencePointIdentifierCIF7Median",    this, "testSetReferencePointIdentifierCIF7Median"));
  tests.push_back(TestSet("setReferencePointIdentifierCIF7Multiple",  this, "testSetReferencePointIdentifierCIF7Multiple"));

  tests.push_back(TestSet("getField(..)",                 this,  "testGetField"));
  tests.push_back(TestSet("getFieldByName(..)",           this, "+testGetField"));
  tests.push_back(TestSet("getFieldCount()",              this, "+testGetFieldName"));
  tests.push_back(TestSet("getFieldID(..)",               this, "+testGetFieldName"));
  tests.push_back(TestSet("getFieldName(..)",             this,  "testGetFieldName"));
  tests.push_back(TestSet("getFieldType(..)",             this, "+testGetFieldName"));
  tests.push_back(TestSet("setField(..)",                 this, "+testGetField"));
  tests.push_back(TestSet("setFieldByName(..)",           this, "+testGetField"));

  return tests;
}

void BasicQueryAcknowledgePacketTest::done () {
  // nothing to do
}

void BasicQueryAcknowledgePacketTest::call (const string &func) {
  if (func == "testSetPacketType"                       ) testSetPacketType();
  if (func == "testResetForResend"                      ) testResetForResend();

  // CommandPacket methods - TODO

  if (func == "testGetAdjustedTimestamp"                ) testGetAdjustedTimestamp();
  if (func == "testSetAutomaticGainControl"             ) testSetAutomaticGainControl();
  if (func == "testSetBandOffsetIF"                     ) testSetBandOffsetIF();
  if (func == "testSetBandwidth"                        ) testSetBandwidth();
  if (func == "testSetCalibratedTimestamp"              ) testSetCalibratedTimestamp();
  if (func == "testSetChangePacket"                     ) testSetChangePacket();
  if (func == "testSetContextAssocLists"                ) testSetContextAssocLists();
  if (func == "testSetDataPayloadFormat"                ) testSetDataPayloadFormat();
  if (func == "testSetDeviceID"                         ) testSetDeviceID();
  if (func == "testSetDataValid"                        ) testSetDataValid();
  if (func == "testSetDiscontinuous"                    ) testSetDiscontinuous();
  if (func == "testSetEphemerisECEF"                    ) testSetEphemerisECEF();
  if (func == "testSetEphemerisReference"               ) testSetEphemerisReference();
  if (func == "testSetGain"                             ) testSetGain();
  if (func == "testSetGeolocation"                      ) testSetGeolocation();
  if (func == "testSetGeoSentences"                     ) testSetGeoSentences();
  if (func == "testSetFrequencyIF"                      ) testSetFrequencyIF();
  if (func == "testSetFrequencyOffsetRF"                ) testSetFrequencyOffsetRF();
  if (func == "testSetFrequencyRF"                      ) testSetFrequencyRF();
  if (func == "testSetInvertedSpectrum"                 ) testSetInvertedSpectrum();
  if (func == "testSetOverRange"                        ) testSetOverRange();
  if (func == "testSetOverRangeCount"                   ) testSetOverRangeCount();
  if (func == "testSetReferenceLevel"                   ) testSetReferenceLevel();
  if (func == "testSetReferenceLocked"                  ) testSetReferenceLocked();
  if (func == "testSetReferencePointIdentifier"         ) testSetReferencePointIdentifier();
  if (func == "testSetSamplePeriod"                     ) testSetSamplePeriod();
  if (func == "testSetSampleRate"                       ) testSetSampleRate();
  if (func == "testSetSignalDetected"                   ) testSetSignalDetected();
//  if (func == "testSetStateEventBit"                    ) testSetStateEventBit(); // see comment below
  if (func == "testSetTemperature"                      ) testSetTemperature();
  if (func == "testSetTimeStampAdjustment"              ) testSetTimeStampAdjustment();
  if (func == "testSetTimeStampCalibration"             ) testSetTimeStampCalibration();
  if (func == "testSetUserDefinedBits"                  ) testSetUserDefinedBits();

  if (func == "testAddCIF1"                             ) testAddCIF1();
  if (func == "testAddCIF2"                             ) testAddCIF2();
  if (func == "testAddCIF3"                             ) testAddCIF3();
  if (func == "testAddCIF7"                             ) testAddCIF7();

  // CIF1
  if (func == "testSetBufferStatus"                     ) testSetBufferStatus();
  if (func == "testSetBuildVersion"                     ) testSetBuildVersion();
  if (func == "testSetV49SpecVersion"                   ) testSetV49SpecVersion();
  if (func == "testSetHealthStatus"                     ) testSetHealthStatus();
  if (func == "testSetDiscreteIO64"                     ) testSetDiscreteIO64();
  if (func == "testSetDiscreteIO32"                     ) testSetDiscreteIO32();
  if (func == "testSetDiscreteIO32CallOrder"            ) testSetDiscreteIO32CallOrder();
  if (func == "testSetIndexList"                        ) testSetIndexList();
  if (func == "testSetSectorScanStep"                   ) testSetSectorScanStep();
  if (func == "testSetCIFsArray"                        ) testSetCIFsArray();
  if (func == "testSetSpectrumField"                    ) testSetSpectrumField();
  if (func == "testSetAuxBandwidth"                     ) testSetAuxBandwidth();
  if (func == "testSetAuxGain"                          ) testSetAuxGain();
//  if (func == "testSetAuxGain1"                         ) testSetAuxGain1(); // tested by testSetAuxGain
//  if (func == "testSetAuxGain2"                         ) testSetAuxGain2() // tested by testSetAuxGain;
  if (func == "testSetAuxFrequency"                     ) testSetAuxFrequency();
//  if (func == "testSetSNR"                              ) testSetSNR(); // tested by testSetSNRNoiseFigure (below)
//  if (func == "testSetNoiseFigure"                      ) testSetNoiseFigure(); // tested by testSetSNRNoiseFigure (below)
  if (func == "testSetSNR"                              ) testSetSNRNoiseFigure();
  if (func == "testSetNoiseFigure"                      ) testSetSNRNoiseFigure();
//  if (func == "testSetSecondOrderInputInterceptPoint"   ) testSetSecondOrderInputInterceptPoint();
//  if (func == "testSetThirdOrderInputInterceptPoint"    ) testSetThirdOrderInputInterceptPoint();
  if (func == "testSetSecondOrderInputInterceptPoint"   ) testSetInputInterceptPoint();
  if (func == "testSetThirdOrderInputInterceptPoint"    ) testSetInputInterceptPoint();
  if (func == "testSetOneDecibelCompressionPoint"       ) testSetOneDecibelCompressionPoint();
  if (func == "testSetThreshold"                        ) testSetThreshold();
//  if (func == "testSetEbN0"                             ) testSetEbN0(); // tested by testSetEbN0BitErrorRate
//  if (func == "testSetBitErrorRate"                     ) testSetBitErrorRate(); // tested by testSetEbN0BitErrorRate
  if (func == "testSetEbN0"                             ) testSetEbN0BitErrorRate();
  if (func == "testSetBitErrorRate"                     ) testSetEbN0BitErrorRate();
  if (func == "testSetRange"                            ) testSetRange();
  if (func == "testSetBeamwidth"                        ) testSetBeamwidth();
  if (func == "testSet3DPointingVectorStructured"        ) testSet3DPointingVectorStructured();
//  if (func == "testSet3DPointingVectorElevation"         ) testSet3DPointingVectorElevation(); // tested by testSet3DPointingVector
//  if (func == "testSet3DPointingVectorAzimuth"           ) testSet3DPointingVectorAzimuth(); // tested by testSet3DPointingVector
  if (func == "testSet3DPointingVectorElevation"         ) testSet3DPointingVector();
  if (func == "testSet3DPointingVectorAzimuth"           ) testSet3DPointingVector();
//  if (func == "testSetPolarizationTiltAngle"            ) testSetPolarizationTiltAngle(); // tested by testSetPolarizationAngle
//  if (func == "testSetPolarizationEllipticityAngle"     ) testSetPolarizationEllipticityAngle(); // tested by testSetPolarizationAngle
  if (func == "testSetPolarizationTiltAngle"            ) testSetPolarizationAngle();
  if (func == "testSetPolarizationEllipticityAngle"     ) testSetPolarizationAngle();
  if (func == "testSetPhaseOffset"                      ) testSetPhaseOffset();


  // CIF2
  if (func == "testSetModeID"                           ) testSetModeID();
  if (func == "testSetSpatialReferenceType"             ) testSetSpatialReferenceType();
  if (func == "testSetSpatialScanType"                  ) testSetSpatialScanType();
  if (func == "testSetFunctionPriorityID"               ) testSetFunctionPriorityID();
  if (func == "testSetEventID"                          ) testSetEventID();
  if (func == "testSetFunctionID"                       ) testSetFunctionID();
  if (func == "testSetModulationType"                   ) testSetModulationType();
  if (func == "testSetModulationClass"                  ) testSetModulationClass();
  if (func == "testSetEmsDeviceClass"                   ) testSetEmsDeviceClass();
  if (func == "testSetOperator"                         ) testSetOperator();
  if (func == "testSetCountryCode"                      ) testSetCountryCode();

  if (func == "testSetPlatformClass"                    ) testSetPlatformClass();
  if (func == "testSetPlatformInstance"                 ) testSetPlatformInstance();
  if (func == "testSetTrackID"                          ) testSetTrackID();
  if (func == "testSetRFFootprintRange"                 ) testSetRFFootprintRange();
  if (func == "testSetRFFootprint"                      ) testSetRFFootprint();
  if (func == "testSetCommunicationPriorityID"          ) testSetCommunicationPriorityID();
  if (func == "testSetEmsDeviceInstance"                ) testSetEmsDeviceInstance();
  if (func == "testSetEmsDeviceType"                    ) testSetEmsDeviceType();
  if (func == "testSetPlatformDisplay"                  ) testSetPlatformDisplay();
  if (func == "testSetInformationSource"                ) testSetInformationSource();
  if (func == "testSetControllerUUIDField"              ) testSetControllerUUIDField();
  if (func == "testSetControllerIDField"                ) testSetControllerIDField();
  if (func == "testSetControlleeUUIDField"              ) testSetControlleeUUIDField();
  if (func == "testSetControlleeIDField"                ) testSetControlleeIDField();
  if (func == "testSetCitedMessageID"                   ) testSetCitedMessageID();
  if (func == "testSetChildrenSID"                      ) testSetChildrenSID();
  if (func == "testSetParentsSID"                       ) testSetParentsSID();
  if (func == "testSetSiblingsSID"                      ) testSetSiblingsSID();
  if (func == "testSetCitedSID"                         ) testSetCitedSID();
  if (func == "testSetBindField"                        ) testSetBindField();

  // CIF3
  if (func == "testSetNetworkID"                        ) testSetNetworkID();
  if (func == "testSetTroposphericState"                ) testSetTroposphericState();
  if (func == "testSetSeaAndSwellState"                 ) testSetSeaAndSwellState();
  if (func == "testSetBarometricPressure"               ) testSetBarometricPressure();
  if (func == "testSetHumidity"                         ) testSetHumidity();
  if (func == "testSetSeaGroundTemperature"             ) testSetSeaGroundTemperature();
  if (func == "testSetAirTemperature"                   ) testSetAirTemperature();
  if (func == "testSetShelfLife"                        ) testSetShelfLife();
  if (func == "testSetAge"                              ) testSetAge();
  if (func == "testSetJitter"                           ) testSetJitter();
  if (func == "testSetDwell"                            ) testSetDwell();
  if (func == "testSetDuration"                         ) testSetDuration();
  if (func == "testSetPeriod"                           ) testSetPeriod();
  if (func == "testSetPulseWidth"                       ) testSetPulseWidth();
  if (func == "testSetOffsetTime"                       ) testSetOffsetTime();
  if (func == "testSetFallTime"                         ) testSetFallTime();
  if (func == "testSetRiseTime"                         ) testSetRiseTime();
  if (func == "testSetTimestampSkew"                    ) testSetTimestampSkew();
  if (func == "testSetTimestampDetails"                 ) testSetTimestampDetails();

  // CIF7
  if (func == "testSetCIF7Belief"                                 ) testSetCIF7Belief();
  if (func == "testSetCIF7Probability"                            ) testSetCIF7Probability();
  if (func == "testSetReferencePointIdentifierCIF7Median"     ) testSetReferencePointIdentifierCIF7Median();
  if (func == "testSetReferencePointIdentifierCIF7Multiple"   ) testSetReferencePointIdentifierCIF7Multiple();
}


void BasicQueryAcknowledgePacketTest::testResetForResend () {
  BasicQueryAcknowledgePacket p;
  p.setOverRange(_TRUE);
  p.setDiscontinuous(_TRUE);
  p.setCalibratedTimeStamp(_TRUE);
  p.setReferenceLocked(_TRUE);

  assertEquals("resetForResend() before", 0xA30A3000, getOneWordFieldValue((char*)p.getPayloadPointer(), _STATE_EVENT) & 0xA30A3000);
  p.resetForResend(TimeStamp(IntegerMode_GPS,0,0));
  assertEquals("resetForResend() after", 0xA00A0000, getOneWordFieldValue((char*)p.getPayloadPointer(), _STATE_EVENT) & 0xA30A3000);

}

void BasicQueryAcknowledgePacketTest::testSetPacketType () {
  BasicQueryAcknowledgePacket p;
  char* buffer;
  buffer = (char*)p.getPacketPointer();
  assertEquals("getPacketType()", 6, (buffer[0] >> 4)); // Should default to Command

  p.setPacketType(PacketType_Command); // Setting to Command also valid
  buffer = (char*)p.getPacketPointer();
  assertEquals("setPacketType(Command)", 6, (buffer[0] >> 4));

}

void BasicQueryAcknowledgePacketTest::testSetChangePacket () {
  BasicQueryAcknowledgePacket p;
  p.setChangePacket(false);
  assertEquals("getChangePacket(false)",false,p.isChangePacket());
  assertEquals("setChangePacket(false)", 0x00000000, VRTMath::unpackInt(p.getPayloadPointer(), 0) & 0x80000000);

  p.setChangePacket(true);
  assertEquals("getChangePacket(true)",true,p.isChangePacket());
  assertEquals("setChangePacket(true)", 0x80000000, VRTMath::unpackInt(p.getPayloadPointer(), 0) & 0x80000000);
 }

void BasicQueryAcknowledgePacketTest::testSetCalibratedTimestamp () {
  BasicQueryAcknowledgePacket p;
  p.setCalibratedTimeStamp(_TRUE);
  assertEquals("isCalibratedTimestamp()",      _TRUE,       p.isCalibratedTimeStamp());
  assertEquals("setCalibratedTimestamp(true)", 0x80080000, getOneWordFieldValue((char*)p.getPayloadPointer(), _STATE_EVENT) & 0x80080000);

  p.setCalibratedTimeStamp(_FALSE);
  assertEquals("isCalibratedTimestamp()",      _FALSE,      p.isCalibratedTimeStamp());
  assertEquals("setCalibratedTimestamp(false)", 0x80000000, getOneWordFieldValue((char*)p.getPayloadPointer(), _STATE_EVENT) & 0x80080000);
}

void BasicQueryAcknowledgePacketTest::testSetDataValid () {
  BasicQueryAcknowledgePacket p;
  p.setDataValid(_TRUE);
  assertEquals("isDataValid()",      _TRUE,       p.isDataValid());
  assertEquals("setDataValid(true)", 0x40040000, getOneWordFieldValue((char*)p.getPayloadPointer(), _STATE_EVENT) & 0x40040000);

  p.setDataValid(_FALSE);
  assertEquals("isDataValid()",      _FALSE,      p.isDataValid());
  assertEquals("setDataValid(false)", 0x40000000, getOneWordFieldValue((char*)p.getPayloadPointer(), _STATE_EVENT) & 0x40040000);
}

void BasicQueryAcknowledgePacketTest::testSetReferenceLocked () {
  BasicQueryAcknowledgePacket p;
  p.setReferenceLocked(_TRUE);
  assertEquals("isReferenceLocked()",      _TRUE,       p.isReferenceLocked());
  assertEquals("setReferenceLocked(true)", 0x20020000, getOneWordFieldValue((char*)p.getPayloadPointer(), _STATE_EVENT) & 0x20020000);

  p.setReferenceLocked(_FALSE);
  assertEquals("isReferenceLocked()",      _FALSE,      p.isReferenceLocked());
  assertEquals("setReferenceLocked(false)", 0x20000000, getOneWordFieldValue((char*)p.getPayloadPointer(), _STATE_EVENT) & 0x20020000);
}

void BasicQueryAcknowledgePacketTest::testSetAutomaticGainControl () {
  BasicQueryAcknowledgePacket p;
  p.setAutomaticGainControl(_TRUE);
  assertEquals("isAutomaticGainControl()",      _TRUE,       p.isAutomaticGainControl());
  assertEquals("setAutomaticGainControl(true)", 0x10010000, getOneWordFieldValue((char*)p.getPayloadPointer(), _STATE_EVENT) & 0x10010000);

  p.setAutomaticGainControl(_FALSE);
  assertEquals("isAutomaticGainControl()",      _FALSE,      p.isAutomaticGainControl());
  assertEquals("setAutomaticGainControl(false)", 0x10000000, getOneWordFieldValue((char*)p.getPayloadPointer(), _STATE_EVENT) & 0x10010000);
}

void BasicQueryAcknowledgePacketTest::testSetSignalDetected () {
  BasicQueryAcknowledgePacket p;
  p.setSignalDetected(_TRUE);
  assertEquals("isSignalDetected()",      _TRUE,       p.isSignalDetected());
  assertEquals("setSignalDetected(true)", 0x08008000, getOneWordFieldValue((char*)p.getPayloadPointer(), _STATE_EVENT) & 0x08008000);

  p.setSignalDetected(_FALSE);
  assertEquals("isSignalDetected()",      _FALSE,      p.isSignalDetected());
  assertEquals("setSignalDetected(false)", 0x08000000, getOneWordFieldValue((char*)p.getPayloadPointer(), _STATE_EVENT) & 0x08008000);
}

void BasicQueryAcknowledgePacketTest::testSetInvertedSpectrum () {
  BasicQueryAcknowledgePacket p;
  p.setInvertedSpectrum(_TRUE);
  assertEquals("isInvertedSpectrum()",      _TRUE,       p.isInvertedSpectrum());
  assertEquals("setInvertedSpectrum(true)", 0x04004000, getOneWordFieldValue((char*)p.getPayloadPointer(), _STATE_EVENT) & 0x04004000);

  p.setInvertedSpectrum(_FALSE);
  assertEquals("isInvertedSpectrum()",      _FALSE,      p.isInvertedSpectrum());
  assertEquals("setInvertedSpectrum(false)", 0x04000000, getOneWordFieldValue((char*)p.getPayloadPointer(), _STATE_EVENT) & 0x04004000);
}

void BasicQueryAcknowledgePacketTest::testSetOverRange () {
  BasicQueryAcknowledgePacket p;
  p.setOverRange(_TRUE);
  assertEquals("isOverRange()",      _TRUE,       p.isOverRange());
  assertEquals("setOverRange(true)", 0x02002000, getOneWordFieldValue((char*)p.getPayloadPointer(), _STATE_EVENT) & 0x02002000);

  p.setOverRange(_FALSE);
  assertEquals("isOverRange()",      _FALSE,      p.isOverRange());
  assertEquals("setOverRange(false)", 0x02000000, getOneWordFieldValue((char*)p.getPayloadPointer(), _STATE_EVENT) & 0x02002000);
}

void BasicQueryAcknowledgePacketTest::testSetDiscontinuous () {
  BasicQueryAcknowledgePacket p;
  p.setDiscontinuous(_TRUE);
  assertEquals("isDiscontinuous()",      _TRUE,       p.isDiscontinuous());
  assertEquals("setDiscontinuous(true)", 0x01001000, getOneWordFieldValue((char*)p.getPayloadPointer(), _STATE_EVENT) & 0x01001000);

  p.setDiscontinuous(_FALSE);
  assertEquals("isDiscontinuous()",      _FALSE,      p.isDiscontinuous());
  assertEquals("setDiscontinuous(false)", 0x01000000, getOneWordFieldValue((char*)p.getPayloadPointer(), _STATE_EVENT) & 0x01001000);

}

void BasicQueryAcknowledgePacketTest::testSetReferencePointIdentifier () {
  BasicQueryAcknowledgePacket p;
  p.setReferencePointIdentifier(0);
  assertEquals("getReferencePointIdentifier(0)", 0, p.getReferencePointIdentifier());
  assertEquals("setReferencePointIdentifier(0)", 0, getOneWordFieldValue((char*)p.getPayloadPointer(), _REF_POINT));

  p.setReferencePointIdentifier(0x12345678);
  assertEquals("getReferencePointIdentifier(0x12345678)", 0x12345678, p.getReferencePointIdentifier());
  assertEquals("setReferencePointIdentifier(0x12345678)", 0x12345678, getOneWordFieldValue((char*)p.getPayloadPointer(), _REF_POINT));

  p.setReferencePointIdentifier(0xFFFFFFFF);
  assertEquals("getReferencePointIdentifier(0xFFFFFFFF)", 0xFFFFFFFF, p.getReferencePointIdentifier());
  assertEquals("setReferencePointIdentifier(0xFFFFFFFF)", 0xFFFFFFFF, getOneWordFieldValue((char*)p.getPayloadPointer(), _REF_POINT));
}

void BasicQueryAcknowledgePacketTest::testSetBandwidth () {
  BasicQueryAcknowledgePacket p;
  p.setBandwidth(1.0);
  assertEquals("getBandwidth(1.0)", 1.0, p.getBandwidth(), 0.00000095);
  assertEquals("setBandwidth(1.0)", __INT64_C(0x0000000000100000), getTwoWordFieldValue((char*)p.getPayloadPointer(), _BANDWIDTH));

  p.setBandwidth(0.00000095);
  assertEquals("getBandwidth(0.00000095)", 0.00000095, p.getBandwidth(), 0.00000095);
  assertEquals("setBandwidth(0.00000095)", __INT64_C(1), getTwoWordFieldValue((char*)p.getPayloadPointer(), _BANDWIDTH));

  p.setBandwidth(15.5);
  assertEquals("getBandwidth(15.5)", 15.5, p.getBandwidth(), 0.00000095);
  assertEquals("setBandwidth(15.5)", __INT64_C(0x0000000000F80000), getTwoWordFieldValue((char*)p.getPayloadPointer(), _BANDWIDTH));

}

void BasicQueryAcknowledgePacketTest::testSetFrequencyIF () {
  BasicQueryAcknowledgePacket p;
  p.setFrequencyIF(1.0);
  assertEquals("getFrequencyIF(1.0)", 1.0, p.getFrequencyIF(), 0.00000095);
  assertEquals("setFrequencyIF(1.0)", __INT64_C(0x0000000000100000), getTwoWordFieldValue((char*)p.getPayloadPointer(), _IF_FREQ));

  p.setFrequencyIF(-0.00000095);
  assertEquals("getFrequencyIF(-0.00000095)", -0.00000095, p.getFrequencyIF(), 0.00000095);
  assertEquals("setFrequencyIF(-0.00000095)", __INT64_C(0xFFFFFFFFFFFFFFFF), getTwoWordFieldValue((char*)p.getPayloadPointer(), _IF_FREQ));

  p.setFrequencyIF(0.00000095);
  assertEquals("getFrequencyIF(0.00000095)", 0.00000095, p.getFrequencyIF(), 0.00000095);
  assertEquals("setFrequencyIF(0.00000095)", __INT64_C(1), getTwoWordFieldValue((char*)p.getPayloadPointer(), _IF_FREQ));
}

void BasicQueryAcknowledgePacketTest::testSetFrequencyRF () {
  BasicQueryAcknowledgePacket p;
  p.setFrequencyRF(1.0);
  assertEquals("getFrequencyRF(1.0)", 1.0, p.getFrequencyRF(), 0.00000095);
  assertEquals("setFrequencyRF(1.0)", __INT64_C(0x0000000000100000), getTwoWordFieldValue((char*)p.getPayloadPointer(), _RF_FREQ));

  p.setFrequencyRF(-0.00000095);
  assertEquals("getFrequencyRF(-0.00000095)", -0.00000095, p.getFrequencyRF(), 0.00000095);
  assertEquals("setFrequencyRF(-0.00000095)", __INT64_C(0xFFFFFFFFFFFFFFFF), getTwoWordFieldValue((char*)p.getPayloadPointer(), _RF_FREQ));

  p.setFrequencyRF(0.00000095);
  assertEquals("getFrequencyRF(0.00000095)", 0.00000095, p.getFrequencyRF(), 0.00000095);
  assertEquals("setFrequencyRF(0.00000095)", __INT64_C(1), getTwoWordFieldValue((char*)p.getPayloadPointer(), _RF_FREQ));
}

void BasicQueryAcknowledgePacketTest::testSetBandOffsetIF () {
  BasicQueryAcknowledgePacket p;
  p.setBandOffsetIF(1.0);
  assertEquals("getBandOffsetIF(1.0)", 1.0, p.getBandOffsetIF(), 0.00000095);
  assertEquals("setBandOffsetIF(1.0)", __INT64_C(0x0000000000100000), getTwoWordFieldValue((char*)p.getPayloadPointer(), _IF_OFFSET));

  p.setBandOffsetIF(-0.00000095);
  assertEquals("getBandOffsetIF(-0.00000095)", -0.00000095, p.getBandOffsetIF(), 0.00000095);
  assertEquals("setBandOffsetIF(-0.00000095)", __INT64_C(0xFFFFFFFFFFFFFFFF), getTwoWordFieldValue((char*)p.getPayloadPointer(), _IF_OFFSET));

  p.setBandOffsetIF(0.00000095);
  assertEquals("getBandOffsetIF(0.00000095)", 0.00000095, p.getBandOffsetIF(), 0.00000095);
  assertEquals("setBandOffsetIF(0.00000095)", __INT64_C(1), getTwoWordFieldValue((char*)p.getPayloadPointer(), _IF_OFFSET));
}

void BasicQueryAcknowledgePacketTest::testSetFrequencyOffsetRF () {
  BasicQueryAcknowledgePacket p;
  p.setFrequencyOffsetRF(1.0);
  assertEquals("getFrequencyOffsetRF(1.0)", 1.0, p.getFrequencyOffsetRF(), 0.00000095);
  assertEquals("setFrequencyOffsetRF(1.0)", __INT64_C(0x0000000000100000), getTwoWordFieldValue((char*)p.getPayloadPointer(), _RF_OFFSET));

  p.setFrequencyOffsetRF(-0.00000095);
  assertEquals("getFrequencyOffsetRF(-0.00000095)", -0.00000095, p.getFrequencyOffsetRF(), 0.00000095);
  assertEquals("setFrequencyOffsetRF(-0.00000095)", __INT64_C(0xFFFFFFFFFFFFFFFF), getTwoWordFieldValue((char*)p.getPayloadPointer(), _RF_OFFSET));

  p.setFrequencyOffsetRF(0.00000095);
  assertEquals("getFrequencyOffsetRF(0.00000095)", 0.00000095, p.getFrequencyOffsetRF(), 0.00000095);
  assertEquals("setFrequencyOffsetRF(0.00000095)", __INT64_C(1), getTwoWordFieldValue((char*)p.getPayloadPointer(), _RF_OFFSET));
}

void BasicQueryAcknowledgePacketTest::testSetReferenceLevel () {
  BasicQueryAcknowledgePacket p;
  p.setReferenceLevel((float)1.0);
  assertEquals("getReferenceLevel(1)", 1.0,        (double)p.getReferenceLevel(), 0.001);
  assertEquals("setReferenceLevel(1)", 0x00000080, getOneWordFieldValue((char*)p.getPayloadPointer(), _REF_LEVEL));

  p.setReferenceLevel((float)-1.0);
  assertEquals("getReferenceLevel(-1)", -1.0,       (double)p.getReferenceLevel(), 0.001);
  assertEquals("setReferenceLevel(-1)", 0x0000FF80, getOneWordFieldValue((char*)p.getPayloadPointer(), _REF_LEVEL));

  p.setReferenceLevel((float)-0.0078125);
  assertEquals("getReferenceLevel(-0.0078125)",  -0.0078125, (double)p.getReferenceLevel(),0.001);
  assertEquals("setReferenceLevel(-0.0078125)",  0x0000FFFF, getOneWordFieldValue((char*)p.getPayloadPointer(), _REF_LEVEL));

  p.setReferenceLevel((float)0.0078125);
  assertEquals("getReferenceLevel(0.0078125)", 0.0078125,  (double)p.getReferenceLevel(),0.001);
  assertEquals("setReferenceLevel(0.0078125)", 0x00000001, getOneWordFieldValue((char*)p.getPayloadPointer(), _REF_LEVEL));

}

void BasicQueryAcknowledgePacketTest::testSetGain () {
  const int32_t CIF_bit = 23;
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  p.setGain((float)1.0, (float)1.0);
  int32_t len1 = p.getPayloadLength();
  assertEquals("setGain(1.0) pkt len", len0+4, len1);
  assertEquals("getGain1(1.0)", 1.0,        (double)p.getGain1(), 0.001);
  assertEquals("getGain2(1.0)", 1.0,        (double)p.getGain2(), 0.001);
  assertEquals("getGain2(1.0)", 2.0,        (double)p.getGain(),  0.001);
  assertEquals("setGain(-1)",   0x00800080, getOneWordFieldValue((char*)p.getPayloadPointer(), _GAIN));

  p.setGain((float)-1.0, (float)-1.0);
  assertEquals("getGain1(-1.0)", -1.0,       (double)p.getGain1(), 0.001);
  assertEquals("getGain2(-1.0)", -1.0,       (double)p.getGain2(), 0.001);
  assertEquals("getGain(-1.0)",  -2.0,       (double)p.getGain(),  0.001);
  assertEquals("setGain(-1)",    0xFF80FF80, getOneWordFieldValue((char*)p.getPayloadPointer(), _GAIN));

  p.setGain((float)0.0078125, (float)0.0078125);
  assertEquals("getGain1(0.0078125)", 0.0078125,   (double)p.getGain1(), 0.001);
  assertEquals("getGain2(0.0078125)", 0.0078125,   (double)p.getGain2(), 0.001);
  assertEquals("getGain(0.0078125)",  0.0078125*2, (double)p.getGain(),  0.001);
  assertEquals("setGain(0.0078125)",  0x00010001,  getOneWordFieldValue((char*)p.getPayloadPointer(), _GAIN));

  p.setGain((float)-0.0078125, (float)-0.0078125);
  assertEquals("getGain1(-0.0078125)", -0.0078125,   (double)p.getGain1(), 0.001);
  assertEquals("getGain2(-0.0078125)", -0.0078125,   (double)p.getGain2(), 0.001);
  assertEquals("getGain(-0.0078125)",  -0.0078125*2, (double)p.getGain(),  0.001);
  assertEquals("setGain(-0.0078125)",  0xFFFFFFFF,   getOneWordFieldValue((char*)p.getPayloadPointer(), _GAIN));

  // Make sure gain values are in correct place (VRT-39) [Gain 1 in lower-order
  // bits and Gain 2 in the higher-order bits.]
  p.setGain(1.0f, 0.0078125f);
  assertEquals("getGain1()",  1.0,        (double)p.getGain1(), 0.001);
  assertEquals("getGain2()",  0.0078125,  (double)p.getGain2(), 0.001);
  assertEquals("getGain()",   1.0078125,  (double)p.getGain(),  0.001);
  assertEquals("setGain(..)", 0x00010080, getOneWordFieldValue((char*)p.getPayloadPointer(), _GAIN));

  // Make sure setting individual gain values works
  p.setGain(-1.0f, -1.0f);
  p.setGain(1.0f);
  assertEquals("getGain1()",  1.0,        (double)p.getGain1(), 0.001);
  assertEquals("getGain2()",  0.0,        (double)p.getGain2(), 0.001);
  assertEquals("getGain()",   1.0,        (double)p.getGain(),  0.001);
  assertEquals("setGain(..)", 0x00000080, getOneWordFieldValue((char*)p.getPayloadPointer(), _GAIN));

  p.setGain(-1.0f, -1.0f);
  p.setGain1(1.0f);
  assertEquals("getGain1()",  1.0,        (double)p.getGain1(), 0.001);
  assertEquals("getGain2()", -1.0,        (double)p.getGain2(), 0.001);
  assertEquals("getGain()",   0.0,        (double)p.getGain(),  0.001);
  assertEquals("setGain(..)", 0xFF800080, getOneWordFieldValue((char*)p.getPayloadPointer(), _GAIN));

  p.setGain(-1.0f, -1.0f);
  p.setGain2(1.0f);
  assertEquals("getGain1()", -1.0,        (double)p.getGain1(), 0.001);
  assertEquals("getGain2()",  1.0,        (double)p.getGain2(), 0.001);
  assertEquals("getGain()",   0.0,        (double)p.getGain(),  0.001);
  assertEquals("setGain(..)", 0x0080FF80, getOneWordFieldValue((char*)p.getPayloadPointer(), _GAIN));

  // unset Gain of CIF0
  p.setGain(FLOAT_NAN);
  int32_t len2 = p.getPayloadLength();
  assertEquals("setGain(null) CIF0 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF_bit));
  // CIF0 will not be blank for QueryAck packets (change bit is always set)
  //assertEquals("setGain(null) CIF0 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 0));
  assertEquals("setGain(null) pkt len", len0, len2);
  assertEquals("getGain1() field null", FLOAT_NAN, p.getGain1());
  assertEquals("getGain2() field null", FLOAT_NAN, p.getGain2());
  assertEquals("getGain() field null", FLOAT_NAN, p.getGain());

  // unset Gain1 of CIF0
  p.setGain1(1.0f);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setGain1(1.0) pkt len", len1, len3);
  p.setGain1(FLOAT_NAN);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setGain1(null) CIF0 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF_bit));
  // CIF0 will not be blank for QueryAck packets (change bit is always set)
  //assertEquals("setGain1(null) CIF0 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 0));
  assertEquals("setGain1(null) pkt len", len0, len4);
  assertEquals("getGain1() field null", FLOAT_NAN, p.getGain1());
  assertEquals("getGain2() field null", FLOAT_NAN, p.getGain2());
  assertEquals("getGain() field null", FLOAT_NAN, p.getGain());

  // unset Gain2 of CIF0
  p.setGain2(1.0f);
  int32_t len5 = p.getPayloadLength();
  assertEquals("setGain2(1.0) pkt len", len1, len5);
  p.setGain2(FLOAT_NAN);
  int32_t len6 = p.getPayloadLength();
  assertEquals("setGain2(null) CIF0 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF_bit));
  // CIF0 will not be blank for QueryAck packets (change bit is always set)
  //assertEquals("setGain2(null) CIF0 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 0));
  assertEquals("setGain2(null) pkt len", len0, len6);
  assertEquals("getGain1() field null", FLOAT_NAN, p.getGain1());
  assertEquals("getGain2() field null", FLOAT_NAN, p.getGain2());
  assertEquals("getGain() field null", FLOAT_NAN, p.getGain());
}

void BasicQueryAcknowledgePacketTest::testSetOverRangeCount () {
  BasicQueryAcknowledgePacket p;
  p.setOverRangeCount(__INT64_C(0));
  assertEquals("getOverRangeCount(0)",__INT64_C(0),p.getOverRangeCount());
  assertEquals("setOverRangeCount(0)",0,getOneWordFieldValue((char*)p.getPayloadPointer(), _OVER_RANGE));

  p.setOverRangeCount(__INT64_C(0xFEDCBA98));
  assertEquals("getOverRangeCount()",            __INT64_C(0xFEDCBA98), p.getOverRangeCount());
  assertEquals("setOverRangeCount(0xFEDCBA98L)", 0xFEDCBA98,  getOneWordFieldValue((char*)p.getPayloadPointer(), _OVER_RANGE));
}

void BasicQueryAcknowledgePacketTest::testSetSampleRate () {
  BasicQueryAcknowledgePacket p;
  p.setSampleRate(1.0);
  assertEquals("getSampleRate()",  1.0,                 p.getSampleRate(),0.00000095);
  assertEquals("setSampleRate(0)", __INT64_C(0x00100000), getTwoWordFieldValue((char*)p.getPayloadPointer(), _SAMPLE_RATE));

  p.setSampleRate(0.00000095);
  assertEquals("getSampleRate()",           0.00000095, p.getSampleRate(),0.00000095);
  assertEquals("setSampleRate(0.00000095)", __INT64_C(1), getTwoWordFieldValue((char*)p.getPayloadPointer(), _SAMPLE_RATE));

  p.setSampleRate(15.5);
  assertEquals("getSampleRate()",     15.5,             p.getSampleRate(),0.00000095);
  //last 5 bytes are after the radix point
  assertEquals("setSampleRate(15.5)", __INT64_C(0x00F80000), getTwoWordFieldValue((char*)p.getPayloadPointer(), _SAMPLE_RATE));

}

void BasicQueryAcknowledgePacketTest::testSetSamplePeriod () {
  BasicQueryAcknowledgePacket p;
  p.setSamplePeriod(1.0);
  assertEquals("getSamplePeriod()",    1.0,                   p.getSamplePeriod(),0.00000095);
  assertEquals("setSamplePeriod(1.0)", __INT64_C(0x00100000), getTwoWordFieldValue((char*)p.getPayloadPointer(), _SAMPLE_RATE));

  p.setSamplePeriod(1e-12);
  assertEquals("getSamplePeriod()", 1e-12, p.getSamplePeriod(),0.00000095);
  assertEquals("setSamplePeriod(1e-12)", __INT64_C(0xE8D4A5100000000), getTwoWordFieldValue((char*)p.getPayloadPointer(), _SAMPLE_RATE));
  //assertEquals("setSamplePeriod(1e-12)", __INT64_C(int64_t(1.0/1e-12)<<20), getTwoWordFieldValue((char*)p.getPayloadPointer(), _SAMPLE_RATE));

  p.setSamplePeriod(4096.0);
  assertEquals("getSamplePeriod()", 4096.0, p.getSamplePeriod(),0.00000095);
  //last 5 bytes are after the radix point
  assertEquals("setSamplePeriod(4096.0)", __INT64_C(0x00000100), getTwoWordFieldValue((char*)p.getPayloadPointer(), _SAMPLE_RATE));
}

void BasicQueryAcknowledgePacketTest::testSetTimeStampAdjustment () {
  BasicQueryAcknowledgePacket p;
  p.setTimeStampAdjustment(__INT64_C(0));
  assertEquals("getTimeStampAdjustment()",  __INT64_C(0), p.getTimeStampAdjustment());
  assertEquals("setTimeStampAdjustment(0)", __INT64_C(0), getTwoWordFieldValue((char*)p.getPayloadPointer(), _TIME_ADJUST));

  p.setTimeStampAdjustment(__INT64_C(0xFEDCBA9876543210));
  assertEquals("getTimeStampAdjustment()",            __INT64_C(0xFEDCBA9876543210), p.getTimeStampAdjustment());
  assertEquals("setTimeStampAdjustment(0xFEDCBA98L)", __INT64_C(0xFEDCBA9876543210), getTwoWordFieldValue((char*)p.getPayloadPointer(), _TIME_ADJUST));
}

void BasicQueryAcknowledgePacketTest::testSetTimeStampCalibration () {
  BasicQueryAcknowledgePacket p;
  p.setTimeStampCalibration(0);
  assertEquals("getTimeStampCalibration()",  0, p.getTimeStampCalibration());
  assertEquals("setTimeStampCalibration(0)", 0, getOneWordFieldValue((char*)p.getPayloadPointer(), _TIME_CALIB));

  p.setTimeStampCalibration(0xFEDCBA98);
  assertEquals("getTimeStampCalibration()",           0xFEDCBA98, p.getTimeStampCalibration());
  assertEquals("setTimeStampCalibration(0xFEDCBA98)", 0xFEDCBA98, getOneWordFieldValue((char*)p.getPayloadPointer(), _TIME_CALIB));
}

void BasicQueryAcknowledgePacketTest::testSetTemperature () {
  BasicQueryAcknowledgePacket p;

  p.setTemperature((float)0.0);
  assertEquals("getTemperature()",          (float)0.0, p.getTemperature());
  assertEquals("setTemperature(0)", 0x00000000, getOneWordFieldValue((char*)p.getPayloadPointer(), _TEMPERATURE));

  p.setTemperature((float)1.0);
  assertEquals("getTemperature()",          (float)1.0, p.getTemperature());
  assertEquals("setTemperature(1)", 0x00000040, getOneWordFieldValue((char*)p.getPayloadPointer(), _TEMPERATURE));

  p.setTemperature((float)0.015625);
  assertEquals("getTemperature()",          (float)0.015625, p.getTemperature());
  assertEquals("setTemperature(0.015625)", 0x00000001, getOneWordFieldValue((char*)p.getPayloadPointer(), _TEMPERATURE));

  p.setTemperature((float)-1.0);
  assertEquals("getTemperature()",          -1.0, (double)p.getTemperature(), 0.02);
  assertEquals("setTemperature(-1)", 0x0000FFC0, getOneWordFieldValue((char*)p.getPayloadPointer(), _TEMPERATURE));

  p.setTemperature((float)-0.015625);
  assertEquals("getTemperature(-0.015625)", -0.015625, (double)p.getTemperature(), 0.02);
  assertEquals("setTemperature(-0.015625)", 0x0000FFFF, getOneWordFieldValue((char*)p.getPayloadPointer(), _TEMPERATURE));

}

void BasicQueryAcknowledgePacketTest::testSetDeviceID () {
  BasicQueryAcknowledgePacket p;

  p.setDeviceID("01-23-45:FEDC");
  assertEquals("getDeviceID(12345:FEDC)", "01-23-45:FEDC",      p.getDeviceID());
  assertEquals("setDeviceID(12345:1)",     __INT64_C(0x000123450000FEDC), getTwoWordFieldValue((char*)p.getPayloadPointer(), _DEVICE_ID));

}

void BasicQueryAcknowledgePacketTest::testSetUserDefinedBits () {
  BasicQueryAcknowledgePacket p;

  p.setUserDefinedBits((char)0);
  assertEquals("getUserDefinedBits()", 0, p.getUserDefinedBits());

  p.setUserDefinedBits((char)0xAA);
  assertEquals("getUserDefinedBits()", 0xAA, p.getUserDefinedBits());

}

void BasicQueryAcknowledgePacketTest::testSetDataPayloadFormat () {
  BasicQueryAcknowledgePacket p;

  PayloadFormat pf(false,RealComplexType_Real,DataItemFormat_SignedInt,true,5,15,64,30,0xF0F0,0x0F0F);
  p.setDataPayloadFormat(pf);
  assertEquals("setDataPayloadFormat(test 1)", __INT64_C(0x80DF0FDDF0EF0F0E), getTwoWordFieldValue((char*)p.getPayloadPointer(), _DATA_FORMAT));

  PayloadFormat pf2(true,RealComplexType_ComplexPolar,DataItemFormat_UnsignedVRT6,true,4,10,63,12,1,0x10000);
  p.setDataPayloadFormat(pf2);
  assertEquals("setDataPayloadFormat(test 2)", __INT64_C(0x56CA0F8B0000FFFF), getTwoWordFieldValue((char*)p.getPayloadPointer(), _DATA_FORMAT));


}

void BasicQueryAcknowledgePacketTest::testSetGeolocation () {
  BasicQueryAcknowledgePacket p;

  Geolocation gl;
  gl.setTimeStamp(TimeStamp(IntegerMode_GPS,0xFFBACD11,__INT64_C(0xD23456789A)));
  gl.setLatitude(40.875);
  gl.setLongitude(0.0000002384185791015625);
  gl.setAltitude(-1.5);
  gl.setSpeedOverGround((double)0x7FFF + 0.0000152587890625);
  gl.setHeadingAngle(0x1FF + 0.75);
  gl.setTrackAngle(1.0);
  gl.setMagneticVariation(-0.875);

  p.setGeolocationGPS(gl);
  char* buffer = (char*)p.getPayloadPointer();
  assertEquals("setGeolocation GPS 1.01-02", __INT64_C(0x0A000000FFBACD11), VRTMath::unpackLong(buffer,getByteOffset(buffer,_GPS_EPHEM)+ 4));
  assertEquals("setGeolocation GPS 1.03-04", __INT64_C(0x000000D23456789A), VRTMath::unpackLong(buffer,getByteOffset(buffer,_GPS_EPHEM)+12));
  assertEquals("setGeolocation GPS 1.05-06", __INT64_C(0x0A38000000000001), VRTMath::unpackLong(buffer,getByteOffset(buffer,_GPS_EPHEM)+20));
  assertEquals("setGeolocation GPS 1.07-08", __INT64_C(0xFFFFFFD07FFF0001), VRTMath::unpackLong(buffer,getByteOffset(buffer,_GPS_EPHEM)+28));
  assertEquals("setGeolocation GPS 1.09-10", __INT64_C(0x7FF0000000400000), VRTMath::unpackLong(buffer,getByteOffset(buffer,_GPS_EPHEM)+36));
  assertEquals("setGeolocation GPS 1.11"   ,                    0xFFC80000, VRTMath::unpackInt (buffer,getByteOffset(buffer,_GPS_EPHEM)+44));
  assertEquals("getGeolocation GPS 1",                        gl, p.getGeolocationGPS());

  p.setGeolocationINS(gl);
  buffer = (char*)p.getPayloadPointer();
  assertEquals("setGeolocation INS 1.01-02", __INT64_C(0x0A000000FFBACD11), VRTMath::unpackLong(buffer,getByteOffset(buffer,_INS_EPHEM)+ 4));
  assertEquals("setGeolocation INS 1.03-04", __INT64_C(0x000000D23456789A), VRTMath::unpackLong(buffer,getByteOffset(buffer,_INS_EPHEM)+12));
  assertEquals("setGeolocation INS 1.05-06", __INT64_C(0x0A38000000000001), VRTMath::unpackLong(buffer,getByteOffset(buffer,_INS_EPHEM)+20));
  assertEquals("setGeolocation INS 1.07-08", __INT64_C(0xFFFFFFD07FFF0001), VRTMath::unpackLong(buffer,getByteOffset(buffer,_INS_EPHEM)+28));
  assertEquals("setGeolocation INS 1.09-10", __INT64_C(0x7FF0000000400000), VRTMath::unpackLong(buffer,getByteOffset(buffer,_INS_EPHEM)+36));
  assertEquals("setGeolocation INS 1.11"   ,                    0xFFC80000, VRTMath::unpackInt (buffer,getByteOffset(buffer,_INS_EPHEM)+44));
  assertEquals("getGeolocation INS 1",                       gl,  p.getGeolocationGPS());



}

void BasicQueryAcknowledgePacketTest::testSetEphemerisECEF () {
  BasicQueryAcknowledgePacket p;

  Ephemeris eph;
  eph.setTimeStamp(TimeStamp(IntegerMode_GPS,0xFFBACD11,__INT64_C(0xD23456789A)));
  eph.setPositionX(0.5);
  eph.setPositionY(0.03125);
  eph.setPositionZ(-0.5);
  eph.setAttitudeAlpha(0x1FF + 0.75);
  eph.setAttitudeBeta(1.0);
  eph.setAttitudePhi(-2.0);
  eph.setVelocityX(1.0);
  eph.setVelocityY(-0.5);
  eph.setVelocityZ(0x7FFE + 0.0);

  p.setEphemerisECEF(eph);
  char* buffer = (char*)p.getPayloadPointer();
  assertEquals("setEphemerisECEF 1.01-02", __INT64_C(0x0A000000FFBACD11), VRTMath::unpackLong(buffer,getByteOffset(buffer,_ECEF_EPHEM)+ 4));
  assertEquals("setEphemerisECEF 1.03-04", __INT64_C(0x000000D23456789A), VRTMath::unpackLong(buffer,getByteOffset(buffer,_ECEF_EPHEM)+12));
  assertEquals("setEphemerisECEF 1.05-06", __INT64_C(0x0000001000000001), VRTMath::unpackLong(buffer,getByteOffset(buffer,_ECEF_EPHEM)+20));
  assertEquals("setEphemerisECEF 1.07-08", __INT64_C(0xFFFFFFF07FF00000), VRTMath::unpackLong(buffer,getByteOffset(buffer,_ECEF_EPHEM)+28));
  assertEquals("setEphemerisECEF 1.09-10", __INT64_C(0x00400000FF800000), VRTMath::unpackLong(buffer,getByteOffset(buffer,_ECEF_EPHEM)+36));
  assertEquals("setEphemerisECEF 1.11-12", __INT64_C(0x00010000FFFF8000), VRTMath::unpackLong(buffer,getByteOffset(buffer,_ECEF_EPHEM)+44));
  assertEquals("setEphemerisECEF 1.13"   ,                    0x7FFE0000, VRTMath::unpackInt (buffer,getByteOffset(buffer,_ECEF_EPHEM)+52));
  assertEquals("getEphemerisECEF 1",                               eph, p.getEphemerisECEF());

  p.setEphemerisRelative(eph);
  buffer = (char*)p.getPayloadPointer();
  assertEquals("setEphemerisRelative 1.01-02", __INT64_C(0x0A000000FFBACD11), VRTMath::unpackLong(buffer,getByteOffset(buffer,_REL_EPHEM)+ 4));
  assertEquals("setEphemerisRelative 1.03-04", __INT64_C(0x000000D23456789A), VRTMath::unpackLong(buffer,getByteOffset(buffer,_REL_EPHEM)+12));
  assertEquals("setEphemerisRelative 1.05-06", __INT64_C(0x0000001000000001), VRTMath::unpackLong(buffer,getByteOffset(buffer,_REL_EPHEM)+20));
  assertEquals("setEphemerisRelative 1.07-08", __INT64_C(0xFFFFFFF07FF00000), VRTMath::unpackLong(buffer,getByteOffset(buffer,_REL_EPHEM)+28));
  assertEquals("setEphemerisRelative 1.09-10", __INT64_C(0x00400000FF800000), VRTMath::unpackLong(buffer,getByteOffset(buffer,_REL_EPHEM)+36));
  assertEquals("setEphemerisRelative 1.11-12", __INT64_C(0x00010000FFFF8000), VRTMath::unpackLong(buffer,getByteOffset(buffer,_REL_EPHEM)+44));
  assertEquals("setEphemerisRelative 1.13"   ,                    0x7FFE0000, VRTMath::unpackInt (buffer,getByteOffset(buffer,_REL_EPHEM)+52));
  assertEquals("setEphemerisRelative 1",                               eph, p.getEphemerisRelative());

}

void BasicQueryAcknowledgePacketTest::testSetEphemerisReference () {
  BasicQueryAcknowledgePacket p;
  p.setEphemerisReference(0);
  assertEquals("getEphemerisReference()",  0, p.getEphemerisReference());
  assertEquals("setEphemerisReference(0)", 0, getOneWordFieldValue((char*)p.getPayloadPointer(), _EPHEM_REF));

  p.setEphemerisReference(0x7EDCBA98);
  assertEquals("getEphemerisReference()",           0x7EDCBA98, p.getEphemerisReference());
  assertEquals("setEphemerisReference(0x7EDCBA98)", 0x7EDCBA98, getOneWordFieldValue((char*)p.getPayloadPointer(), _EPHEM_REF));
}

void BasicQueryAcknowledgePacketTest::testSetGeoSentences () {
  BasicQueryAcknowledgePacket p;

  GeoSentences gs;
  gs.setSentences("test string value");
  gs.setManufacturerIdentifier(0xFFFFFF);

  p.setGeoSentences(gs);
  char    *buffer = (char*)p.getPayloadPointer();
  int32_t  off    = getByteOffset(buffer,_GPS_ASCII)+12;
  string   exp    = "test string value";

  assertBufEquals("setGeoSentences", &exp[0], exp.length(), &buffer[off], exp.length());
  assertEquals("getGeoSentences", gs, p.getGeoSentences());
}

void BasicQueryAcknowledgePacketTest::testSetContextAssocLists () {
  BasicQueryAcknowledgePacket p;

  vector<int32_t> hdr;
  hdr.push_back(0x00040004);
  hdr.push_back(0x00148002);

  vector<int32_t> src;
  src.push_back(0);
  src.push_back(1);
  src.push_back(2);
  src.push_back(3);

  vector<int32_t> sys;
  sys.push_back(0xABCDEF01);
  sys.push_back(0x12345678);
  sys.push_back(0xFFFFFFFF);
  sys.push_back(0x0C0A0D0A);

  vector<int32_t> vec;
  vec.push_back(5);
  vec.push_back(4);
  vec.push_back(3);
  vec.push_back(2);
  vec.push_back(1);
  vec.push_back(0);
  vec.push_back(6);
  vec.push_back(7);
  vec.push_back(8);
  vec.push_back(9);
  vec.push_back(10);
  vec.push_back(11);
  vec.push_back(12);
  vec.push_back(14);
  vec.push_back(15);
  vec.push_back(16);
  vec.push_back(17);
  vec.push_back(18);
  vec.push_back(19);
  vec.push_back(10);

  vector<int32_t> asy;
  asy.push_back(0xEFEFEFEF);
  asy.push_back(0xACACACAC);

  vector<int32_t> tag;
  tag.push_back(0x01010101);
  tag.push_back(0xCACACACA);

  ContextAssocLists cal;
  cal.setSourceContext(src);
  cal.setSystemContext(sys);
  cal.setVectorComponent(vec);
  cal.setAsynchronousChannel(asy, tag);
  cal.setAsynchronousChannelTagsPresent(true);
  p.setContextAssocLists(cal);

  char* buffer = (char*)p.getPayloadPointer();
  buffer[3] = (char)(buffer[3] | 0x80);
  int32_t off = getByteOffset(buffer,_CONTEXT_ASOC)+4;

  for (size_t i = 0; i < hdr.size(); i++,off+=4) assertEquals("setContextAssocLists(..) hdr", hdr[i], VRTMath::unpackInt(buffer, off));
  for (size_t i = 0; i < src.size(); i++,off+=4) assertEquals("setContextAssocLists(..) src", src[i], VRTMath::unpackInt(buffer, off));
  for (size_t i = 0; i < sys.size(); i++,off+=4) assertEquals("setContextAssocLists(..) sys", sys[i], VRTMath::unpackInt(buffer, off));
  for (size_t i = 0; i < vec.size(); i++,off+=4) assertEquals("setContextAssocLists(..) vec", vec[i], VRTMath::unpackInt(buffer, off));
  for (size_t i = 0; i < asy.size(); i++,off+=4) assertEquals("setContextAssocLists(..) asy", asy[i], VRTMath::unpackInt(buffer, off));
  for (size_t i = 0; i < tag.size(); i++,off+=4) assertEquals("setContextAssocLists(..) tag", tag[i], VRTMath::unpackInt(buffer, off));

}

void BasicQueryAcknowledgePacketTest::testGetAdjustedTimestamp () {
}

void BasicQueryAcknowledgePacketTest::testAddCIF1 () {
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF1
  p.addCIF1();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF1()", true, p.isCIF1Enable());
  assertEquals("addCIF1()", _CIF1_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF1_ENABLE);
  assertEquals("addCIF1()", len0+4, len1);

  // add CIF1 again
  p.addCIF1();
  int32_t len2 = p.getPayloadLength();
  assertEquals("addCIF1()", true, p.isCIF1Enable());
  assertEquals("addCIF1()", _CIF1_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF1_ENABLE);
  assertEquals("addCIF1()", len1, len2);

  // remove CIF1
  p.addCIF1(false);
  int32_t len3 = p.getPayloadLength();
  assertEquals("addCIF1(false)", false, p.isCIF1Enable());
  assertEquals("addCIF1(false)", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF1_ENABLE);
  assertEquals("addCIF1()", len0, len3);

}

void BasicQueryAcknowledgePacketTest::testAddCIF2 () {
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF2
  p.addCIF2();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF2()", true, p.isCIF2Enable());
  assertEquals("addCIF2()", _CIF2_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF2_ENABLE);
  assertEquals("addCIF2()", len0+4, len1);

  // add CIF2 again
  p.addCIF2();
  int32_t len2 = p.getPayloadLength();
  assertEquals("addCIF2()", true, p.isCIF2Enable());
  assertEquals("addCIF2()", _CIF2_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF2_ENABLE);
  assertEquals("addCIF2()", len1, len2);

  // remove CIF2
  p.addCIF2(false);
  int32_t len3 = p.getPayloadLength();
  assertEquals("addCIF2(false)", false, p.isCIF2Enable());
  assertEquals("addCIF2(false)", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF2_ENABLE);
  assertEquals("addCIF2()", len0, len3);

}

void BasicQueryAcknowledgePacketTest::testAddCIF3 () {
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF3
  p.addCIF3();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF3()", true, p.isCIF3Enable());
  assertEquals("addCIF3()", _CIF3_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF3_ENABLE);
  assertEquals("addCIF3()", len0+4, len1);

  // add CIF3 again
  p.addCIF3();
  int32_t len2 = p.getPayloadLength();
  assertEquals("addCIF3()", true, p.isCIF3Enable());
  assertEquals("addCIF3()", _CIF3_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF3_ENABLE);
  assertEquals("addCIF3()", len1, len2);

  // remove CIF3
  p.addCIF3(false);
  int32_t len3 = p.getPayloadLength();
  assertEquals("addCIF3(false)", false, p.isCIF3Enable());
  assertEquals("addCIF3(false)", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF3_ENABLE);
  assertEquals("addCIF3()", len0, len3);

}

void BasicQueryAcknowledgePacketTest::testAddCIF7 () {
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF7
  p.addCIF7();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF7()", true, p.isCIF7Enable());
  assertEquals("addCIF7()", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7()", len0+4, len1);

  // add CIF7 again
  p.addCIF7();
  int32_t len2 = p.getPayloadLength();
  assertEquals("addCIF7()", true, p.isCIF7Enable());
  assertEquals("addCIF7()", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7()", len1, len2);

  // remove CIF7
  p.addCIF7(false);
  int32_t len3 = p.getPayloadLength();
  assertEquals("addCIF7(false)", false, p.isCIF7Enable());
  assertEquals("addCIF7(false)", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7()", len0, len3);

}

// Tested via the various bit getters/setters
// no need for additional tests
//void BasicQueryAcknowledgePacketTest::testSetStateEventBit () { }

// CIF1 tests

void BasicQueryAcknowledgePacketTest::testSetBufferStatus () {
  // CIF1 bit 1
  const size_t CIF = 1;
  const size_t CIF_bit = 1;

  const int64_t val1 = 0x123456780000DEF0;
  const int64_t val2 = 0x0FEDCBA900004321;
  //const int64_t mask = 0xFFFFFFFF0000FFFF;
  const int32_t size = 8;
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF1
  p.addCIF1();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getBufferStatus() field null", INT64_NULL, p.getBufferStatus());

  // set BufferStatus of CIF1
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setBufferStatus(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setBufferStatus(val1) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setBufferStatus(val1) pkt len", len1+size, len2);
  assertEquals("setBufferStatus(val1) field val1bits", val1, VRTMath::unpackLong(p.getPayloadPointer(), 8));
  assertEquals("getBufferStatus(val1) field val1", val1, p.getBufferStatus());

  // set BufferStatus of CIF1 again
  p.setBufferStatus(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setBufferStatus(val2) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setBufferStatus(val2) pkt len", len2, len3);
  assertEquals("setBufferStatus(val2) field val2bits", val2, VRTMath::unpackLong(p.getPayloadPointer(), 8));
  assertEquals("getBufferStatus(val2) field val2", val2, p.getBufferStatus());

  // unset BufferStatus of CIF1
  p.setBufferStatus(INT64_NULL);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setBufferStatus(null) CIF1 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setBufferStatus(null) CIF1 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setBufferStatus(null) pkt len", len1, len4);
  assertEquals("setBufferStatus(null) field null", INT64_NULL, p.getBufferStatus());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const int64_t cif7val1 = 0x0;
  const int64_t cif7val2 = val1;
  const int64_t cif7val3 = val2;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getBufferStatus() field null", INT64_NULL, p.getBufferStatus());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getBufferStatus(CURRENT) field null", INT64_NULL, p.getBufferStatus(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getBufferStatus(MIN) field null", INT64_NULL, p.getBufferStatus(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getBufferStatus(MAX) field null", INT64_NULL, p.getBufferStatus(MAX_VALUE));

  // set BufferStatus CURRENT_VALUE
  p.setBufferStatus(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setBufferStatus(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setBufferStatus(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setBufferStatus(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setBufferStatus(val1,CURRENT) field val1bits", cif7val1, VRTMath::unpackLong(p.getPayloadPointer(), 12));
  assertEquals("getBufferStatus(CURRENT) field val1", cif7val1, p.getBufferStatus(CURRENT_VALUE));

  // set BufferStatus MIN_VALUE
  p.setBufferStatus(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setBufferStatus(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setBufferStatus(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setBufferStatus(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setBufferStatus(val3,MIN) field val3bits", cif7val3, VRTMath::unpackLong(p.getPayloadPointer(), 12+2*size));
  assertEquals("getBufferStatus(MIN) field val3", cif7val3, p.getBufferStatus(MIN_VALUE));

  // set BufferStatus MAX_VALUE
  p.setBufferStatus(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setBufferStatus(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setBufferStatus(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setBufferStatus(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setBufferStatus(val2,MAX) field val2bits", cif7val2, VRTMath::unpackLong(p.getPayloadPointer(), 12+size));
  assertEquals("getBufferStatus(MAX) field val2", cif7val2, p.getBufferStatus(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    cif7val3,    VRTMath::unpackLong(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    cif7val2,    VRTMath::unpackLong(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getBufferStatus(MIN) field val3",     cif7val3,    p.getBufferStatus(MIN_VALUE));
  assertEquals("getBufferStatus(MAX) field val2",     cif7val2,    p.getBufferStatus(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));

}

void BasicQueryAcknowledgePacketTest::testSetBuildVersion () {
  // CIF1 bit 2
  const size_t CIF = 1;
  const size_t CIF_bit = 2;

  const int32_t val1 = 0x12345678;
  const int32_t val2 = 0x87654321;
  const int32_t mask = 0xFFFFFFFF;
  const int32_t size = 4;
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF1
  p.addCIF1();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getBuildVersion() field null", INT32_NULL, p.getBuildVersion());

  // set BuildVersion of CIF1
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setBuildVersion(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setBuildVersion(val1) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setBuildVersion(val1) pkt len", len1+size, len2);
  assertEquals("setBuildVersion(val1) field val1bits", val1&mask, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("setBuildVersion(val1) field val1", val1&mask, p.getBuildVersion());

  // set BuildVersion of CIF1 again
  p.setBuildVersion(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setBuildVersion(val2) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setBuildVersion(val2) pkt len", len2, len3);
  assertEquals("setBuildVersion(val2) field val2bits", val2&mask, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("setBuildVersion(val2) field val2", val2&mask, p.getBuildVersion());

  // unset BuildVersion of CIF1
  p.setBuildVersion(INT32_NULL);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setBuildVersion(null) CIF1 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setBuildVersion(null) CIF1 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setBuildVersion(null) pkt len", len1, len4);
  assertEquals("setBuildVersion(null) field null", INT32_NULL, p.getBuildVersion());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const int32_t cif7val1 = 0x0;
  const int32_t cif7val2 = val1;
  const int32_t cif7val3 = val2;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getBuildVersion() field null", INT32_NULL, p.getBuildVersion());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getBuildVersion(CURRENT) field null", INT32_NULL, p.getBuildVersion(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getBuildVersion(MIN) field null", INT32_NULL, p.getBuildVersion(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getBuildVersion(MAX) field null", INT32_NULL, p.getBuildVersion(MAX_VALUE));

  // set BuildVersion CURRENT_VALUE
  p.setBuildVersion(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setBuildVersion(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setBuildVersion(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setBuildVersion(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setBuildVersion(val1,CURRENT) field val1bits", cif7val1, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getBuildVersion(CURRENT) field val1", cif7val1, p.getBuildVersion(CURRENT_VALUE));

  // set BuildVersion MIN_VALUE
  p.setBuildVersion(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setBuildVersion(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setBuildVersion(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setBuildVersion(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setBuildVersion(val3,MIN) field val3bits", cif7val3, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getBuildVersion(MIN) field val3", cif7val3, p.getBuildVersion(MIN_VALUE));

  // set BuildVersion MAX_VALUE
  p.setBuildVersion(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setBuildVersion(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setBuildVersion(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setBuildVersion(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setBuildVersion(val2,MAX) field val2bits", cif7val2, VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("getBuildVersion(MAX) field val2", cif7val2, p.getBuildVersion(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    cif7val3,    VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    cif7val2,    VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getBuildVersion(MIN) field val3",     cif7val3,    p.getBuildVersion(MIN_VALUE));
  assertEquals("getBuildVersion(MAX) field val2",     cif7val2,    p.getBuildVersion(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetV49SpecVersion () {
  // CIF1 bit 3
  const size_t CIF = 1;
  const size_t CIF_bit = 3;

  const int32_t val1 = 0x00000003;
  const int32_t val2 = 0x00000004;
  const int32_t mask = 0xFFFFFFFF;
  const int32_t size = 4;
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF1
  p.addCIF1();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getV49SpecVersion() field null", INT32_NULL, p.getV49SpecVersion());

  // set V49SpecVersion of CIF1
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setV49SpecVersion(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setV49SpecVersion(val1) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setV49SpecVersion(val1) pkt len", len1+size, len2);
  assertEquals("setV49SpecVersion(val1) field val1bits", val1, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("setV49SpecVersion(val1) field val1", val1&mask, p.getV49SpecVersion());

  // set V49SpecVersion of CIF1 again
  p.setV49SpecVersion(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setV49SpecVersion(val2) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setV49SpecVersion(val2) pkt len", len2, len3);
  assertEquals("setV49SpecVersion(val2) field val2bits", val2, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("setV49SpecVersion(val2) field val2", val2&mask, p.getV49SpecVersion());

  // unset V49SpecVersion of CIF1
  p.setV49SpecVersion(INT32_NULL);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setV49SpecVersion(null) CIF1 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setV49SpecVersion(null) CIF1 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setV49SpecVersion(null) pkt len", len1, len4);
  assertEquals("setV49SpecVersion(null) field null", INT32_NULL, p.getV49SpecVersion());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const int32_t cif7val1 = 0x0;
  const int32_t cif7val2 = val1;
  const int32_t cif7val3 = val2;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getV49SpecVersion() field null", INT32_NULL, p.getV49SpecVersion());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getV49SpecVersion(CURRENT) field null", INT32_NULL, p.getV49SpecVersion(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getV49SpecVersion(MIN) field null", INT32_NULL, p.getV49SpecVersion(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getV49SpecVersion(MAX) field null", INT32_NULL, p.getV49SpecVersion(MAX_VALUE));

  // set V49SpecVersion CURRENT_VALUE
  p.setV49SpecVersion(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setV49SpecVersion(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setV49SpecVersion(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setV49SpecVersion(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setV49SpecVersion(val1,CURRENT) field val1bits", cif7val1, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getV49SpecVersion(CURRENT) field val1", cif7val1, p.getV49SpecVersion(CURRENT_VALUE));

  // set V49SpecVersion MIN_VALUE
  p.setV49SpecVersion(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setV49SpecVersion(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setV49SpecVersion(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setV49SpecVersion(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setV49SpecVersion(val3,MIN) field val3bits", cif7val3, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getV49SpecVersion(MIN) field val3", cif7val3, p.getV49SpecVersion(MIN_VALUE));

  // set V49SpecVersion MAX_VALUE
  p.setV49SpecVersion(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setV49SpecVersion(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setV49SpecVersion(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setV49SpecVersion(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setV49SpecVersion(val2,MAX) field val2bits", cif7val2, VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("getV49SpecVersion(MAX) field val2", cif7val2, p.getV49SpecVersion(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    cif7val3,    VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    cif7val2,    VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getV49SpecVersion(MIN) field val3",     cif7val3,    p.getV49SpecVersion(MIN_VALUE));
  assertEquals("getV49SpecVersion(MAX) field val2",     cif7val2,    p.getV49SpecVersion(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetHealthStatus () {
  // CIF1 bit 4
  const size_t CIF = 1;
  const size_t CIF_bit = 4;

  const int16_t val1 = 0x1234;
  const int16_t val2 = 0x4321;
  const int32_t mask = 0x0000FFFF;
  const int32_t size = 4;
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF1 for Health Status
  p.addCIF1();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getHealthStatus() field null", INT16_NULL, p.getHealthStatus());

  // set Health Status of CIF1
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setHealthStatus(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setHealthStatus(val1) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setHealthStatus(val1) pkt len", len1+size, len2);
  assertEquals("setHealthStatus(val1) field val1bits16", val1, VRTMath::unpackShort(p.getPayloadPointer(), 8 + 2));
  assertEquals("setHealthStatus(val1) field val1bits32", (int32_t) (val1&mask), VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("setHealthStatus(val1) field val1", val1, p.getHealthStatus());

  // set Health Status of CIF1 again
  p.setHealthStatus(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setHealthStatus(val2) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setHealthStatus(val2) pkt len", len2, len3);
  assertEquals("setHealthStatus(val2) field val2bits16", val2, VRTMath::unpackShort(p.getPayloadPointer(), 8 + 2));
  assertEquals("setHealthStatus(val2) field val2bits32", (int32_t) (val2&mask), VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("setHealthStatus(val2) field val2", val2, p.getHealthStatus());

  // unset Health Status of CIF1
  p.setHealthStatus(INT16_NULL);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setHealthStatus(null) CIF1 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setHealthStatus(null) CIF1 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setHealthStatus(null) pkt len", len1, len4);
  assertEquals("setHealthStatus(null) field null", INT16_NULL, p.getHealthStatus());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const int16_t cif7val1 = 0x0;
  const int16_t cif7val2 = val1;
  const int16_t cif7val3 = val2;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getHealthStatus() field null", INT16_NULL, p.getHealthStatus());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getHealthStatus(CURRENT) field null", INT16_NULL, p.getHealthStatus(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getHealthStatus(MIN) field null", INT16_NULL, p.getHealthStatus(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getHealthStatus(MAX) field null", INT16_NULL, p.getHealthStatus(MAX_VALUE));

  // set HealthStatus CURRENT_VALUE
  p.setHealthStatus(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setHealthStatus(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setHealthStatus(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setHealthStatus(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setHealthStatus(val1,CURRENT) field val1bits", (int32_t)cif7val1&mask, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getHealthStatus(CURRENT) field val1", cif7val1, p.getHealthStatus(CURRENT_VALUE));

  // set HealthStatus MIN_VALUE
  p.setHealthStatus(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setHealthStatus(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setHealthStatus(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setHealthStatus(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setHealthStatus(val3,MIN) field val3bits", (int32_t)mask&cif7val3, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getHealthStatus(MIN) field val3", cif7val3, p.getHealthStatus(MIN_VALUE));

  // set HealthStatus MAX_VALUE
  p.setHealthStatus(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setHealthStatus(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setHealthStatus(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setHealthStatus(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setHealthStatus(val2,MAX) field val2bits", (int32_t)mask&cif7val2, VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("getHealthStatus(MAX) field val2", cif7val2, p.getHealthStatus(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    (int32_t)mask&cif7val3,    VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    (int32_t)mask&cif7val2,    VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getHealthStatus(MIN) field val3",     cif7val3,    p.getHealthStatus(MIN_VALUE));
  assertEquals("getHealthStatus(MAX) field val2",     cif7val2,    p.getHealthStatus(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetDiscreteIO64 () {
  // CIF1 bit 5
  const size_t CIF = 1;
  const size_t CIF_bit = 5;

  const int64_t val1 = 0x123456789ABCDEF0;
  const int64_t val2 = 0x0FEDCBA987654321;
  const int64_t mask = 0xFFFFFFFFFFFFFFFF;
  const int32_t size = 8;
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF1
  p.addCIF1();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getDiscreteIO64() field null", INT64_NULL, p.getDiscreteIO64());

  // set DiscreteIO64 of CIF1
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setDiscreteIO64(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setDiscreteIO64(val1) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setDiscreteIO64(val1) pkt len", len1+size, len2);
  assertEquals("setDiscreteIO64(val1) field val1bits", val1&mask, VRTMath::unpackLong(p.getPayloadPointer(), 8));
  assertEquals("getDiscreteIO64(val1) field val1", val1&mask, p.getDiscreteIO64());

  // set DiscreteIO64 of CIF1 again
  p.setDiscreteIO64(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setDiscreteIO64(val2) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setDiscreteIO64(val2) pkt len", len2, len3);
  assertEquals("setDiscreteIO64(val2) field val2bits", val2&mask, VRTMath::unpackLong(p.getPayloadPointer(), 8));
  assertEquals("getDiscreteIO64(val2) field val2", val2&mask, p.getDiscreteIO64());

  // unset DiscreteIO64 of CIF1
  p.setDiscreteIO64(INT64_NULL);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setDiscreteIO64(null) CIF1 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setDiscreteIO64(null) CIF1 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setDiscreteIO64(null) pkt len", len1, len4);
  assertEquals("setDiscreteIO64(null) field null", INT64_NULL, p.getDiscreteIO64());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const int64_t cif7val1 = 0x0;
  const int64_t cif7val2 = val1;
  const int64_t cif7val3 = val2;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getDiscreteIO64() field null", INT64_NULL, p.getDiscreteIO64());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getDiscreteIO64(CURRENT) field null", INT64_NULL, p.getDiscreteIO64(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getDiscreteIO64(MIN) field null", INT64_NULL, p.getDiscreteIO64(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getDiscreteIO64(MAX) field null", INT64_NULL, p.getDiscreteIO64(MAX_VALUE));

  // set DiscreteIO64 CURRENT_VALUE
  p.setDiscreteIO64(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setDiscreteIO64(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setDiscreteIO64(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setDiscreteIO64(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setDiscreteIO64(val1,CURRENT) field val1bits", cif7val1, VRTMath::unpackLong(p.getPayloadPointer(), 12));
  assertEquals("getDiscreteIO64(CURRENT) field val1", cif7val1, p.getDiscreteIO64(CURRENT_VALUE));

  // set DiscreteIO64 MIN_VALUE
  p.setDiscreteIO64(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setDiscreteIO64(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setDiscreteIO64(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setDiscreteIO64(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setDiscreteIO64(val3,MIN) field val3bits", cif7val3, VRTMath::unpackLong(p.getPayloadPointer(), 12+2*size));
  assertEquals("getDiscreteIO64(MIN) field val3", cif7val3, p.getDiscreteIO64(MIN_VALUE));

  // set DiscreteIO64 MAX_VALUE
  p.setDiscreteIO64(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setDiscreteIO64(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setDiscreteIO64(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setDiscreteIO64(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setDiscreteIO64(val2,MAX) field val2bits", cif7val2, VRTMath::unpackLong(p.getPayloadPointer(), 12+size));
  assertEquals("getDiscreteIO64(MAX) field val2", cif7val2, p.getDiscreteIO64(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    cif7val3,    VRTMath::unpackLong(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    cif7val2,    VRTMath::unpackLong(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getDiscreteIO64(MIN) field val3",     cif7val3,    p.getDiscreteIO64(MIN_VALUE));
  assertEquals("getDiscreteIO64(MAX) field val2",     cif7val2,    p.getDiscreteIO64(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetDiscreteIO32 () {
  // CIF1 bit 6
  const size_t CIF = 1;
  const size_t CIF_bit = 6;

  const int32_t val1 = 0x12345678;
  const int32_t val2 = 0x87654321;
  const int32_t mask = 0xFFFFFFFF;
  const int32_t size = 4;
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF1
  p.addCIF1();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getDiscreteIO32() field null", INT32_NULL, p.getDiscreteIO32());

  // set DiscreteIO32 of CIF1
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setDiscreteIO32(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setDiscreteIO32(val1) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setDiscreteIO32(val1) pkt len", len1+size, len2);
  assertEquals("setDiscreteIO32(val1) field val1bits", val1&mask, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("setDiscreteIO32(val1) field val1", val1&mask, p.getDiscreteIO32());

  // set DiscreteIO32 of CIF1 again
  p.setDiscreteIO32(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setDiscreteIO32(val2) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setDiscreteIO32(val2) pkt len", len2, len3);
  assertEquals("setDiscreteIO32(val2) field val2bits", val2&mask, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("setDiscreteIO32(val2) field val2", val2&mask, p.getDiscreteIO32());

  // unset DiscreteIO32 of CIF1
  p.setDiscreteIO32(INT32_NULL);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setDiscreteIO32(null) CIF1 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setDiscreteIO32(null) CIF1 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setDiscreteIO32(null) pkt len", len1, len4);
  assertEquals("setDiscreteIO32(null) field null", INT32_NULL, p.getDiscreteIO32());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const int32_t cif7val1 = 0x0;
  const int32_t cif7val2 = val1;
  const int32_t cif7val3 = val2;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getDiscreteIO32() field null", INT32_NULL, p.getDiscreteIO32());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getDiscreteIO32(CURRENT) field null", INT32_NULL, p.getDiscreteIO32(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getDiscreteIO32(MIN) field null", INT32_NULL, p.getDiscreteIO32(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getDiscreteIO32(MAX) field null", INT32_NULL, p.getDiscreteIO32(MAX_VALUE));

  // set DiscreteIO32 CURRENT_VALUE
  p.setDiscreteIO32(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setDiscreteIO32(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setDiscreteIO32(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setDiscreteIO32(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setDiscreteIO32(val1,CURRENT) field val1bits", cif7val1, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getDiscreteIO32(CURRENT) field val1", cif7val1, p.getDiscreteIO32(CURRENT_VALUE));

  // set DiscreteIO32 MIN_VALUE
  p.setDiscreteIO32(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setDiscreteIO32(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setDiscreteIO32(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setDiscreteIO32(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setDiscreteIO32(val3,MIN) field val3bits", cif7val3, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getDiscreteIO32(MIN) field val3", cif7val3, p.getDiscreteIO32(MIN_VALUE));

  // set DiscreteIO32 MAX_VALUE
  p.setDiscreteIO32(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setDiscreteIO32(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setDiscreteIO32(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setDiscreteIO32(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setDiscreteIO32(val2,MAX) field val2bits", cif7val2, VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("getDiscreteIO32(MAX) field val2", cif7val2, p.getDiscreteIO32(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    cif7val3,    VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    cif7val2,    VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getDiscreteIO32(MIN) field val3",     cif7val3,    p.getDiscreteIO32(MIN_VALUE));
  assertEquals("getDiscreteIO32(MAX) field val2",     cif7val2,    p.getDiscreteIO32(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetDiscreteIO32CallOrder () {
  // CIF1 bit 6
  const size_t CIF_a = 1;
  const size_t CIF_bit_a = 6;
  const size_t CIF_b = 2;
  const size_t CIF_bit_b = 9;

  const int32_t val1_a = 0x12345678;
  const int32_t val2_a = 0x87654321;
  const int32_t mask_a = 0xFFFFFFFF;
  const int32_t size_a = 4;
  const int16_t val1_b = 0x1234;
  const int16_t val2_b = 0x8765;
  const int32_t mask_b = 0x0000FFFF;
  const int32_t size_b = 4;

  BasicQueryAcknowledgePacket p1;
  int32_t len0a = p1.getPayloadLength();

  // add CIF1
  p1.addCIF1();
  int32_t len1a = p1.getPayloadLength();
  //Utilities::dumpBytes(p1.getPayloadPointer(), len1a);
  assertEquals("1addCIF1() CIF0 bit", (0x1<<CIF_a), VRTMath::unpackInt(p1.getPayloadPointer(), 0) & (0x1<<CIF_a));
  assertEquals("1addCIF1() pkt len", len0a+4, len1a);
  assertEquals("1addCIF1() init 0", 0x0, VRTMath::unpackInt(p1.getPayloadPointer(), 4));
  assertEquals("1getDiscreteIO32() field null", INT32_NULL, p1.getDiscreteIO32());
  assertEquals("1getFunctionID() field null", INT16_NULL, p1.getFunctionID());

  // add CIF2
  p1.addCIF2();
  int32_t len2a = p1.getPayloadLength();
  //Utilities::dumpBytes(p1.getPayloadPointer(), len2a);
  assertEquals("1addCIF2() CIF0 bit", (0x1<<CIF_b), VRTMath::unpackInt(p1.getPayloadPointer(), 0) & (0x1<<CIF_b));
  assertEquals("1addCIF2() pkt len", len1a+4, len2a);
  assertEquals("1addCIF2() init 0", 0x0, VRTMath::unpackInt(p1.getPayloadPointer(), 8));
  assertEquals("1getDiscreteIO32()b field null", INT32_NULL, p1.getDiscreteIO32());
  assertEquals("1getFunctionID()b field null", INT16_NULL, p1.getFunctionID());

  p1.setDiscreteIO32(val1_a);
  //int32_t len3a = p1.getPayloadLength();
  //Utilities::dumpBytes(p1.getPayloadPointer(), len3a);
  p1.setFunctionID(val1_b);
  int32_t len4a = p1.getPayloadLength();
  //Utilities::dumpBytes(p1.getPayloadPointer(), len4a);
  assertEquals("1set DiscreteIO32 then FunctionID pkt len", len2a+size_a+size_b, len4a);
  assertEquals("1setDiscreteIO32(val1_a) CIF1 bit", 0x1<<CIF_bit_a, VRTMath::unpackInt(p1.getPayloadPointer(), 4) & (0x1<<CIF_bit_a));
  assertEquals("1setDiscreteIO32(val1_a) field val1abits", val1_a&mask_a, VRTMath::unpackInt(p1.getPayloadPointer(), 12));
  assertEquals("1setDiscreteIO32(val1_a) field val1_a", val1_a&mask_a, p1.getDiscreteIO32());
  assertEquals("1setFunctionID(val1_b) CIF2 bit", 0x1<<CIF_bit_b, VRTMath::unpackInt(p1.getPayloadPointer(), 8) & (0x1<<CIF_bit_b));
  assertEquals("1setFunctionID(val1_b) field val1bbits", val1_b&mask_b, VRTMath::unpackInt(p1.getPayloadPointer(), 16));
  assertEquals("1setFunctionID(val1_b) field val1_b", int16_t(val1_b&mask_b), p1.getFunctionID());

  // Same thing in reverse order
  BasicQueryAcknowledgePacket p2;
  int32_t len0b = p2.getPayloadLength();

  // add CIF1
  p2.addCIF1();
  int32_t len1b = p2.getPayloadLength();
  //Utilities::dumpBytes(p2.getPayloadPointer(), len1b);
  assertEquals("2addCIF1() CIF0 bit", (0x1<<CIF_a), VRTMath::unpackInt(p2.getPayloadPointer(), 0) & (0x1<<CIF_a));
  assertEquals("2addCIF1() pkt len", len0b+4, len1b);
  assertEquals("2addCIF1() init 0", 0x0, VRTMath::unpackInt(p2.getPayloadPointer(), 4));
  assertEquals("2getDiscreteIO32() field null", INT32_NULL, p2.getDiscreteIO32());
  assertEquals("2getFunctionID() field null", INT16_NULL, p2.getFunctionID());

  // add CIF2
  p2.addCIF2();
  int32_t len2b = p2.getPayloadLength();
  //Utilities::dumpBytes(p2.getPayloadPointer(), len2b);
  assertEquals("2addCIF2() CIF0 bit", (0x1<<CIF_b), VRTMath::unpackInt(p2.getPayloadPointer(), 0) & (0x1<<CIF_b));
  assertEquals("2addCIF2() pkt len", len1b+4, len2b);
  assertEquals("2addCIF2() init 0", 0x0, VRTMath::unpackInt(p2.getPayloadPointer(), 8));
  assertEquals("2getDiscreteIO32()b field null", INT32_NULL, p2.getDiscreteIO32());
  assertEquals("2getFunctionID()b field null", INT16_NULL, p2.getFunctionID());

  p2.setFunctionID(val2_b);
  //int32_t len3b = p2.getPayloadLength();
  //Utilities::dumpBytes(p2.getPayloadPointer(), len3b);
  p2.setDiscreteIO32(val2_a);
  int32_t len4b = p2.getPayloadLength();
  //Utilities::dumpBytes(p2.getPayloadPointer(), len4b);
  assertEquals("2set DiscreteIO32 then FunctionID pkt len", len2b+size_a+size_b, len4b);
  assertEquals("2setDiscreteIO32(val2_a) CIF1 bit", 0x1<<CIF_bit_a, VRTMath::unpackInt(p2.getPayloadPointer(), 4) & (0x1<<CIF_bit_a));
  assertEquals("2setDiscreteIO32(val2_a) field val2abits", val2_a&mask_a, VRTMath::unpackInt(p2.getPayloadPointer(), 12));
  assertEquals("2setDiscreteIO32(val2_a) field val2_a", val2_a&mask_a, p2.getDiscreteIO32());
  assertEquals("2setFunctionID(val2_b) CIF2 bit", 0x1<<CIF_bit_b, VRTMath::unpackInt(p2.getPayloadPointer(), 8) & (0x1<<CIF_bit_b));
  assertEquals("2setFunctionID(val2_b) field val2bbits", val2_b&mask_b, VRTMath::unpackInt(p2.getPayloadPointer(), 16));
  assertEquals("2setFunctionID(val2_b) field val2_b", int16_t(val2_b&mask_b), p2.getFunctionID());
}

void BasicQueryAcknowledgePacketTest::testSetIndexList () {
  // CIF1 Bit7
  // Section 9.3.2
  // IndexFieldList format
  const size_t CIF = 1;
  const size_t CIF_bit = 7;

  IndexFieldList val1;
  vector<int32_t> entries1;// = {0,5,10,15,20,25};
  entries1.push_back(0);
  entries1.push_back(5);
  entries1.push_back(10);
  entries1.push_back(15);
  entries1.push_back(20);
  entries1.push_back(25);
  val1.setIndexEntries(entries1, 1);
  const int32_t val1size = 4*4;

  IndexFieldList val2;
  val2.setIndexEntries(entries1);
  const int32_t val2size = 8*4;

  IndexFieldList val3;
  vector<int16_t> entries3;// = {0,5,10,15,20,25};
  entries3.push_back(0);
  entries3.push_back(5);
  entries3.push_back(10);
  entries3.push_back(15);
  entries3.push_back(20);
  entries3.push_back(25);
  val3.setIndexEntries(entries3);
  const int32_t val3size = 5*4;

  const IndexFieldList nullval;

  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF1 for IndexList
  p.addCIF1();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getIndexList() field null", nullval, p.getIndexList());

  // set IndexList of CIF1
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setIndexList(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setIndexList(val1) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setIndexList(val1) pkt len", len1+val1size, len2);
  assertEquals("setIndexList(val1) field val1bits1", 0x00000004, VRTMath::unpackInt(p.getPayloadPointer(),  8));  // total size in words
  assertEquals("setIndexList(val1) field val1bits2", 0x10000006, VRTMath::unpackInt(p.getPayloadPointer(),  12)); // entry size and num entries
  assertEquals("setIndexList(val1) field val1bits3", 0x00050A0F, VRTMath::unpackInt(p.getPayloadPointer(), 16)); // entries 1-4
  assertEquals("setIndexList(val1) field val1bits4", 0x14190000, VRTMath::unpackInt(p.getPayloadPointer(), 20)); // entries 5-6
  assertEquals("getIndexList(val1) field val1", val1, p.getIndexList());

  // set IndexList of CIF1 again
  p.setIndexList(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setIndexList(val2) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setIndexList(val2) pkt len", len1+val2size, len3);
  assertEquals("getIndexList(val2) field val2", val2, p.getIndexList());

  // set IndexList of CIF1 again
  p.setIndexList(val3);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setIndexList(val3) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setIndexList(val3) pkt len", len1+val3size, len4);
  assertEquals("getIndexList(val3) field val3", val3, p.getIndexList());

  // unset IndexList of CIF1
  p.setIndexList(nullval);
  int32_t len5 = p.getPayloadLength();
  assertEquals("setIndexList(null) CIF1 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setIndexList(null) CIF1 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setIndexList(null) pkt len", len1, len5);
  assertEquals("setIndexList(null) field null", nullval, p.getIndexList());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  IndexFieldList cif7val1 = val1;

  IndexFieldList cif7val2;
  vector<int32_t> cif7entries2;
  cif7entries2.push_back(1);
  cif7entries2.push_back(6);
  cif7entries2.push_back(11);
  cif7entries2.push_back(16);
  cif7entries2.push_back(21);
  cif7entries2.push_back(26);
  cif7val2.setIndexEntries(cif7entries2, 1);

  IndexFieldList cif7val3;
  vector<int32_t> cif7entries3;
  cif7entries3.push_back(3);
  cif7entries3.push_back(4);
  cif7entries3.push_back(5);
  cif7entries3.push_back(6);
  cif7entries3.push_back(7);
  cif7entries3.push_back(8);
  cif7val3.setIndexEntries(cif7entries3, 1);
  const int32_t size = val1size;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getIndexList() field null", nullval, p.getIndexList());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getIndexList(CURRENT) field null", nullval, p.getIndexList(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getIndexList(MIN) field null", nullval, p.getIndexList(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getIndexList(MAX) field null", nullval, p.getIndexList(MAX_VALUE));

  // set IndexList CURRENT_VALUE
  p.setIndexList(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setIndexList(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setIndexList(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setIndexList(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  //assertEquals("setIndexList(val1,CURRENT) field val1bits", cif7val1, VRTMath::unpackUUID(p.getPayloadPointer(), 12));
  IndexFieldList tmp1;
  VRTMath::unpackRecord(p.getPayload(), 12, tmp1);
  assertEquals("setIndexList(val1,CURRENT) field val1bits", cif7val1, tmp1);
  assertEquals("getIndexList(CURRENT) field val1", cif7val1, p.getIndexList(CURRENT_VALUE));

  // set IndexList MIN_VALUE
  p.setIndexList(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setIndexList(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setIndexList(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setIndexList(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  //assertEquals("setIndexList(val3,MIN) field val3bits", cif7val3, VRTMath::unpackUUID(p.getPayloadPointer(), 12+2*size));
  IndexFieldList tmp2;
  VRTMath::unpackRecord(p.getPayload(), 12+2*size, tmp2);
  assertEquals("setIndexList(val3,MIN) field val3bits", cif7val3, tmp2);
  assertEquals("getIndexList(MIN) field val3", cif7val3, p.getIndexList(MIN_VALUE));

  // set IndexList MAX_VALUE
  p.setIndexList(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setIndexList(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setIndexList(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setIndexList(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  //assertEquals("setIndexList(val2,MAX) field val2bits", cif7val2, VRTMath::unpackUUID(p.getPayloadPointer(), 12+size));
  IndexFieldList tmp3;
  VRTMath::unpackRecord(p.getPayload(), 12+size, tmp3);
  assertEquals("setIndexList(val2,MAX) field val2bits", cif7val2, tmp3);
  assertEquals("getIndexList(MAX) field val2", cif7val2, p.getIndexList(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  //assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    cif7val3,    VRTMath::unpackUUID(p.getPayloadPointer(), 12+size));
  IndexFieldList tmp4;
  VRTMath::unpackRecord(p.getPayload(), 12+size, tmp4);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits", cif7val3, tmp4);
  //assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    cif7val2,    VRTMath::unpackUUID(p.getPayloadPointer(), 12));
  IndexFieldList tmp5;
  VRTMath::unpackRecord(p.getPayload(), 12, tmp5);
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits", cif7val2, tmp5);
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getIndexList(MIN) field val3",     cif7val3,    p.getIndexList(MIN_VALUE));
  assertEquals("getIndexList(MAX) field val2",     cif7val2,    p.getIndexList(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetSectorScanStep () {
  // CIF 1 bit 9 (9.6.2)
  // ArrayOfRecords format
  // HeaderSize = 0 (no application specific header)
  // NumWords/Record is variable
  //   - defined by bitmapped CIF subfield
  //   - minimum of 3 words required, others are optional
  // Bitmapped CIF subfield defines record contents
  //   - Bit 31 - Sector Number - 1 word (required)
  //   - Bit 30 - F1 Start Freq - 2 words (required)
  //   - Bit 29 - F2 Stop Freq - 2 words (optional, though required if defining a scan sector)
  //   - Bit 28 - Resolution bandwidth - 2 words (optional)
  //   - Bit 27 - Tune step size - 2 words (optional)
  //   - Bit 26 - Number of points - 1 word (optional)
  //   - Bit 25 - Default Gain - 1 word (optional)
  //   - Bit 24 - Threshold - 1 word (optional)
  //   - Bit 23 - Dwell Time - 1 word (optional)
  //   - Bit 22 - Start Time - 1 word (optional)
  //   - Bit 21 - Time 3 - 1 word (optional)
  //   - Bit 20 - Time 4 - 1 word (optional)
  //   - Bit 19..0 - reserved
  // App-Specific header is absent
  // Each Record is variable, as defined by bitmapped CIF subfield
  const size_t CIF = 1;
  const size_t CIF_bit = 9;

  // create array of records with the following:
  //   Sector Number (bit31, 1 word)
  //   F1 Start Freq (bit30, 2 words)
  //   F2 Stop Freq (bit29, 2 words)
  const int32_t recSize1 = 5;
  ArrayOfRecords val1;
  val1.setRecordSize(recSize1);
  const int32_t bitMappedInd1 = 0xE0000000;
  val1.setBitMappedIndicator(bitMappedInd1);
  //val1.setApplicationSpecificHeader(...); // not used
  char buf1[recSize1*4] = {0x00, 0x00, 0x00, 0x01, // Sector Index 1
                           0x00, 0x00, 0x01, 0x00, // F1 Start Freq 1048576.0 Hz
                           0x00, 0x00, 0x00, 0x00,
                           0x00, 0x00, 0x02, 0x00, // F2 Stop Freq 2097152.0 Hz
                           0x00, 0x00, 0x00, 0x00
                          };
  Record rec1(recSize1*4);
  rec1.writeBytes((void*) &buf1);
  assertEquals("SectorScanStep(val1) recSize1", recSize1*4, rec1.getByteLength());
  assertEquals("SectorScanStep(val1) addRec1", true, val1.addRecord(rec1));
  char buf2[recSize1*4] = {0x00, 0x00, 0x00, 0x02, // Sector Index 2
                           0x00, 0x00, 0x02, 0x00, // F1 Start Freq 2097152.0 Hz
                           0x00, 0x00, 0x00, 0x00,
                           0x00, 0x00, 0x04, 0x00, // F2 Stop Freq 4194304.0 Hz
                           0x00, 0x00, 0x00, 0x00
                          };
  Record rec2(recSize1*4);
  rec2.writeBytes((void*) &buf2);
  assertEquals("SectorScanStep(val1) addRec2", true, val1.addRecord(rec2));
  const int32_t val1size = (3 + 0 + 2*recSize1)*4;
  assertEquals("SectorScanStep(val1) val1size", val1size, val1.getTotalFieldSize()*4);

  // create array of records with the following:
  //   Sector Number (bit31, 1 word)
  //   F1 Start Freq (bit30, 2 words)
  const int32_t recSize2 = 3;
  ArrayOfRecords val2;
  val2.setRecordSize(recSize2);
  const int32_t bitMappedInd2 = 0xC0000000;
  val2.setBitMappedIndicator(bitMappedInd2);
  //val2.setApplicationSpecificHeader(...); // not used
  char buf3[recSize2*4] = {0x00, 0x00, 0x00, 0x0A, // Sector Index 10
                           0x00, 0x00, 0x00, 0x00, // F1 Start Freq 1.0 Hz
                           0x00, 0x01, 0x00, 0x00,
                          };
  Record rec3(recSize2*4);
  rec3.writeBytes((void*) &buf3);
  assertEquals("SectorScanStep(val2) addRec3", true, val2.addRecord(rec3));
  char buf4[recSize2*4] = {0x00, 0x00, 0x00, 0x0B, // Sector Index 11
                           0x00, 0x00, 0x00, 0x00, // F1 Start Freq 1.5 Hz
                           0x00, 0x01, 0x10, 0x00,
                          };
  Record rec4(recSize2*4);
  rec4.writeBytes((void*) &buf4);
  assertEquals("SectorScanStep(val2) addRec4", true, val2.addRecord(rec4));
  const int32_t val2size = (3 + 0 + 2*recSize2)*4;
  assertEquals("SectorScanStep(val2) val2size", val2size, val2.getTotalFieldSize()*4);

  const ArrayOfRecords nullval;

  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF1 for SectorScanStep
  p.addCIF1();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getSectorScanStep() field null", nullval, p.getSectorScanStep());

  // set SectorScanStep of CIF1
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setSectorScanStep(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setSectorScanStep(val1) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSectorScanStep(val1) pkt len", len1+val1size, len2);
  assertEquals("setSectorScanStep(val1) field val1bits1", 0x0000000D, VRTMath::unpackInt(p.getPayloadPointer(),  8));  // size of array
  assertEquals("setSectorScanStep(val1) field val1bits2", 0x00005002, VRTMath::unpackInt(p.getPayloadPointer(),  12)); // array header 1
  assertEquals("setSectorScanStep(val1) field val1bits3", bitMappedInd1, VRTMath::unpackInt(p.getPayloadPointer(),  16)); // array header 2
  assertEquals("setSectorScanStep(val1) field val1rec1a", 0x00000001, VRTMath::unpackInt(p.getPayloadPointer(),  20)); // rec1 sector index
  assertEquals("setSectorScanStep(val1) field val1rec1b", (int64_t)0x0000010000000000, VRTMath::unpackLong(p.getPayloadPointer(), 24)); // rec1
  assertEquals("setSectorScanStep(val1) field val1rec1c", (int64_t)0x0000020000000000, VRTMath::unpackLong(p.getPayloadPointer(), 32)); // rec1
  assertEquals("setSectorScanStep(val1) field val1rec2a", 0x00000002, VRTMath::unpackInt(p.getPayloadPointer(),  40)); // rec2 index
  assertEquals("setSectorScanStep(val1) field val1rec2b", (int64_t)0x0000020000000000, VRTMath::unpackLong(p.getPayloadPointer(), 44)); // rec2
  assertEquals("setSectorScanStep(val1) field val1rec2c", (int64_t)0x0000040000000000, VRTMath::unpackLong(p.getPayloadPointer(), 52)); // rec2
  assertEquals("getSectorScanStep(val1) field val1", val1, p.getSectorScanStep());

  // set SectorScanStep of CIF1 again
  p.setSectorScanStep(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setSectorScanStep(val2) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSectorScanStep(val2) pkt len", len1+val2size, len3);
  assertEquals("getSectorScanStep(val2) field val2", val2, p.getSectorScanStep());

  // unset SectorScanStep of CIF1
  p.setSectorScanStep(nullval);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setSectorScanStep(null) CIF1 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSectorScanStep(null) CIF1 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setSectorScanStep(null) pkt len", len1, len4);
  assertEquals("setSectorScanStep(null) field null", nullval, p.getSectorScanStep());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  ArrayOfRecords cif7val1 = val1;

  ArrayOfRecords cif7val2;
  cif7val2.setRecordSize(recSize1);
  assertEquals("SectorScanStep(cif7val2) addRec2", true, cif7val2.addRecord(rec2));
  assertEquals("SectorScanStep(cif7val2) addRec1", true, cif7val2.addRecord(rec1));

  ArrayOfRecords cif7val3;
  cif7val3.setRecordSize(recSize1);
  assertEquals("SectorScanStep(cif7val3) addRec2", true, cif7val3.addRecord(rec2));
  assertEquals("SectorScanStep(cif7val3)b addRec2", true, cif7val3.addRecord(rec2));

  const int32_t size = val1size;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getSectorScanStep() field null", nullval, p.getSectorScanStep());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getSectorScanStep(CURRENT) field null", nullval, p.getSectorScanStep(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getSectorScanStep(MIN) field null", nullval, p.getSectorScanStep(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getSectorScanStep(MAX) field null", nullval, p.getSectorScanStep(MAX_VALUE));

  // set SectorScanStep CURRENT_VALUE
  p.setSectorScanStep(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setSectorScanStep(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setSectorScanStep(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSectorScanStep(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  //assertEquals("setSectorScanStep(val1,CURRENT) field val1bits", cif7val1, VRTMath::unpackUUID(p.getPayloadPointer(), 12));
  ArrayOfRecords tmp1;
  VRTMath::unpackRecord(p.getPayload(), 12, tmp1);
  assertEquals("setSectorScanStep(val1,CURRENT) field val1bits", cif7val1, tmp1);
  assertEquals("getSectorScanStep(CURRENT) field val1", cif7val1, p.getSectorScanStep(CURRENT_VALUE));

  // set SectorScanStep MIN_VALUE
  p.setSectorScanStep(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setSectorScanStep(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setSectorScanStep(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSectorScanStep(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  //assertEquals("setSectorScanStep(val3,MIN) field val3bits", cif7val3, VRTMath::unpackUUID(p.getPayloadPointer(), 12+2*size));
  ArrayOfRecords tmp2;
  VRTMath::unpackRecord(p.getPayload(), 12+2*size, tmp2);
  assertEquals("setSectorScanStep(val3,MIN) field val3bits", cif7val3, tmp2);
  assertEquals("getSectorScanStep(MIN) field val3", cif7val3, p.getSectorScanStep(MIN_VALUE));

  // set SectorScanStep MAX_VALUE
  p.setSectorScanStep(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setSectorScanStep(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setSectorScanStep(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSectorScanStep(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  //assertEquals("setSectorScanStep(val2,MAX) field val2bits", cif7val2, VRTMath::unpackUUID(p.getPayloadPointer(), 12+size));
  ArrayOfRecords tmp3;
  VRTMath::unpackRecord(p.getPayload(), 12+size, tmp3);
  assertEquals("setSectorScanStep(val2,MAX) field val2bits", cif7val2, tmp3);
  assertEquals("getSectorScanStep(MAX) field val2", cif7val2, p.getSectorScanStep(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  //assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    cif7val3,    VRTMath::unpackUUID(p.getPayloadPointer(), 12+size));
  ArrayOfRecords tmp4;
  VRTMath::unpackRecord(p.getPayload(), 12+size, tmp4);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits", cif7val3, tmp4);
  //assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    cif7val2,    VRTMath::unpackUUID(p.getPayloadPointer(), 12));
  ArrayOfRecords tmp5;
  VRTMath::unpackRecord(p.getPayload(), 12, tmp5);
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits", cif7val2, tmp5);
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getSectorScanStep(MIN) field val3",     cif7val3,    p.getSectorScanStep(MIN_VALUE));
  assertEquals("getSectorScanStep(MAX) field val2",     cif7val2,    p.getSectorScanStep(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetCIFsArray () {
  // CIF 1 bit 11 (9.13.1)
  // ArrayOfRecords format
  // HeaderSize = 5
  //   - Note: spec says 7 (Rule 9.13.1-3), but that's incorrect
  //           It explains that 7 = (3 mandatory header words) + (4 CIF bit fields)
  //           a) Inclusion of 3 mandatory header words is contrary to defition of ArrayOfRecords, which
  //              states HeaderSize shall be 0 when there is no application-specific header.
  //           b) There are 5 CIF bit fields, not 4 (See Rule 9.13.1-1).
  // NumWords/Record is variable
  //   - one word for 32-bit index number as first word of each record
  //   - CIF0/1/2/3/7 fields as indicated by application specific header
  // Bitmapped CIF subfield = 0
  // App-Specific header is five (5) 32-bit words: CIF0, CIF1, CIF2, CIF3, CIF7
  // Each Record is variable 
  //   - First word is 32-bit index number
  //   - Followed by CIF0/1/2/3/7 fields as indicated by application specific header
  const size_t CIF = 1;
  const size_t CIF_bit = 11;

  // create array of records with Cited SID (1 word) and Controllee ID (1 word)
  //   Cited SID is CIF2 Bit30
  //   Controllee ID is CIF2 Bit25
  const int32_t recSize1 = 3; // 3 words including index number
  ArrayOfRecords val1;
  val1.setRecordSize(recSize1);
  //val1.setBitMappedIndicator(0); // defaults to 0
  char appSpecHdr1[20] = {0x00, 0x00, 0x00, 0x00, // CIF0
                          0x00, 0x00, 0x00, 0x00, // CIF1
                          0x42, 0x00, 0x00, 0x00, // CIF2 - set bits 25 and 30 = 0x42000000
                          0x00, 0x00, 0x00, 0x00, // CIF3
                          0x00, 0x00, 0x00, 0x00  // CIF7
                         };
  val1.setApplicationSpecificHeader((char*) &appSpecHdr1, 20);
  char buf1[recSize1*4] = {0x00, 0x00, 0x00, 0x01, // Index 0x00000001
                           0x01, 0x23, 0x45, 0x67, // Cited SID 0x01234567
                           0x89, 0xAB, 0xCD, 0xEF  // Controllee ID 0x89ABCDEF
                          };
  Record rec1(recSize1*4);
  rec1.writeBytes((void*) &buf1);
  assertEquals("CIFsArray(val1) recSize1", recSize1*4, rec1.getByteLength());
  assertEquals("CIFsArray(val1) addRec1", true, val1.addRecord(rec1));
  char buf2[recSize1*4] = {0x00, 0x00, 0x00, 0x02, // Index 0x00000002
                           0x76, 0x54, 0x32, 0x10, // Cited SID 0x76543210
                           0xFE, 0xDC, 0xBA, 0x98  // Controllee ID 0xFEDCBA98
                          };
  Record rec2(recSize1*4);
  rec2.writeBytes((void*) &buf2);
  assertEquals("CIFsArray(val1) addRec2", true, val1.addRecord(rec2));
  const int32_t val1size = (3 + 5 + 2*recSize1)*4;
  assertEquals("CIFsArray(val1) val1size", val1size, val1.getTotalFieldSize()*4);

  // create array of records with Cited SID (1 word) and Controllee UUID (4 words)
  //   Cited SID is CIF2 Bit30
  //   Controllee UUID is CIF2 Bit24
  const int32_t recSize2 = 6;
  ArrayOfRecords val2;
  val2.setRecordSize(recSize2);
  const int32_t bitMappedInd2 = 0x00000000; // not used
  val2.setBitMappedIndicator(bitMappedInd2);
  char appSpecHdr2[20] = {0x00, 0x00, 0x00, 0x00, // CIF0
                          0x00, 0x00, 0x00, 0x00, // CIF1
                          0x41, 0x00, 0x00, 0x00, // CIF2 - set bits 24 and 30 = 0x41000000
                          0x00, 0x00, 0x00, 0x00, // CIF3
                          0x00, 0x00, 0x00, 0x00  // CIF7
                         };
  val2.setApplicationSpecificHeader((char*) &appSpecHdr2, 20);
  char buf3[recSize2*4] = {0x00, 0x00, 0xFF, 0xFF, // Index 0x0000FFFF
                           0x11, 0x11, 0x11, 0x11, // Cited SID 0x11111111
                           0x00, 0x00, 0x00, 0x01, // Controllee UUID 0x00000001 00000002 00000003 00000004
                           0x00, 0x00, 0x00, 0x02,
                           0x00, 0x00, 0x00, 0x03,
                           0x00, 0x00, 0x00, 0x04
                          };
  Record rec3(recSize2*4);
  rec3.writeBytes((void*) &buf3);
  assertEquals("CIFsArray(val2) addRec3", true, val2.addRecord(rec3));
  char buf4[recSize2*4] = {0x00, 0x01, 0x00, 0x00, // Index 0x00010000
                           0x22, 0x22, 0x22, 0x22, // Cited SID 0x22222222
                           0x00, 0x00, 0x00, 0x05, // Controllee UUID 0x00000005 00000006 00000007 00000008
                           0x00, 0x00, 0x00, 0x06,
                           0x00, 0x00, 0x00, 0x07,
                           0x00, 0x00, 0x00, 0x08
                          };
  Record rec4(recSize2*4);
  rec4.writeBytes((void*) &buf4);
  assertEquals("CIFsArray(val2) addRec4", true, val2.addRecord(rec4));
  const int32_t val2size = (3 + 5 + 2*recSize2)*4;
  assertEquals("CIFsArray(val2) val2size", val2size, val2.getTotalFieldSize()*4);

  const ArrayOfRecords nullval;

  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF1 for CIFsArray
  p.addCIF1();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getCIFsArray() field null", nullval, p.getCIFsArray());

  // set CIFsArray of CIF1
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setCIFsArray(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setCIFsArray(val1) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIFsArray(val1) pkt len", len1+val1size, len2);
  assertEquals("setCIFsArray(val1) field val1bits1", 0x0000000E, VRTMath::unpackInt(p.getPayloadPointer(),  8));  // size of array
  assertEquals("setCIFsArray(val1) field val1bits2", 0x05003002, VRTMath::unpackInt(p.getPayloadPointer(),  12)); // array header 1
  assertEquals("setCIFsArray(val1) field val1bits3", (int32_t)0, VRTMath::unpackInt(p.getPayloadPointer(),  16)); // array header 2
  assertEquals("setCIFsArray(val1) field val1bits4", (int64_t)0, VRTMath::unpackLong(p.getPayloadPointer(), 20)); // app-specific-hdr
  assertEquals("setCIFsArray(val1) field val1bits5", 0x42000000, VRTMath::unpackInt(p.getPayloadPointer(),  28)); // app-specific-hdr
  assertEquals("setCIFsArray(val1) field val1bits6", (int64_t)0, VRTMath::unpackLong(p.getPayloadPointer(), 32)); // app-specific-hdr
  assertEquals("setCIFsArray(val1) field val1rec1a", 0x00000001, VRTMath::unpackInt(p.getPayloadPointer(),  40)); // rec1 index
  assertEquals("setCIFsArray(val1) field val1rec1b", 0x0123456789ABCDEF, VRTMath::unpackLong(p.getPayloadPointer(), 44)); // rec1
  assertEquals("setCIFsArray(val1) field val1rec2a", 0x00000002, VRTMath::unpackInt(p.getPayloadPointer(),  52)); // rec2 index
  assertEquals("setCIFsArray(val1) field val1rec2b", 0x76543210FEDCBA98, VRTMath::unpackLong(p.getPayloadPointer(), 56)); // rec2
  assertEquals("getCIFsArray(val1) field val1", val1, p.getCIFsArray());

  // set CIFsArray of CIF1 again
  p.setCIFsArray(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setCIFsArray(val2) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIFsArray(val2) pkt len", len1+val2size, len3);
  assertEquals("getCIFsArray(val2) field val2", val2, p.getCIFsArray());

  // unset CIFsArray of CIF1
  p.setCIFsArray(nullval);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setCIFsArray(null) CIF1 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIFsArray(null) CIF1 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setCIFsArray(null) pkt len", len1, len4);
  assertEquals("setCIFsArray(null) field null", nullval, p.getCIFsArray());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  ArrayOfRecords cif7val1 = val1;

  ArrayOfRecords cif7val2;
  cif7val2.setRecordSize(recSize1);
  cif7val2.setApplicationSpecificHeader((char*) &appSpecHdr1, 20);
  assertEquals("CIFsArray(cif7val2) addRec2", true, cif7val2.addRecord(rec2));
  assertEquals("CIFsArray(cif7val2) addRec1", true, cif7val2.addRecord(rec1));

  ArrayOfRecords cif7val3;
  cif7val3.setRecordSize(recSize1);
  cif7val3.setApplicationSpecificHeader((char*) &appSpecHdr1, 20);
  assertEquals("CIFsArray(cif7val3) addRec2", true, cif7val3.addRecord(rec2));
  assertEquals("CIFsArray(cif7val3)b addRec2", true, cif7val3.addRecord(rec2));

  const int32_t size = val1size;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getCIFsArray() field null", nullval, p.getCIFsArray());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getCIFsArray(CURRENT) field null", nullval, p.getCIFsArray(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getCIFsArray(MIN) field null", nullval, p.getCIFsArray(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getCIFsArray(MAX) field null", nullval, p.getCIFsArray(MAX_VALUE));

  // set CIFsArray CURRENT_VALUE
  p.setCIFsArray(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setCIFsArray(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setCIFsArray(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIFsArray(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  //assertEquals("setCIFsArray(val1,CURRENT) field val1bits", cif7val1, VRTMath::unpackUUID(p.getPayloadPointer(), 12));
  ArrayOfRecords tmp1;
  VRTMath::unpackRecord(p.getPayload(), 12, tmp1);
  assertEquals("setCIFsArray(val1,CURRENT) field val1bits", cif7val1, tmp1);
  assertEquals("getCIFsArray(CURRENT) field val1", cif7val1, p.getCIFsArray(CURRENT_VALUE));

  // set CIFsArray MIN_VALUE
  p.setCIFsArray(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setCIFsArray(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setCIFsArray(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIFsArray(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  //assertEquals("setCIFsArray(val3,MIN) field val3bits", cif7val3, VRTMath::unpackUUID(p.getPayloadPointer(), 12+2*size));
  ArrayOfRecords tmp2;
  VRTMath::unpackRecord(p.getPayload(), 12+2*size, tmp2);
  assertEquals("setCIFsArray(val3,MIN) field val3bits", cif7val3, tmp2);
  assertEquals("getCIFsArray(MIN) field val3", cif7val3, p.getCIFsArray(MIN_VALUE));

  // set CIFsArray MAX_VALUE
  p.setCIFsArray(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setCIFsArray(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setCIFsArray(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIFsArray(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  //assertEquals("setCIFsArray(val2,MAX) field val2bits", cif7val2, VRTMath::unpackUUID(p.getPayloadPointer(), 12+size));
  ArrayOfRecords tmp3;
  VRTMath::unpackRecord(p.getPayload(), 12+size, tmp3);
  assertEquals("setCIFsArray(val2,MAX) field val2bits", cif7val2, tmp3);
  assertEquals("getCIFsArray(MAX) field val2", cif7val2, p.getCIFsArray(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  //assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    cif7val3,    VRTMath::unpackUUID(p.getPayloadPointer(), 12+size));
  ArrayOfRecords tmp4;
  VRTMath::unpackRecord(p.getPayload(), 12+size, tmp4);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits", cif7val3, tmp4);
  //assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    cif7val2,    VRTMath::unpackUUID(p.getPayloadPointer(), 12));
  ArrayOfRecords tmp5;
  VRTMath::unpackRecord(p.getPayload(), 12, tmp5);
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits", cif7val2, tmp5);
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIFsArray(MIN) field val3",     cif7val3,    p.getCIFsArray(MIN_VALUE));
  assertEquals("getCIFsArray(MAX) field val2",     cif7val2,    p.getCIFsArray(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetSpectrumField () {
  // CIF1 Bit10
  // Section 9.6.1
  // SpectrumField type (14 words total)
  const size_t CIF = 1;
  const size_t CIF_bit = 10;

  const int32_t size = 13*4;
  SpectrumField val1;
  val1.setSpectrumType(2);      // cartesian
  val1.setAveragingType(32);    // smoothing
  val1.setWindowTime(1);        // percent overlap
  val1.setWindowType(6);        // hamming
  val1.setNumTransformPoints(512); 
  val1.setNumWindowPoints(512);
  val1.setResolution(1.0);
  val1.setSpan(0);
  val1.setNumAverages(128);
  val1.setWeightingFactor(1);
  val1.setSpectrumF1Index(-256);
  val1.setSpectrumF2Index(255);
  val1.setWindowTimeDeltaFloat(50);

  SpectrumField val2;
  val2.setSpectrumType(4);      // magnitude
  val2.setAveragingType(1);     // linear
  val2.setWindowTime(3);        // time
  val2.setWindowType(0);        // rectangle
  val2.setNumTransformPoints(256);
  val2.setNumWindowPoints(256);
  val2.setResolution(3.5);
  val2.setSpan(0);
  val2.setNumAverages(64);
  val2.setWeightingFactor(1);
  val2.setSpectrumF1Index(0);
  val2.setSpectrumF2Index(127);
  val2.setWindowTimeDeltaInt(60);

  const SpectrumField nullval;

  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF1 for SpectrumField
  p.addCIF1();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getSpectrumField() field null", nullval, p.getSpectrumField());

  // set SpectrumField of CIF1
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setSpectrumField(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setSpectrumField(val1) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSpectrumField(val1) pkt len", len1+size, len2);
  assertEquals("setSpectrumField(val1) field val1bits1", 0x00012002, VRTMath::unpackInt(p.getPayloadPointer(),  8));  // spectrum type
  assertEquals("setSpectrumField(val1) field val1bits2", (int32_t)6, VRTMath::unpackInt(p.getPayloadPointer(),  12)); // window type
  assertEquals("setSpectrumField(val1) field val1bits3", (int32_t)512, VRTMath::unpackInt(p.getPayloadPointer(), 16)); // transform points
  assertEquals("setSpectrumField(val1) field val1bits4", (int32_t)512, VRTMath::unpackInt(p.getPayloadPointer(), 20)); // window points
  assertEquals("setSpectrumField(val1) field val1bits5", (int64_t)0x00100000, VRTMath::unpackLong(p.getPayloadPointer(),  24)); // resolution
  assertEquals("setSpectrumField(val1) field val1bits6", (int64_t)0, VRTMath::unpackLong(p.getPayloadPointer(), 32)); // span
  assertEquals("setSpectrumField(val1) field val1bits7", (int32_t)128, VRTMath::unpackInt(p.getPayloadPointer(),  40)); // num averages
  assertEquals("setSpectrumField(val1) field val1bits8", (int32_t)1, VRTMath::unpackInt(p.getPayloadPointer(), 44)); // weighting factor
  assertEquals("setSpectrumField(val1) field val1bits9", (int32_t)-256, VRTMath::unpackInt(p.getPayloadPointer(),  48)); // spectrum F1 index
  assertEquals("setSpectrumField(val1) field val1bitsA", (int32_t)255, VRTMath::unpackInt(p.getPayloadPointer(),  52)); // spectrum F2 index
  //assertEquals("setSpectrumField(val1) field val1bitsB", (int32_t)0, VRTMath::unpackInt(p.getPayloadPointer(),  56)); // window time delta int
  assertEquals("setSpectrumField(val1) field val1bitsB", 0x00032000, VRTMath::unpackInt(p.getPayloadPointer(),  56)); // window time delta float
  assertEquals("getSpectrumField(val1) field val1", val1, p.getSpectrumField());

  // set SpectrumField of CIF1 again
  p.setSpectrumField(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setSpectrumField(val2) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSpectrumField(val2) pkt len", len1+size, len3);
  assertEquals("getSpectrumField(val2) field val2", val2, p.getSpectrumField());

  // unset SpectrumField of CIF1
  p.setSpectrumField(nullval);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setSpectrumField(null) CIF1 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSpectrumField(null) CIF1 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setSpectrumField(null) pkt len", len1, len4);
  assertEquals("setSpectrumField(null) field null", nullval, p.getSpectrumField());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  SpectrumField cif7val1;
  cif7val1.setSpectrumType(2);      // cartesian
  cif7val1.setAveragingType(32);    // smoothing
  cif7val1.setWindowTime(1);        // percent overlap
  cif7val1.setWindowType(6);        // hamming
  cif7val1.setNumTransformPoints(64); 
  cif7val1.setNumWindowPoints(32);
  cif7val1.setResolution(1.0);
  cif7val1.setSpan(0);
  cif7val1.setNumAverages(128);
  cif7val1.setWeightingFactor(2);
  cif7val1.setSpectrumF1Index(-256);
  cif7val1.setSpectrumF2Index(255);
  cif7val1.setWindowTimeDeltaFloat(50);
  SpectrumField cif7val2 = val1;
  SpectrumField cif7val3 = val2;

  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getSpectrumField() field null", nullval, p.getSpectrumField());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getSpectrumField(CURRENT) field null", nullval, p.getSpectrumField(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getSpectrumField(MIN) field null", nullval, p.getSpectrumField(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getSpectrumField(MAX) field null", nullval, p.getSpectrumField(MAX_VALUE));

  // set SpectrumField CURRENT_VALUE
  p.setSpectrumField(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setSpectrumField(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setSpectrumField(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSpectrumField(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  //assertEquals("setSpectrumField(val1,CURRENT) field val1bits", cif7val1, VRTMath::unpackUUID(p.getPayloadPointer(), 12));
  SpectrumField tmp1;
  VRTMath::unpackRecord(p.getPayload(), 12, tmp1);
  assertEquals("setSpectrumField(val1,CURRENT) field val1bits", cif7val1, tmp1);
  assertEquals("getSpectrumField(CURRENT) field val1", cif7val1, p.getSpectrumField(CURRENT_VALUE));

  // set SpectrumField MIN_VALUE
  p.setSpectrumField(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setSpectrumField(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setSpectrumField(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSpectrumField(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  //assertEquals("setSpectrumField(val3,MIN) field val3bits", cif7val3, VRTMath::unpackUUID(p.getPayloadPointer(), 12+2*size));
  SpectrumField tmp2;
  VRTMath::unpackRecord(p.getPayload(), 12+2*size, tmp2);
  assertEquals("setSpectrumField(val3,MIN) field val3bits", cif7val3, tmp2);
  assertEquals("getSpectrumField(MIN) field val3", cif7val3, p.getSpectrumField(MIN_VALUE));

  // set SpectrumField MAX_VALUE
  p.setSpectrumField(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setSpectrumField(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setSpectrumField(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSpectrumField(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  //assertEquals("setSpectrumField(val2,MAX) field val2bits", cif7val2, VRTMath::unpackUUID(p.getPayloadPointer(), 12+size));
  SpectrumField tmp3;
  VRTMath::unpackRecord(p.getPayload(), 12+size, tmp3);
  assertEquals("setSpectrumField(val2,MAX) field val2bits", cif7val2, tmp3);
  assertEquals("getSpectrumField(MAX) field val2", cif7val2, p.getSpectrumField(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  //assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    cif7val3,    VRTMath::unpackUUID(p.getPayloadPointer(), 12+size));
  SpectrumField tmp4;
  VRTMath::unpackRecord(p.getPayload(), 12+size, tmp4);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits", cif7val3, tmp4);
  //assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    cif7val2,    VRTMath::unpackUUID(p.getPayloadPointer(), 12));
  SpectrumField tmp5;
  VRTMath::unpackRecord(p.getPayload(), 12, tmp5);
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits", cif7val2, tmp5);
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getSpectrumField(MIN) field val3",     cif7val3,    p.getSpectrumField(MIN_VALUE));
  assertEquals("getSpectrumField(MAX) field val2",     cif7val2,    p.getSpectrumField(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetAuxBandwidth () {
  // CIF1 bit 13
  const size_t CIF = 1;
  const size_t CIF_bit = 13;

  const double  val1 = 1.0;
  const int64_t val1bits = 0x0000000000100000;
  const double  val2 = 0.00000095;
  const int64_t val2bits = 0x0000000000000001;
  const double  val3 = 15.5;
  const int64_t val3bits = 0x0000000000F80000;
  const int64_t mask = 0xFFFFFFFFFFFFFFFF;
  const int32_t size = 8;
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF1
  p.addCIF1();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getAuxBandwidth() field null", DOUBLE_NAN, p.getAuxBandwidth());

  // set AuxBandwidth of CIF1
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setAuxBandwidth(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setAuxBandwidth(val1) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setAuxBandwidth(val1) pkt len", len1+size, len2);
  assertEquals("setAuxBandwidth(val1) field val1bits", val1bits&mask, VRTMath::unpackLong(p.getPayloadPointer(), 8));
  assertEquals("getAuxBandwidth(val1) field val1", val1, p.getAuxBandwidth(), 0.00000095);

  // set AuxBandwidth of CIF1 again
  p.setAuxBandwidth(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setAuxBandwidth(val2) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setAuxBandwidth(val2) pkt len", len2, len3);
  assertEquals("setAuxBandwidth(val2) field val2bits", val2bits&mask, VRTMath::unpackLong(p.getPayloadPointer(), 8));
  assertEquals("getAuxBandwidth(val2) field val2", val2, p.getAuxBandwidth(), 0.00000095);

  // set AuxBandwidth of CIF1 again
  p.setAuxBandwidth(val3);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setAuxBandwidth(val3) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setAuxBandwidth(val3) pkt len", len2, len4);
  assertEquals("setAuxBandwidth(val3) field val3bits", val3bits&mask, VRTMath::unpackLong(p.getPayloadPointer(), 8));
  assertEquals("getAuxBandwidth(val3) field val3", val3, p.getAuxBandwidth(), 0.00000095);

  // unset AuxBandwidth of CIF1
  p.setAuxBandwidth(INT64_NULL);
  int32_t len5 = p.getPayloadLength();
  assertEquals("setAuxBandwidth(null) CIF1 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setAuxBandwidth(null) CIF1 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setAuxBandwidth(null) pkt len", len1, len5);
  assertEquals("setAuxBandwidth(null) field null", DOUBLE_NAN, p.getAuxBandwidth());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const double cif7val1 = 0;
  const int64_t cif7val1bits = 0x0;
  const double cif7val2 = val1;
  const int64_t cif7val2bits = val1bits;
  const double cif7val3 = val2;
  const int64_t cif7val3bits = val2bits;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getAuxBandwidth() field null", DOUBLE_NAN, p.getAuxBandwidth());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getAuxBandwidth(CURRENT) field null", DOUBLE_NAN, p.getAuxBandwidth(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getAuxBandwidth(MIN) field null", DOUBLE_NAN, p.getAuxBandwidth(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getAuxBandwidth(MAX) field null", DOUBLE_NAN, p.getAuxBandwidth(MAX_VALUE));

  // set AuxBandwidth CURRENT_VALUE
  p.setAuxBandwidth(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setAuxBandwidth(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setAuxBandwidth(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setAuxBandwidth(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setAuxBandwidth(val1,CURRENT) field val1bits", cif7val1bits, VRTMath::unpackLong(p.getPayloadPointer(), 12));
  assertEquals("getAuxBandwidth(CURRENT) field val1", cif7val1, p.getAuxBandwidth(CURRENT_VALUE), 0.00000095);

  // set AuxBandwidth MIN_VALUE
  p.setAuxBandwidth(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setAuxBandwidth(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setAuxBandwidth(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setAuxBandwidth(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setAuxBandwidth(val3,MIN) field val3bits", cif7val3bits, VRTMath::unpackLong(p.getPayloadPointer(), 12+2*size));
  assertEquals("getAuxBandwidth(MIN) field val3", cif7val3, p.getAuxBandwidth(MIN_VALUE), 0.00000095);

  // set AuxBandwidth MAX_VALUE
  p.setAuxBandwidth(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setAuxBandwidth(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setAuxBandwidth(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setAuxBandwidth(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setAuxBandwidth(val2,MAX) field val2bits", cif7val2bits, VRTMath::unpackLong(p.getPayloadPointer(), 12+size));
  assertEquals("getAuxBandwidth(MAX) field val2", cif7val2, p.getAuxBandwidth(MAX_VALUE), 0.00000095);

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    cif7val3bits,    VRTMath::unpackLong(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    cif7val2bits,    VRTMath::unpackLong(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getAuxBandwidth(MIN) field val3",     cif7val3,    p.getAuxBandwidth(MIN_VALUE), 0.00000095);
  assertEquals("getAuxBandwidth(MAX) field val2",     cif7val2,    p.getAuxBandwidth(MAX_VALUE), 0.00000095);
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetAuxGain () {
  // CIF1 bit 14
  const size_t CIF = 1;
  const size_t CIF_bit = 14;

  const float   val1     = 0.0;
  const int32_t val1bits = 0x00000000;
  const float   val2     = 1.0;
  const int32_t val2bits = 0x00800080;
  const float   val3     = 0.0078125;
  const int32_t val3bits = 0x00010001;
  const float   val4     = -1.0;
  const int32_t val4bits = 0xFF80FF80;
  const float   val5     = -0.0078125;
  const int32_t val5bits = 0xFFFFFFFF;
  const int32_t val6bits = 0x00010080; // gain1=val2 and gain2=val3
  const int32_t val7bits = 0x00000080; // gain=val2
  const int32_t val8bits = 0xFF800080; // gain1=val2 and gain2=val4
  const int32_t val9bits = 0x0080FF80; // gain1=val4 and gain2=val2

  const int32_t size = 4;

  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF1 for AuxGain
  p.addCIF1();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getAuxGain() field null", FLOAT_NAN, p.getAuxGain());

  // set AuxGain of CIF1
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setAuxGain(val1,val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setAuxGain(val1) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setAuxGain(val1) pkt len", len1+size, len2);
  assertEquals("setAuxGain(val1) field val1bits", val1bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getAuxGain1() field val1", val1, p.getAuxGain1(), (float)0.001);
  assertEquals("getAuxGain2() field val1", val1, p.getAuxGain2(), (float)0.001);
  assertEquals("getAuxGain() field val1", val1+val1, p.getAuxGain(), (float)0.001);

  // set AuxGain of CIF1 again
  p.setAuxGain(val2,val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setAuxGain(val2) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setAuxGain(val2) pkt len", len2, len3);
  assertEquals("setAuxGain(val2) field val2bits", val2bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getAuxGain1() field val2", val2, p.getAuxGain1(), (float)0.001);
  assertEquals("getAuxGain2() field val2", val2, p.getAuxGain2(), (float)0.001);
  assertEquals("getAuxGain() field val2", val2+val2, p.getAuxGain(), (float)0.001);

  // set AuxGain of CIF1 again
  p.setAuxGain(val3,val3);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setAuxGain(val3) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setAuxGain(val3) pkt len", len2, len4);
  assertEquals("setAuxGain(val3) field val3bits", val3bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getAuxGain1() field val3", val3, p.getAuxGain1(), (float)0.001);
  assertEquals("getAuxGain2() field val3", val3, p.getAuxGain2(), (float)0.001);
  assertEquals("getAuxGain() field val3", val3+val3, p.getAuxGain(), (float)0.001);

  // set AuxGain of CIF1 again
  p.setAuxGain(val4,val4);
  int32_t len5 = p.getPayloadLength();
  assertEquals("setAuxGain(val4) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setAuxGain(val4) pkt len", len2, len5);
  assertEquals("setAuxGain(val4) field val4bits", val4bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getAuxGain1() field val4", val4, p.getAuxGain1(), (float)0.001);
  assertEquals("getAuxGain2() field val4", val4, p.getAuxGain2(), (float)0.001);
  assertEquals("getAuxGain() field val4", val4+val4, p.getAuxGain(), (float)0.001);

  // set AuxGain of CIF1 again
  p.setAuxGain(val5,val5);
  int32_t len6 = p.getPayloadLength();
  assertEquals("setAuxGain(val5) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setAuxGain(val5) pkt len", len2, len6);
  assertEquals("setAuxGain(val5) field val5bits", val5bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getAuxGain1() field val5", val5, p.getAuxGain1(), (float)0.001);
  assertEquals("getAuxGain2() field val5", val5, p.getAuxGain2(), (float)0.001);
  assertEquals("getAuxGain() field val5", val5+val5, p.getAuxGain(), (float)0.001);

  // Make sure gain values are in correct place (VRT-39) [Gain 1 in lower-order
  // bits and Gain 2 in the higher-order bits.]
  // val6bits = 0x00010080; // gain1=val2 and gain2=val3
  p.setAuxGain(val2, val3);
  assertEquals("setAuxGain(val6) field val6bits", val6bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getAuxGain1() field val6", val2, p.getAuxGain1(), (float)0.001);
  assertEquals("getAuxGain2() field val6", val3, p.getAuxGain2(), (float)0.001);
  assertEquals("getAuxGain() field val6", val2+val3, p.getAuxGain(), (float)0.001);

  // Make sure setting individual gain values works
  // val7bits = 0x00000080; // gain=val2 (gain1=val2, gain2=val1)
  p.setAuxGain(val4, val4);
  p.setAuxGain(val2);
  assertEquals("setAuxGain(val7) field val7bits", val7bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getAuxGain1() field val7", val2, p.getAuxGain1(), (float)0.001);
  assertEquals("getAuxGain2() field val7", val1, p.getAuxGain2(), (float)0.001);
  assertEquals("getAuxGain() field val7", val2+val1, p.getAuxGain(), (float)0.001);

  // val8bits = 0xFF800080; // gain1=val2 and gain2=val4
  p.setAuxGain(val4, val4);
  p.setAuxGain1(val2);
  assertEquals("setAuxGain(val8) field val8bits", val8bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getAuxGain1() field val8", val2, p.getAuxGain1(), (float)0.001);
  assertEquals("getAuxGain2() field val8", val4, p.getAuxGain2(), (float)0.001);
  assertEquals("getAuxGain() field val8", val2+val4, p.getAuxGain(), (float)0.001);

  // val9bits = 0x0080FF80; // gain1=val4 and gain2=val2
  p.setAuxGain(val4, val4);
  p.setAuxGain2(val2);
  assertEquals("setAuxGain(val9) field val9bits", val9bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getAuxGain1() field val9", val4, p.getAuxGain1(), (float)0.001);
  assertEquals("getAuxGain2() field val9", val2, p.getAuxGain2(), (float)0.001);
  assertEquals("getAuxGain() field val9", val4+val2, p.getAuxGain(), (float)0.001);

  // unset AuxGain of CIF1
  p.setAuxGain(FLOAT_NAN);
  int32_t len7 = p.getPayloadLength();
  assertEquals("setAuxGain(null) CIF1 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setAuxGain(null) CIF1 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setAuxGain(null) pkt len", len1, len7);
  assertEquals("getAuxGain1() field null", FLOAT_NAN, p.getAuxGain1());
  assertEquals("getAuxGain2() field null", FLOAT_NAN, p.getAuxGain2());
  assertEquals("getAuxGain() field null", FLOAT_NAN, p.getAuxGain());

  // unset AuxGain1 of CIF1
  p.setAuxGain1(val2);
  int32_t len8 = p.getPayloadLength();
  assertEquals("setAuxGain1(val2) pkt len", len2, len8);
  p.setAuxGain1(FLOAT_NAN);
  int32_t len9 = p.getPayloadLength();
  assertEquals("setAuxGain1(null) CIF1 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setAuxGain1(null) CIF1 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setAuxGain1(null) pkt len", len1, len9);
  assertEquals("getAuxGain1() field null", FLOAT_NAN, p.getAuxGain1());
  assertEquals("getAuxGain2() field null", FLOAT_NAN, p.getAuxGain2());
  assertEquals("getAuxGain() field null", FLOAT_NAN, p.getAuxGain());

  // unset AuxGain2 of CIF1
  p.setAuxGain2(val2);
  int32_t len10 = p.getPayloadLength();
  assertEquals("setAuxGain2(val2) pkt len", len2, len10);
  p.setAuxGain2(FLOAT_NAN);
  int32_t len11 = p.getPayloadLength();
  assertEquals("setAuxGain2(null) CIF1 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setAuxGain2(null) CIF1 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setAuxGain2(null) pkt len", len1, len11);
  assertEquals("getAuxGain1() field null", FLOAT_NAN, p.getAuxGain1());
  assertEquals("getAuxGain2() field null", FLOAT_NAN, p.getAuxGain2());
  assertEquals("getAuxGain() field null", FLOAT_NAN, p.getAuxGain());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const float cif7val1 = val1;
  const int32_t cif7val1bits = val1bits;
  const float cif7val2 = val2;
  const int32_t cif7val2bits = val2bits;
  const float cif7val3 = val3;
  const int32_t cif7val3bits = val3bits;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getAuxGain1() field null", FLOAT_NAN, p.getAuxGain1());
  assertEquals("getAuxGain2() field null", FLOAT_NAN, p.getAuxGain2());
  assertEquals("getAuxGain() field null", FLOAT_NAN, p.getAuxGain());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getAuxGain1(CURRENT) field null", FLOAT_NAN, p.getAuxGain1(CURRENT_VALUE));
  assertEquals("getAuxGain2(CURRENT) field null", FLOAT_NAN, p.getAuxGain2(CURRENT_VALUE));
  assertEquals("getAuxGain(CURRENT) field null", FLOAT_NAN, p.getAuxGain(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getAuxGain1(MIN) field null", FLOAT_NAN, p.getAuxGain1(MIN_VALUE));
  assertEquals("getAuxGain2(MIN) field null", FLOAT_NAN, p.getAuxGain2(MIN_VALUE));
  assertEquals("getAuxGain(MIN) field null", FLOAT_NAN, p.getAuxGain(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getAuxGain1(MAX) field null", FLOAT_NAN, p.getAuxGain1(MAX_VALUE));
  assertEquals("getAuxGain2(MAX) field null", FLOAT_NAN, p.getAuxGain2(MAX_VALUE));
  assertEquals("getAuxGain(MAX) field null", FLOAT_NAN, p.getAuxGain(MAX_VALUE));

  // set AuxGain CURRENT_VALUE
  p.setAuxGain(cif7val1, cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setAuxGain(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setAuxGain(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setAuxGain(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setAuxGain(val1,CURRENT) field val1bits", cif7val1bits, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getAuxGain1(CURRENT) field val1", cif7val1, p.getAuxGain1(CURRENT_VALUE), (float)0.001);
  assertEquals("getAuxGain2(CURRENT) field val1", cif7val1, p.getAuxGain2(CURRENT_VALUE), (float)0.001);
  assertEquals("getAuxGain(CURRENT) field val1", cif7val1+cif7val1, p.getAuxGain(CURRENT_VALUE), (float)0.001);

  // set AuxGain MIN_VALUE
  p.setAuxGain(cif7val3, cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setAuxGain(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setAuxGain(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setAuxGain(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setAuxGain(val3,MIN) field val3bits", cif7val3bits, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getAuxGain1(MIN) field val3", cif7val3, p.getAuxGain1(MIN_VALUE), (float)0.001);
  assertEquals("getAuxGain2(MIN) field val3", cif7val3, p.getAuxGain2(MIN_VALUE), (float)0.001);
  assertEquals("getAuxGain(MIN) field val3", cif7val3+cif7val3, p.getAuxGain(MIN_VALUE), (float)0.001);

  // set AuxGain MAX_VALUE
  p.setAuxGain(cif7val2, cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setAuxGain(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setAuxGain(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setAuxGain(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setAuxGain(val2,MAX) field val2bits", cif7val2bits, VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("getAuxGain1(MAX) field val2", cif7val2, p.getAuxGain1(MAX_VALUE), (float)0.001);
  assertEquals("getAuxGain2(MAX) field val2", cif7val2, p.getAuxGain2(MAX_VALUE), (float)0.001);
  assertEquals("getAuxGain(MAX) field val2", cif7val2+cif7val2, p.getAuxGain(MAX_VALUE), (float)0.001);

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    cif7val3bits,    VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    cif7val2bits,    VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getAuxGain1(MIN) field val3",     cif7val3,    p.getAuxGain1(MIN_VALUE), (float)0.001);
  assertEquals("getAuxGain2(MIN) field val3",     cif7val3,    p.getAuxGain2(MIN_VALUE), (float)0.001);
  assertEquals("getAuxGain(MIN) field val3",     cif7val3+cif7val3,    p.getAuxGain(MIN_VALUE), (float)0.001);
  assertEquals("getAuxGain1(MAX) field val2",     cif7val2,    p.getAuxGain1(MAX_VALUE), (float)0.001);
  assertEquals("getAuxGain2(MAX) field val2",     cif7val2,    p.getAuxGain2(MAX_VALUE), (float)0.001);
  assertEquals("getAuxGain(MAX) field val2",     cif7val2+cif7val2,    p.getAuxGain(MAX_VALUE), (float)0.001);
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

// void BasicQueryAcknowledgePacketTest::testSetAuxGain1 () { } // tested by testSetAuxGain
// void BasicQueryAcknowledgePacketTest::testSetAuxGain2 () { } // tested by testSetAuxGain

void BasicQueryAcknowledgePacketTest::testSetAuxFrequency () {
  // CIF1 bit 15
  const size_t CIF = 1;
  const size_t CIF_bit = 15;

  const double  val1 = 1.0;
  const int64_t val1bits = 0x0000000000100000;
  const double  val2 = 0.00000095;
  const int64_t val2bits = 0x0000000000000001;
  const double  val3 = 15.5;
  const int64_t val3bits = 0x0000000000F80000;
  const int64_t mask = 0xFFFFFFFFFFFFFFFF;
  const int32_t size = 8;
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF1
  p.addCIF1();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getAuxFrequency() field null", DOUBLE_NAN, p.getAuxFrequency());

  // set AuxFrequency of CIF1
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setAuxFrequency(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setAuxFrequency(val1) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setAuxFrequency(val1) pkt len", len1+size, len2);
  assertEquals("setAuxFrequency(val1) field val1bits", val1bits&mask, VRTMath::unpackLong(p.getPayloadPointer(), 8));
  assertEquals("getAuxFrequency(val1) field val1", val1, p.getAuxFrequency(), 0.00000095);

  // set AuxFrequency of CIF1 again
  p.setAuxFrequency(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setAuxFrequency(val2) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setAuxFrequency(val2) pkt len", len2, len3);
  assertEquals("setAuxFrequency(val2) field val2bits", val2bits&mask, VRTMath::unpackLong(p.getPayloadPointer(), 8));
  assertEquals("getAuxFrequency(val2) field val2", val2, p.getAuxFrequency(), 0.00000095);

  // set AuxFrequency of CIF1 again
  p.setAuxFrequency(val3);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setAuxFrequency(val3) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setAuxFrequency(val3) pkt len", len2, len4);
  assertEquals("setAuxFrequency(val3) field val3bits", val3bits&mask, VRTMath::unpackLong(p.getPayloadPointer(), 8));
  assertEquals("getAuxFrequency(val3) field val3", val3, p.getAuxFrequency(), 0.00000095);

  // unset AuxFrequency of CIF1
  p.setAuxFrequency(INT64_NULL);
  int32_t len5 = p.getPayloadLength();
  assertEquals("setAuxFrequency(null) CIF1 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setAuxFrequency(null) CIF1 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setAuxFrequency(null) pkt len", len1, len5);
  assertEquals("setAuxFrequency(null) field null", DOUBLE_NAN, p.getAuxFrequency());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const double cif7val1 = 0;
  const int64_t cif7val1bits = 0x0;
  const double cif7val2 = val1;
  const int64_t cif7val2bits = val1bits;
  const double cif7val3 = val2;
  const int64_t cif7val3bits = val2bits;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getAuxFrequency() field null", DOUBLE_NAN, p.getAuxFrequency());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getAuxFrequency(CURRENT) field null", DOUBLE_NAN, p.getAuxFrequency(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getAuxFrequency(MIN) field null", DOUBLE_NAN, p.getAuxFrequency(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getAuxFrequency(MAX) field null", DOUBLE_NAN, p.getAuxFrequency(MAX_VALUE));

  // set AuxFrequency CURRENT_VALUE
  p.setAuxFrequency(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setAuxFrequency(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setAuxFrequency(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setAuxFrequency(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setAuxFrequency(val1,CURRENT) field val1bits", cif7val1bits, VRTMath::unpackLong(p.getPayloadPointer(), 12));
  assertEquals("getAuxFrequency(CURRENT) field val1", cif7val1, p.getAuxFrequency(CURRENT_VALUE), 0.00000095);

  // set AuxFrequency MIN_VALUE
  p.setAuxFrequency(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setAuxFrequency(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setAuxFrequency(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setAuxFrequency(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setAuxFrequency(val3,MIN) field val3bits", cif7val3bits, VRTMath::unpackLong(p.getPayloadPointer(), 12+2*size));
  assertEquals("getAuxFrequency(MIN) field val3", cif7val3, p.getAuxFrequency(MIN_VALUE), 0.00000095);

  // set AuxFrequency MAX_VALUE
  p.setAuxFrequency(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setAuxFrequency(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setAuxFrequency(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setAuxFrequency(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setAuxFrequency(val2,MAX) field val2bits", cif7val2bits, VRTMath::unpackLong(p.getPayloadPointer(), 12+size));
  assertEquals("getAuxFrequency(MAX) field val2", cif7val2, p.getAuxFrequency(MAX_VALUE), 0.00000095);

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    cif7val3bits,    VRTMath::unpackLong(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    cif7val2bits,    VRTMath::unpackLong(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getAuxFrequency(MIN) field val3",     cif7val3,    p.getAuxFrequency(MIN_VALUE), 0.00000095);
  assertEquals("getAuxFrequency(MAX) field val2",     cif7val2,    p.getAuxFrequency(MAX_VALUE), 0.00000095);
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

// void BasicQueryAcknowledgePacketTest::testSetSNR () { } // tested by testSetSNRNoiseFigure
// void BasicQueryAcknowledgePacketTest::testSetNoiseFigure () { } // tested by testSetSNRNoiseFigure
void BasicQueryAcknowledgePacketTest::testSetSNRNoiseFigure () {
  // CIF1 bit 16
  const size_t CIF = 1;
  const size_t CIF_bit = 16;

  const float   val1     = 2.0;
  const int32_t val1bits = 0x01000100;
  const float   val2     = 1.0;
  const int32_t val2bits = 0x00800080;
  const float   val3     = 0.0078125;
  const int32_t val3bits = 0x00010001;
  const float   val4     = -1.0;
  const int32_t val4bits = 0xFF80FF80;
  const float   val5     = -0.0078125;
  const int32_t val5bits = 0xFFFFFFFF;
  const int32_t val6bits = 0x00010080; // noise=val2 and snr=val3
  const int32_t val7bits = 0xFF800080; // noise=val2 and snr=val4
  const int32_t val8bits = 0x0080FF80; // noise=val4 and snr=val2

  const int32_t size = 4;

  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF1 for SNR/Noise Figure
  p.addCIF1();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getSNR() field null", FLOAT_NAN, p.getSNR());
  assertEquals("getNoiseFigure() field null", FLOAT_NAN, p.getNoiseFigure());

  // set SNR of CIF1
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setSNR(val1);
  //p.setNoiseFigure(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setSNR(val1) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSNR(val1) pkt len", len1+size, len2);
  assertEquals("setSNR(val1) field val1bits", val1bits&0xFFFF0000, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getSNR() field val1", val1, p.getSNR(), (float)0.001);
  assertEquals("getNoiseFigure() field 0", (float)0.0, p.getNoiseFigure(), (float)0.001);

  // set SNR/Noise Figure of CIF1 again
  p.setSNR(val2);
  p.setNoiseFigure(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setSNRNoiseFigure(val2) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSNRNoiseFigure(val2) pkt len", len2, len3);
  assertEquals("setSNRNoiseFigure(val2) field val2bits", val2bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getSNR() field val2", val2, p.getSNR(), (float)0.001);
  assertEquals("getNoiseFigure() field val2", val2, p.getNoiseFigure(), (float)0.001);

  // set SNR/Noise Figure of CIF1 again... switch order
  p.setNoiseFigure(val3);
  p.setSNR(val3);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setSNRNoiseFigure(val3) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSNRNoiseFigure(val3) pkt len", len2, len4);
  assertEquals("setSNRNoiseFigure(val3) field val3bits", val3bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getSNR() field val3", val3, p.getSNR(), (float)0.001);
  assertEquals("getNoiseFigure() field val3", val3, p.getNoiseFigure(), (float)0.001);

  // set SNR/Noise Figure of CIF1 again
  p.setNoiseFigure(val4);
  p.setSNR(val4);
  int32_t len5 = p.getPayloadLength();
  assertEquals("setSNRNoiseFigure(val4) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSNRNoiseFigure(val4) pkt len", len2, len5);
  assertEquals("setSNRNoiseFigure(val4) field val4bits", val4bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getSNR() field val4", val4, p.getSNR(), (float)0.001);
  assertEquals("getNoiseFigure() field val4", val4, p.getNoiseFigure(), (float)0.001);

  // set SNR/Noise Figure of CIF1 again.. switch order back
  p.setSNR(val5);
  p.setNoiseFigure(val5);
  int32_t len6 = p.getPayloadLength();
  assertEquals("setSNRNoiseFigure(val5) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSNRNoiseFigure(val5) pkt len", len2, len6);
  assertEquals("setSNRNoiseFigure(val5) field val5bits", val5bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getSNR() field val5", val5, p.getSNR(), (float)0.001);
  assertEquals("getNoiseFigure() field val5", val5, p.getNoiseFigure(), (float)0.001);

  // Make sure gain values are in correct place (VRT-39) [Gain 1 in lower-order
  // bits and Gain 2 in the higher-order bits.]
  // val6bits = 0x00010080; // noise=val2 and SNR=val3
  p.setNoiseFigure(val2);
  p.setSNR(val3);
  assertEquals("setSNRNoiseFigure(val6) field val6bits", val6bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getNoiseFigure() field val6", val2, p.getNoiseFigure(), (float)0.001);
  assertEquals("getSNR() field val6", val3, p.getSNR(), (float)0.001);

  // Make sure setting individual gain values works
  // val7bits = 0xFF800080; // noise=val2 and SNR=val4
  p.setNoiseFigure(val2);
  p.setSNR(val4);
  assertEquals("setSNRNoiseFigure(val7) field val7bits", val7bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getNoiseFigure() field val7", val2, p.getNoiseFigure(), (float)0.001);
  assertEquals("getSNR() field val7", val4, p.getSNR(), (float)0.001);

  // val8bits = 0x0080FF80; // noise=val4 and SNR=val2
  p.setNoiseFigure(val4);
  p.setSNR(val2);
  assertEquals("setSNRNoiseFigure(val8) field val8bits", val8bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getNoiseFigure() field val8", val4, p.getNoiseFigure(), (float)0.001);
  assertEquals("getSNR() field val8", val2, p.getSNR(), (float)0.001);

  // unset SNR of CIF1
  p.setSNR(FLOAT_NAN);
  int32_t len7 = p.getPayloadLength();
  assertEquals("setSNRNoiseFigure(null) CIF1 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSNRNoiseFigure(null) CIF1 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setSNRNoiseFigure(null) pkt len", len1, len7);
  assertEquals("getNoiseFigure() field null", FLOAT_NAN, p.getNoiseFigure());
  assertEquals("getSNR() field null", FLOAT_NAN, p.getSNR());

  // set NoiseFigure of CIF1
  //Utilities::dumpBytes(p.getPayloadPointer(), len7);
  p.setNoiseFigure(val1);
  //p.setSNR(val1);
  int32_t len8 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8);
  assertEquals("setNoiseFigure(val1) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setNoiseFigure(val1) pkt len", len7+size, len8);
  assertEquals("setNoiseFigure(val1) field val1bits", val1bits&0x0000FFFF, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getNoiseFigure() field val1", val1, p.getNoiseFigure(), (float)0.001);
  assertEquals("getSNR() field 0", (float)0.0, p.getSNR(), (float)0.001);

  // unset Noise Figure of CIF1
  p.setNoiseFigure(FLOAT_NAN);
  int32_t len9 = p.getPayloadLength();
  assertEquals("setSNRNoiseFigure(null) CIF1 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSNRNoiseFigure(null) CIF1 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setSNRNoiseFigure(null) pkt len", len1, len9);
  assertEquals("getNoiseFigure() field null", FLOAT_NAN, p.getNoiseFigure());
  assertEquals("getSNR() field null", FLOAT_NAN, p.getSNR());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const float cif7val1 = val1;
  const int32_t cif7val1bits = val1bits;
  const float cif7val2 = val2;
  const int32_t cif7val2bits = val2bits;
  const float cif7val3 = val3;
  const int32_t cif7val3bits = val3bits;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getSNR() field null", FLOAT_NAN, p.getSNR());
  assertEquals("getNoiseFigure() field null", FLOAT_NAN, p.getNoiseFigure());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getSNR(CURRENT) field null", FLOAT_NAN, p.getSNR(CURRENT_VALUE));
  assertEquals("getNoiseFigure(CURRENT) field null", FLOAT_NAN, p.getNoiseFigure(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getSNR(MIN) field null", FLOAT_NAN, p.getSNR(MIN_VALUE));
  assertEquals("getNoiseFigure(MIN) field null", FLOAT_NAN, p.getNoiseFigure(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getSNR(MAX) field null", FLOAT_NAN, p.getSNR(MAX_VALUE));
  assertEquals("getNoiseFigure(MAX) field null", FLOAT_NAN, p.getNoiseFigure(MAX_VALUE));

  // set SNRNoiseFigure CURRENT_VALUE
  p.setSNR(cif7val1, CURRENT_VALUE);
  p.setNoiseFigure(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setSNRNoiseFigure(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setSNRNoiseFigure(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSNRNoiseFigure(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setSNRNoiseFigure(val1,CURRENT) field val1bits", cif7val1bits, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getSNR(CURRENT) field val1", cif7val1, p.getSNR(CURRENT_VALUE), (float)0.001);
  assertEquals("getNoiseFigure(CURRENT) field val1", cif7val1, p.getNoiseFigure(CURRENT_VALUE), (float)0.001);

  // set SNRNoiseFigure MIN_VALUE
  p.setSNR(cif7val3, MIN_VALUE);
  p.setNoiseFigure(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setSNRNoiseFigure(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setSNRNoiseFigure(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSNRNoiseFigure(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setSNRNoiseFigure(val3,MIN) field val3bits", cif7val3bits, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getSNR(MIN) field val3", cif7val3, p.getSNR(MIN_VALUE), (float)0.001);
  assertEquals("getNoiseFigure(MIN) field val3", cif7val3, p.getNoiseFigure(MIN_VALUE), (float)0.001);

  // set SNRNoiseFigure MAX_VALUE
  p.setSNR(cif7val2, MAX_VALUE);
  p.setNoiseFigure(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setSNRNoiseFigure(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setSNRNoiseFigure(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSNRNoiseFigure(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setSNRNoiseFigure(val2,MAX) field val2bits", cif7val2bits, VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("getSNR(MAX) field val2", cif7val2, p.getSNR(MAX_VALUE), (float)0.001);
  assertEquals("getNoiseFigure(MAX) field val2", cif7val2, p.getNoiseFigure(MAX_VALUE), (float)0.001);

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    cif7val3bits,    VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    cif7val2bits,    VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getSNR(MIN) field val3",     cif7val3,    p.getSNR(MIN_VALUE), (float)0.001);
  assertEquals("getNoiseFigure(MIN) field val3",     cif7val3,    p.getNoiseFigure(MIN_VALUE), (float)0.001);
  assertEquals("getSNR(MAX) field val2",     cif7val2,    p.getSNR(MAX_VALUE), (float)0.001);
  assertEquals("getNoiseFigure(MAX) field val2",     cif7val2,    p.getNoiseFigure(MAX_VALUE), (float)0.001);
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

// void BasicQueryAcknowledgePacketTest::testSetSecondOrderInputInterceptPoint () { } // tested by testSetInputInterceptPoint
// void BasicQueryAcknowledgePacketTest::testSetThirdOrderInputInterceptPoint () { } // tested by testSetInputInterceptPoint

void BasicQueryAcknowledgePacketTest::testSetInputInterceptPoint () {
  // CIF1 bit 17
  const size_t CIF = 1;
  const size_t CIF_bit = 17;

  const float   val1     = 2.0;
  const int32_t val1bits = 0x01000100;
  const float   val2     = 1.0;
  const int32_t val2bits = 0x00800080;
  const float   val3     = 0.0078125;
  const int32_t val3bits = 0x00010001;
  const float   val4     = -1.0;
  const int32_t val4bits = 0xFF80FF80;
  const float   val5     = -0.0078125;
  const int32_t val5bits = 0xFFFFFFFF;
  const int32_t val6bits = 0x00010080; // 3rd=val2 and 2nd=val3
  const int32_t val7bits = 0xFF800080; // 3rd=val2 and 2nd=val4
  const int32_t val8bits = 0x0080FF80; // 3rd=val4 and 2nd=val2

  const int32_t size = 4;

  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF1 for InputInterceptPoint
  p.addCIF1();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getSecondOrderInputInterceptPoint() field null", FLOAT_NAN, p.getSecondOrderInputInterceptPoint());
  assertEquals("getThirdOrderInputInterceptPoint() field null", FLOAT_NAN, p.getThirdOrderInputInterceptPoint());

  // set SecondOrderInputInterceptPoint of CIF1
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setSecondOrderInputInterceptPoint(val1);
  //p.setThirdOrderInputInterceptPoint(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setSecondOrderInputInterceptPoint(val1) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSecondOrderInputInterceptPoint(val1) pkt len", len1+size, len2);
  assertEquals("setSecondOrderInputInterceptPoint(val1) field val1bits", val1bits&0xFFFF0000, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getSecondOrderInputInterceptPoint() field val1", val1, p.getSecondOrderInputInterceptPoint(), (float)0.001);
  assertEquals("getThirdOrderInputInterceptPoint() field 0", (float)0.0, p.getThirdOrderInputInterceptPoint(), (float)0.001);

  // set InputInterceptPoint of CIF1 again
  p.setSecondOrderInputInterceptPoint(val2);
  p.setThirdOrderInputInterceptPoint(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setInputInterceptPoint(val2) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setInputInterceptPoint(val2) pkt len", len2, len3);
  assertEquals("setInputInterceptPoint(val2) field val2bits", val2bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getSecondOrderInputInterceptPoint() field val2", val2, p.getSecondOrderInputInterceptPoint(), (float)0.001);
  assertEquals("getThirdOrderInputInterceptPoint() field val2", val2, p.getThirdOrderInputInterceptPoint(), (float)0.001);

  // set InputInterceptPoint of CIF1 again... switch order
  p.setThirdOrderInputInterceptPoint(val3);
  p.setSecondOrderInputInterceptPoint(val3);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setInputInterceptPoint(val3) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setInputInterceptPoint(val3) pkt len", len2, len4);
  assertEquals("setInputInterceptPoint(val3) field val3bits", val3bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getSecondOrderInputInterceptPoint() field val3", val3, p.getSecondOrderInputInterceptPoint(), (float)0.001);
  assertEquals("getThirdOrderInputInterceptPoint() field val3", val3, p.getThirdOrderInputInterceptPoint(), (float)0.001);

  // set InputInterceptPoint of CIF1 again
  p.setThirdOrderInputInterceptPoint(val4);
  p.setSecondOrderInputInterceptPoint(val4);
  int32_t len5 = p.getPayloadLength();
  assertEquals("setInputInterceptPoint(val4) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setInputInterceptPoint(val4) pkt len", len2, len5);
  assertEquals("setInputInterceptPoint(val4) field val4bits", val4bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getSecondOrderInputInterceptPoint() field val4", val4, p.getSecondOrderInputInterceptPoint(), (float)0.001);
  assertEquals("getThirdOrderInputInterceptPoint() field val4", val4, p.getThirdOrderInputInterceptPoint(), (float)0.001);

  // set InputInterceptPoint of CIF1 again.. switch order back
  p.setSecondOrderInputInterceptPoint(val5);
  p.setThirdOrderInputInterceptPoint(val5);
  int32_t len6 = p.getPayloadLength();
  assertEquals("setInputInterceptPoint(val5) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setInputInterceptPoint(val5) pkt len", len2, len6);
  assertEquals("setInputInterceptPoint(val5) field val5bits", val5bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getSecondOrderInputInterceptPoint() field val5", val5, p.getSecondOrderInputInterceptPoint(), (float)0.001);
  assertEquals("getThirdOrderInputInterceptPoint() field val5", val5, p.getThirdOrderInputInterceptPoint(), (float)0.001);

  // Make sure gain values are in correct place (VRT-39) [Gain 1 in lower-order
  // bits and Gain 2 in the higher-order bits.]
  // val6bits = 0x00010080; // 3rd=val2 and 2nd=val3
  p.setThirdOrderInputInterceptPoint(val2);
  p.setSecondOrderInputInterceptPoint(val3);
  assertEquals("setInputInterceptPoint(val6) field val6bits", val6bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getThirdOrderInputInterceptPoint() field val6", val2, p.getThirdOrderInputInterceptPoint(), (float)0.001);
  assertEquals("getSecondOrderInputInterceptPoint() field val6", val3, p.getSecondOrderInputInterceptPoint(), (float)0.001);

  // Make sure setting individual gain values works
  // val7bits = 0xFF800080; // 3rd=val2 and 2nd=val4
  p.setThirdOrderInputInterceptPoint(val2);
  p.setSecondOrderInputInterceptPoint(val4);
  assertEquals("setInputInterceptPoint(val7) field val7bits", val7bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getThirdOrderInputInterceptPoint() field val7", val2, p.getThirdOrderInputInterceptPoint(), (float)0.001);
  assertEquals("getSecondOrderInputInterceptPoint() field val7", val4, p.getSecondOrderInputInterceptPoint(), (float)0.001);

  // val8bits = 0x0080FF80; // 3rd=val4 and 2nd=val2
  p.setThirdOrderInputInterceptPoint(val4);
  p.setSecondOrderInputInterceptPoint(val2);
  assertEquals("setInputInterceptPoint(val8) field val8bits", val8bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getThirdOrderInputInterceptPoint() field val8", val4, p.getThirdOrderInputInterceptPoint(), (float)0.001);
  assertEquals("getSecondOrderInputInterceptPoint() field val8", val2, p.getSecondOrderInputInterceptPoint(), (float)0.001);

  // unset SecondOrderInputInterceptPoint of CIF1
  p.setSecondOrderInputInterceptPoint(FLOAT_NAN);
  int32_t len7 = p.getPayloadLength();
  assertEquals("setInputInterceptPoint(null) CIF1 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setInputInterceptPoint(null) CIF1 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setInputInterceptPoint(null) pkt len", len1, len7);
  assertEquals("getThirdOrderInputInterceptPoint() field null", FLOAT_NAN, p.getThirdOrderInputInterceptPoint());
  assertEquals("getSecondOrderInputInterceptPoint() field null", FLOAT_NAN, p.getSecondOrderInputInterceptPoint());

  // set ThirdOrderInputInterceptPoint of CIF1
  //Utilities::dumpBytes(p.getPayloadPointer(), len7);
  p.setThirdOrderInputInterceptPoint(val1);
  //p.setSecondOrderInputInterceptPoint(val1);
  int32_t len8 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8);
  assertEquals("setThirdOrderInputInterceptPoint(val1) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setThirdOrderInputInterceptPoint(val1) pkt len", len7+size, len8);
  assertEquals("setThirdOrderInputInterceptPoint(val1) field val1bits", val1bits&0x0000FFFF, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getThirdOrderInputInterceptPoint() field val1", val1, p.getThirdOrderInputInterceptPoint(), (float)0.001);
  assertEquals("getSecondOrderInputInterceptPoint() field 0", (float)0.0, p.getSecondOrderInputInterceptPoint(), (float)0.001);

  // unset ThirdOrderInputInterceptPoint of CIF1
  p.setThirdOrderInputInterceptPoint(FLOAT_NAN);
  int32_t len9 = p.getPayloadLength();
  assertEquals("setInputInterceptPoint(null) CIF1 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setInputInterceptPoint(null) CIF1 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setInputInterceptPoint(null) pkt len", len1, len9);
  assertEquals("getThirdOrderInputInterceptPoint() field null", FLOAT_NAN, p.getThirdOrderInputInterceptPoint());
  assertEquals("getSecondOrderInputInterceptPoint() field null", FLOAT_NAN, p.getSecondOrderInputInterceptPoint());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const float cif7val1 = val1;
  const int32_t cif7val1bits = val1bits;
  const float cif7val2 = val2;
  const int32_t cif7val2bits = val2bits;
  const float cif7val3 = val3;
  const int32_t cif7val3bits = val3bits;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getSecondOrderInputInterceptPoint() field null", FLOAT_NAN, p.getSecondOrderInputInterceptPoint());
  assertEquals("getThirdOrderInputInterceptPoint() field null", FLOAT_NAN, p.getThirdOrderInputInterceptPoint());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getSecondOrderInputInterceptPoint(CURRENT) field null", FLOAT_NAN, p.getSecondOrderInputInterceptPoint(CURRENT_VALUE));
  assertEquals("getThirdOrderInputInterceptPoint(CURRENT) field null", FLOAT_NAN, p.getThirdOrderInputInterceptPoint(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getSecondOrderInputInterceptPoint(MIN) field null", FLOAT_NAN, p.getSecondOrderInputInterceptPoint(MIN_VALUE));
  assertEquals("getThirdOrderInputInterceptPoint(MIN) field null", FLOAT_NAN, p.getThirdOrderInputInterceptPoint(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getSecondOrderInputInterceptPoint(MAX) field null", FLOAT_NAN, p.getSecondOrderInputInterceptPoint(MAX_VALUE));
  assertEquals("getThirdOrderInputInterceptPoint(MAX) field null", FLOAT_NAN, p.getThirdOrderInputInterceptPoint(MAX_VALUE));

  // set InputInterceptPoint CURRENT_VALUE
  p.setSecondOrderInputInterceptPoint(cif7val1, CURRENT_VALUE);
  p.setThirdOrderInputInterceptPoint(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setInputInterceptPoint(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setInputInterceptPoint(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setInputInterceptPoint(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setInputInterceptPoint(val1,CURRENT) field val1bits", cif7val1bits, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getSecondOrderInputInterceptPoint(CURRENT) field val1", cif7val1, p.getSecondOrderInputInterceptPoint(CURRENT_VALUE), (float)0.001);
  assertEquals("getThirdOrderInputInterceptPoint(CURRENT) field val1", cif7val1, p.getThirdOrderInputInterceptPoint(CURRENT_VALUE), (float)0.001);

  // set InputInterceptPoint MIN_VALUE
  p.setSecondOrderInputInterceptPoint(cif7val3, MIN_VALUE);
  p.setThirdOrderInputInterceptPoint(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setInputInterceptPoint(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setInputInterceptPoint(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setInputInterceptPoint(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setInputInterceptPoint(val3,MIN) field val3bits", cif7val3bits, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getSecondOrderInputInterceptPoint(MIN) field val3", cif7val3, p.getSecondOrderInputInterceptPoint(MIN_VALUE), (float)0.001);
  assertEquals("getThirdOrderInputInterceptPoint(MIN) field val3", cif7val3, p.getThirdOrderInputInterceptPoint(MIN_VALUE), (float)0.001);

  // set InputInterceptPoint MAX_VALUE
  p.setSecondOrderInputInterceptPoint(cif7val2, MAX_VALUE);
  p.setThirdOrderInputInterceptPoint(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setInputInterceptPoint(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setInputInterceptPoint(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setInputInterceptPoint(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setInputInterceptPoint(val2,MAX) field val2bits", cif7val2bits, VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("getSecondOrderInputInterceptPoint(MAX) field val2", cif7val2, p.getSecondOrderInputInterceptPoint(MAX_VALUE), (float)0.001);
  assertEquals("getThirdOrderInputInterceptPoint(MAX) field val2", cif7val2, p.getThirdOrderInputInterceptPoint(MAX_VALUE), (float)0.001);

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    cif7val3bits,    VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    cif7val2bits,    VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getSecondOrderInputInterceptPoint(MIN) field val3",     cif7val3,    p.getSecondOrderInputInterceptPoint(MIN_VALUE), (float)0.001);
  assertEquals("getThirdOrderInputInterceptPoint(MIN) field val3",     cif7val3,    p.getThirdOrderInputInterceptPoint(MIN_VALUE), (float)0.001);
  assertEquals("getSecondOrderInputInterceptPoint(MAX) field val2",     cif7val2,    p.getSecondOrderInputInterceptPoint(MAX_VALUE), (float)0.001);
  assertEquals("getThirdOrderInputInterceptPoint(MAX) field val2",     cif7val2,    p.getThirdOrderInputInterceptPoint(MAX_VALUE), (float)0.001);
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}
void BasicQueryAcknowledgePacketTest::testSetOneDecibelCompressionPoint () {
  // CIF1 bit 18
  const size_t CIF = 1;
  const size_t CIF_bit = 18;

  const float   val1     = 0.0;
  const int32_t val1bits = 0x00000000;
  const float   val2     = 1.0;
  const int32_t val2bits = 0x00000080;
  const float   val3     = 0.0078125;
  const int32_t val3bits = 0x00000001;
  const float   val4     = -1.0;
  const int32_t val4bits = 0x0000FF80;
  const float   val5     = -0.0078125;
  const int32_t val5bits = 0x0000FFFF;
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();
  
  const int32_t size = 4;

  // add CIF1 for OneDecibelCompressionPoint
  p.addCIF1();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getOneDecibelCompressionPoint() field null", FLOAT_NAN, p.getOneDecibelCompressionPoint());

  // set OneDecibelCompressionPoint of CIF1
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setOneDecibelCompressionPoint(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setOneDecibelCompressionPoint(val1) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setOneDecibelCompressionPoint(val1) pkt len", len1+size, len2);
  assertEquals("setOneDecibelCompressionPoint(val1) field val1bits", val1bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getOneDecibelCompressionPoint(val1) field val1", val1, p.getOneDecibelCompressionPoint());

  // set OneDecibelCompressionPoint of CIF1 again
  p.setOneDecibelCompressionPoint(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setOneDecibelCompressionPoint(val2) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setOneDecibelCompressionPoint(val2) pkt len", len2, len3);
  assertEquals("setOneDecibelCompressionPoint(val2) field val2bits", val2bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getOneDecibelCompressionPoint(val2) field val2", val2, p.getOneDecibelCompressionPoint());

  // set OneDecibelCompressionPoint of CIF1 again
  p.setOneDecibelCompressionPoint(val3);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setOneDecibelCompressionPoint(val3) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setOneDecibelCompressionPoint(val3) pkt len", len2, len4);
  assertEquals("setOneDecibelCompressionPoint(val3) field val3bits", val3bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getOneDecibelCompressionPoint(val3) field val3", val3, p.getOneDecibelCompressionPoint());

  // set OneDecibelCompressionPoint of CIF1 again
  p.setOneDecibelCompressionPoint(val4);
  int32_t len5 = p.getPayloadLength();
  assertEquals("setOneDecibelCompressionPoint(val4) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setOneDecibelCompressionPoint(val4) pkt len", len2, len5);
  assertEquals("setOneDecibelCompressionPoint(val4) field val4bits", val4bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getOneDecibelCompressionPoint(val4) field val4", val4, p.getOneDecibelCompressionPoint());

  // set OneDecibelCompressionPoint of CIF1 again
  p.setOneDecibelCompressionPoint(val5);
  int32_t len6 = p.getPayloadLength();
  assertEquals("setOneDecibelCompressionPoint(val5) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setOneDecibelCompressionPoint(val5) pkt len", len2, len6);
  assertEquals("setOneDecibelCompressionPoint(val5) field val5bits", val5bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getOneDecibelCompressionPoint(val5) field val5", val5, p.getOneDecibelCompressionPoint());

  // unset OneDecibelCompressionPoint of CIF1
  p.setOneDecibelCompressionPoint(FLOAT_NAN);
  int32_t len7 = p.getPayloadLength();
  assertEquals("setOneDecibelCompressionPoint(null) CIF1 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setOneDecibelCompressionPoint(null) CIF1 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setOneDecibelCompressionPoint(null) pkt len", len1, len7);
  assertEquals("setOneDecibelCompressionPoint(null) field null", FLOAT_NAN, p.getOneDecibelCompressionPoint());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const float cif7val1 = 0;
  const int32_t cif7val1bits = 0x0;
  const float cif7val2 = val1;
  const int32_t cif7val2bits = val1bits;
  const float cif7val3 = val2;
  const int32_t cif7val3bits = val2bits;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getOneDecibelCompressionPoint() field null", FLOAT_NAN, p.getOneDecibelCompressionPoint());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getOneDecibelCompressionPoint(CURRENT) field null", FLOAT_NAN, p.getOneDecibelCompressionPoint(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getOneDecibelCompressionPoint(MIN) field null", FLOAT_NAN, p.getOneDecibelCompressionPoint(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getOneDecibelCompressionPoint(MAX) field null", FLOAT_NAN, p.getOneDecibelCompressionPoint(MAX_VALUE));

  // set OneDecibelCompressionPoint CURRENT_VALUE
  p.setOneDecibelCompressionPoint(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setOneDecibelCompressionPoint(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setOneDecibelCompressionPoint(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setOneDecibelCompressionPoint(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setOneDecibelCompressionPoint(val1,CURRENT) field val1bits", cif7val1bits, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getOneDecibelCompressionPoint(CURRENT) field val1", cif7val1, p.getOneDecibelCompressionPoint(CURRENT_VALUE));

  // set OneDecibelCompressionPoint MIN_VALUE
  p.setOneDecibelCompressionPoint(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setOneDecibelCompressionPoint(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setOneDecibelCompressionPoint(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setOneDecibelCompressionPoint(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setOneDecibelCompressionPoint(val3,MIN) field val3bits", cif7val3bits, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getOneDecibelCompressionPoint(MIN) field val3", cif7val3, p.getOneDecibelCompressionPoint(MIN_VALUE));

  // set OneDecibelCompressionPoint MAX_VALUE
  p.setOneDecibelCompressionPoint(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setOneDecibelCompressionPoint(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setOneDecibelCompressionPoint(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setOneDecibelCompressionPoint(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setOneDecibelCompressionPoint(val2,MAX) field val2bits", cif7val2bits, VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("getOneDecibelCompressionPoint(MAX) field val2", cif7val2, p.getOneDecibelCompressionPoint(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    cif7val3bits,    VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    cif7val2bits,    VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getOneDecibelCompressionPoint(MIN) field val3",     cif7val3,    p.getOneDecibelCompressionPoint(MIN_VALUE));
  assertEquals("getOneDecibelCompressionPoint(MAX) field val2",     cif7val2,    p.getOneDecibelCompressionPoint(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetThreshold () {
  // CIF1 bit 19
  const size_t CIF = 1;
  const size_t CIF_bit = 19;

  const float   val1     = 0.0;
  const int32_t val1bits = 0x00000000;
  const float   val2     = 1.0;
  const int32_t val2bits = 0x00800080;
  const float   val3     = 0.0078125;
  const int32_t val3bits = 0x00010001;
  const float   val4     = -1.0;
  const int32_t val4bits = 0xFF80FF80;
  const float   val5     = -0.0078125;
  const int32_t val5bits = 0xFFFFFFFF;
  const int32_t val6bits = 0x00010080; // thresh1=val2 and thresh2=val3
  const int32_t val7bits = 0xFF800080; // thresh1=val2 and thresh2=val4
  const int32_t val8bits = 0x0080FF80; // thresh1=val4 and thresh2=val2

  const int32_t size = 4;

  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF1 for Threshold
  p.addCIF1();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getThreshold1() field null", FLOAT_NAN, p.getThreshold1());
  assertEquals("getThreshold2() field null", FLOAT_NAN, p.getThreshold2());

  // set Threshold of CIF1
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setThreshold(val1,val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setThreshold(val1) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setThreshold(val1) pkt len", len1+size, len2);
  assertEquals("setThreshold(val1) field val1bits", val1bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getThreshold1() field val1", val1, p.getThreshold1(), (float)0.001);
  assertEquals("getThreshold2() field val1", val1, p.getThreshold2(), (float)0.001);

  // set Threshold of CIF1 again
  p.setThreshold(val2,val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setThreshold(val2) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setThreshold(val2) pkt len", len2, len3);
  assertEquals("setThreshold(val2) field val2bits", val2bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getThreshold1() field val2", val2, p.getThreshold1(), (float)0.001);
  assertEquals("getThreshold2() field val2", val2, p.getThreshold2(), (float)0.001);

  // set Threshold of CIF1 again
  p.setThreshold(val3,val3);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setThreshold(val3) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setThreshold(val3) pkt len", len2, len4);
  assertEquals("setThreshold(val3) field val3bits", val3bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getThreshold1() field val3", val3, p.getThreshold1(), (float)0.001);
  assertEquals("getThreshold2() field val3", val3, p.getThreshold2(), (float)0.001);

  // set Threshold of CIF1 again
  p.setThreshold(val4,val4);
  int32_t len5 = p.getPayloadLength();
  assertEquals("setThreshold(val4) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setThreshold(val4) pkt len", len2, len5);
  assertEquals("setThreshold(val4) field val4bits", val4bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getThreshold1() field val4", val4, p.getThreshold1(), (float)0.001);
  assertEquals("getThreshold2() field val4", val4, p.getThreshold2(), (float)0.001);

  // set Threshold of CIF1 again
  p.setThreshold(val5,val5);
  int32_t len6 = p.getPayloadLength();
  assertEquals("setThreshold(val5) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setThreshold(val5) pkt len", len2, len6);
  assertEquals("setThreshold(val5) field val5bits", val5bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getThreshold1() field val5", val5, p.getThreshold1(), (float)0.001);
  assertEquals("getThreshold2() field val5", val5, p.getThreshold2(), (float)0.001);

  // Make sure threshold values are in correct place (VRT-39) [thresh 1 in lower-order
  // bits and thresh 2 in the higher-order bits.]
  // val6bits = 0x00010080; // thresh1=val2 and thresh2=val3
  p.setThreshold(val2, val3);
  assertEquals("setThreshold(val6) field val6bits", val6bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getThreshold1() field val6", val2, p.getThreshold1(), (float)0.001);
  assertEquals("getThreshold2() field val6", val3, p.getThreshold2(), (float)0.001);

  // Make sure setting individual threshold values works
  // val8bits = 0xFF800080; // thresh1=val2 and thresh2=val4
  p.setThreshold(val4, val4);
  p.setThreshold1(val2);
  assertEquals("setThreshold(val7) field val7bits", val7bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getThreshold1() field val7", val2, p.getThreshold1(), (float)0.001);
  assertEquals("getThreshold2() field val7", val4, p.getThreshold2(), (float)0.001);

  // val9bits = 0x0080FF80; // thresh1=val4 and thresh2=val2
  p.setThreshold(val4, val4);
  p.setThreshold2(val2);
  assertEquals("setThreshold(val8) field val8bits", val8bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getThreshold1() field val8", val4, p.getThreshold1(), (float)0.001);
  assertEquals("getThreshold2() field val8", val2, p.getThreshold2(), (float)0.001);

  // unset Threshold of CIF1
  p.setThreshold(FLOAT_NAN);
  int32_t len7 = p.getPayloadLength();
  assertEquals("setThreshold(null) CIF1 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setThreshold(null) CIF1 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setThreshold(null) pkt len", len1, len7);
  assertEquals("getThreshold1() field null", FLOAT_NAN, p.getThreshold1());
  assertEquals("getThreshold2() field null", FLOAT_NAN, p.getThreshold2());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const float cif7val1 = val1;
  const int32_t cif7val1bits = val1bits;
  const float cif7val2 = val2;
  const int32_t cif7val2bits = val2bits;
  const float cif7val3 = val3;
  const int32_t cif7val3bits = val3bits;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getThreshold1() field null", FLOAT_NAN, p.getThreshold1());
  assertEquals("getThreshold2() field null", FLOAT_NAN, p.getThreshold2());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getThreshold1(CURRENT) field null", FLOAT_NAN, p.getThreshold1(CURRENT_VALUE));
  assertEquals("getThreshold2(CURRENT) field null", FLOAT_NAN, p.getThreshold2(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getThreshold1(MIN) field null", FLOAT_NAN, p.getThreshold1(MIN_VALUE));
  assertEquals("getThreshold2(MIN) field null", FLOAT_NAN, p.getThreshold2(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getThreshold1(MAX) field null", FLOAT_NAN, p.getThreshold1(MAX_VALUE));
  assertEquals("getThreshold2(MAX) field null", FLOAT_NAN, p.getThreshold2(MAX_VALUE));

  // set Threshold CURRENT_VALUE
  p.setThreshold1(cif7val1, CURRENT_VALUE);
  p.setThreshold2(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setThreshold(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setThreshold(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setThreshold(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setThreshold(val1,CURRENT) field val1bits", cif7val1bits, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getThreshold1(CURRENT) field val1", cif7val1, p.getThreshold1(CURRENT_VALUE), (float)0.001);
  assertEquals("getThreshold2(CURRENT) field val1", cif7val1, p.getThreshold2(CURRENT_VALUE), (float)0.001);

  // set Threshold MIN_VALUE
  p.setThreshold1(cif7val3, MIN_VALUE);
  p.setThreshold2(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setThreshold(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setThreshold(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setThreshold(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setThreshold(val3,MIN) field val3bits", cif7val3bits, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getThreshold1(MIN) field val3", cif7val3, p.getThreshold1(MIN_VALUE), (float)0.001);
  assertEquals("getThreshold2(MIN) field val3", cif7val3, p.getThreshold2(MIN_VALUE), (float)0.001);

  // set Threshold MAX_VALUE
  p.setThreshold1(cif7val2, MAX_VALUE);
  p.setThreshold2(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setThreshold(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setThreshold(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setThreshold(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setThreshold(val2,MAX) field val2bits", cif7val2bits, VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("getThreshold1(MAX) field val2", cif7val2, p.getThreshold1(MAX_VALUE), (float)0.001);
  assertEquals("getThreshold2(MAX) field val2", cif7val2, p.getThreshold2(MAX_VALUE), (float)0.001);

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    cif7val3bits,    VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    cif7val2bits,    VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getThreshold1(MIN) field val3",     cif7val3,    p.getThreshold1(MIN_VALUE), (float)0.001);
  assertEquals("getThreshold2(MIN) field val3",     cif7val3,    p.getThreshold2(MIN_VALUE), (float)0.001);
  assertEquals("getThreshold1(MAX) field val2",     cif7val2,    p.getThreshold1(MAX_VALUE), (float)0.001);
  assertEquals("getThreshold2(MAX) field val2",     cif7val2,    p.getThreshold2(MAX_VALUE), (float)0.001);
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

//void BasicQueryAcknowledgePacketTest::testSetEbN0 () { } // tested by testSetEbN0BitErrorRate
//void BasicQueryAcknowledgePacketTest::testSetBitErrorRate () { } // tested by testSetEbN0BitErrorRate

void BasicQueryAcknowledgePacketTest::testSetEbN0BitErrorRate () {
  // CIF1 bit 20
  const size_t CIF = 1;
  const size_t CIF_bit = 20;

  const float   val1     = 2.0;
  const int32_t val1bits = 0x01000100;
  const float   val2     = 1.0;
  const int32_t val2bits = 0x00800080;
  const float   val3     = 0.0078125;
  const int32_t val3bits = 0x00010001;
  const float   val4     = -1.0;
  const int32_t val4bits = 0xFF80FF80;
  const float   val5     = -0.0078125;
  const int32_t val5bits = 0xFFFFFFFF;
  const int32_t val6bits = 0x00010080; // ber=val2 and EbN0=val3
  const int32_t val7bits = 0xFF800080; // ber=val2 and EbN0=val4
  const int32_t val8bits = 0x0080FF80; // ber=val4 and EbN0=val2

  const int32_t size = 4;

  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF1 for EbN0/BER
  p.addCIF1();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getEbN0() field null", FLOAT_NAN, p.getEbN0());
  assertEquals("getBitErrorRate() field null", FLOAT_NAN, p.getBitErrorRate());

  // set EbN0 of CIF1
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setEbN0(val1);
  //p.setBitErrorRate(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setEbN0(val1) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setEbN0(val1) pkt len", len1+size, len2);
  assertEquals("setEbN0(val1) field val1bits", val1bits&0xFFFF0000, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getEbN0() field val1", val1, p.getEbN0(), (float)0.001);
  assertEquals("getBitErrorRate() field 0", (float)0.0, p.getBitErrorRate(), (float)0.001);

  // set EbN0/BER of CIF1 again
  p.setEbN0(val2);
  p.setBitErrorRate(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setEbN0BitErrorRate(val2) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setEbN0BitErrorRate(val2) pkt len", len2, len3);
  assertEquals("setEbN0BitErrorRate(val2) field val2bits", val2bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getEbN0() field val2", val2, p.getEbN0(), (float)0.001);
  assertEquals("getBitErrorRate() field val2", val2, p.getBitErrorRate(), (float)0.001);

  // set EbN0/BER of CIF1 again... switch order
  p.setBitErrorRate(val3);
  p.setEbN0(val3);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setEbN0BitErrorRate(val3) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setEbN0BitErrorRate(val3) pkt len", len2, len4);
  assertEquals("setEbN0BitErrorRate(val3) field val3bits", val3bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getEbN0() field val3", val3, p.getEbN0(), (float)0.001);
  assertEquals("getBitErrorRate() field val3", val3, p.getBitErrorRate(), (float)0.001);

  // set EbN0/BER of CIF1 again
  p.setBitErrorRate(val4);
  p.setEbN0(val4);
  int32_t len5 = p.getPayloadLength();
  assertEquals("setEbN0BitErrorRate(val4) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setEbN0BitErrorRate(val4) pkt len", len2, len5);
  assertEquals("setEbN0BitErrorRate(val4) field val4bits", val4bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getEbN0() field val4", val4, p.getEbN0(), (float)0.001);
  assertEquals("getBitErrorRate() field val4", val4, p.getBitErrorRate(), (float)0.001);

  // set EbN0/BER of CIF1 again.. switch order back
  p.setEbN0(val5);
  p.setBitErrorRate(val5);
  int32_t len6 = p.getPayloadLength();
  assertEquals("setEbN0BitErrorRate(val5) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setEbN0BitErrorRate(val5) pkt len", len2, len6);
  assertEquals("setEbN0BitErrorRate(val5) field val5bits", val5bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getEbN0() field val5", val5, p.getEbN0(), (float)0.001);
  assertEquals("getBitErrorRate() field val5", val5, p.getBitErrorRate(), (float)0.001);

  // Make sure gain values are in correct place (VRT-39) [Gain 1 in lower-order
  // bits and Gain 2 in the higher-order bits.]
  // val6bits = 0x00010080; // ber=val2 and EbN0=val3
  p.setBitErrorRate(val2);
  p.setEbN0(val3);
  assertEquals("setEbN0BitErrorRate(val6) field val6bits", val6bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getBitErrorRate() field val6", val2, p.getBitErrorRate(), (float)0.001);
  assertEquals("getEbN0() field val6", val3, p.getEbN0(), (float)0.001);

  // Make sure setting individual gain values works
  // val7bits = 0xFF800080; // ber=val2 and EbN0=val4
  p.setBitErrorRate(val2);
  p.setEbN0(val4);
  assertEquals("setEbN0BitErrorRate(val7) field val7bits", val7bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getBitErrorRate() field val7", val2, p.getBitErrorRate(), (float)0.001);
  assertEquals("getEbN0() field val7", val4, p.getEbN0(), (float)0.001);

  // val8bits = 0x0080FF80; // ber=val4 and EbN0=val2
  p.setBitErrorRate(val4);
  p.setEbN0(val2);
  assertEquals("setEbN0BitErrorRate(val8) field val8bits", val8bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getBitErrorRate() field val8", val4, p.getBitErrorRate(), (float)0.001);
  assertEquals("getEbN0() field val8", val2, p.getEbN0(), (float)0.001);

  // unset EbN0 of CIF1
  p.setEbN0(FLOAT_NAN);
  int32_t len7 = p.getPayloadLength();
  assertEquals("setEbN0BitErrorRate(null) CIF1 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setEbN0BitErrorRate(null) CIF1 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setEbN0BitErrorRate(null) pkt len", len1, len7);
  assertEquals("getBitErrorRate() field null", FLOAT_NAN, p.getBitErrorRate());
  assertEquals("getEbN0() field null", FLOAT_NAN, p.getEbN0());

  // set BitErrorRate of CIF1
  //Utilities::dumpBytes(p.getPayloadPointer(), len7);
  p.setBitErrorRate(val1);
  //p.setEbN0(val1);
  int32_t len8 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8);
  assertEquals("setBitErrorRate(val1) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setBitErrorRate(val1) pkt len", len7+size, len8);
  assertEquals("setBitErrorRate(val1) field val1bits", val1bits&0x0000FFFF, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getBitErrorRate() field val1", val1, p.getBitErrorRate(), (float)0.001);
  assertEquals("getEbN0() field 0", (float)0.0, p.getEbN0(), (float)0.001);

  // unset BitErrorRate of CIF1
  p.setBitErrorRate(FLOAT_NAN);
  int32_t len9 = p.getPayloadLength();
  assertEquals("setEbN0BitErrorRate(null) CIF1 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setEbN0BitErrorRate(null) CIF1 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setEbN0BitErrorRate(null) pkt len", len1, len9);
  assertEquals("getBitErrorRate() field null", FLOAT_NAN, p.getBitErrorRate());
  assertEquals("getEbN0() field null", FLOAT_NAN, p.getEbN0());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const float cif7val1 = val1;
  const int32_t cif7val1bits = val1bits;
  const float cif7val2 = val2;
  const int32_t cif7val2bits = val2bits;
  const float cif7val3 = val3;
  const int32_t cif7val3bits = val3bits;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getBitErrorRate() field null", FLOAT_NAN, p.getBitErrorRate());
  assertEquals("getEbN0() field null", FLOAT_NAN, p.getEbN0());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getBitErrorRate(CURRENT) field null", FLOAT_NAN, p.getBitErrorRate(CURRENT_VALUE));
  assertEquals("getEbN0(CURRENT) field null", FLOAT_NAN, p.getEbN0(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getBitErrorRate(MIN) field null", FLOAT_NAN, p.getBitErrorRate(MIN_VALUE));
  assertEquals("getEbN0(MIN) field null", FLOAT_NAN, p.getEbN0(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getBitErrorRate(MAX) field null", FLOAT_NAN, p.getBitErrorRate(MAX_VALUE));
  assertEquals("getEbN0(MAX) field null", FLOAT_NAN, p.getEbN0(MAX_VALUE));

  // set EbN0BitErrorRate CURRENT_VALUE
  p.setBitErrorRate(cif7val1, CURRENT_VALUE);
  p.setEbN0(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setEbN0BitErrorRate(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setEbN0BitErrorRate(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setEbN0BitErrorRate(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setEbN0BitErrorRate(val1,CURRENT) field val1bits", cif7val1bits, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getBitErrorRate(CURRENT) field val1", cif7val1, p.getBitErrorRate(CURRENT_VALUE), (float)0.001);
  assertEquals("getEbN0(CURRENT) field val1", cif7val1, p.getEbN0(CURRENT_VALUE), (float)0.001);

  // set EbN0BitErrorRate MIN_VALUE
  p.setBitErrorRate(cif7val3, MIN_VALUE);
  p.setEbN0(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setEbN0BitErrorRate(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setEbN0BitErrorRate(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setEbN0BitErrorRate(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setEbN0BitErrorRate(val3,MIN) field val3bits", cif7val3bits, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getBitErrorRate(MIN) field val3", cif7val3, p.getBitErrorRate(MIN_VALUE), (float)0.001);
  assertEquals("getEbN0(MIN) field val3", cif7val3, p.getEbN0(MIN_VALUE), (float)0.001);

  // set EbN0BitErrorRate MAX_VALUE
  p.setBitErrorRate(cif7val2, MAX_VALUE);
  p.setEbN0(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setEbN0BitErrorRate(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setEbN0BitErrorRate(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setEbN0BitErrorRate(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setEbN0BitErrorRate(val2,MAX) field val2bits", cif7val2bits, VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("getBitErrorRate(MAX) field val2", cif7val2, p.getBitErrorRate(MAX_VALUE), (float)0.001);
  assertEquals("getEbN0(MAX) field val2", cif7val2, p.getEbN0(MAX_VALUE), (float)0.001);

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    cif7val3bits,    VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    cif7val2bits,    VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getBitErrorRate(MIN) field val3",     cif7val3,    p.getBitErrorRate(MIN_VALUE), (float)0.001);
  assertEquals("getEbN0(MIN) field val3",     cif7val3,    p.getEbN0(MIN_VALUE), (float)0.001);
  assertEquals("getBitErrorRate(MAX) field val2",     cif7val2,    p.getBitErrorRate(MAX_VALUE), (float)0.001);
  assertEquals("getEbN0(MAX) field val2",     cif7val2,    p.getEbN0(MAX_VALUE), (float)0.001);
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetRange () {
  // CIF1 bit 24
  const size_t CIF = 1;
  const size_t CIF_bit = 24;

  const double  val1 = 1.0;
  const int32_t val1bits = 0x00000040;
  const double  val2 = 0.015625;
  const int32_t val2bits = 0x00000001;
  const double  val3 = 15.5;
  const int32_t val3bits = 0x000003E0;
  const int32_t mask = 0xFFFFFFFF;
  const int32_t size = 4;
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF1
  p.addCIF1();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getRange() field null", DOUBLE_NAN, p.getRange());

  // set Range of CIF1
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setRange(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setRange(val1) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setRange(val1) pkt len", len1+size, len2);
  assertEquals("setRange(val1) field val1bits", val1bits&mask, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getRange(val1) field val1", val1, p.getRange(), 0.015625);

  // set Range of CIF1 again
  p.setRange(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setRange(val2) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setRange(val2) pkt len", len2, len3);
  assertEquals("setRange(val2) field val2bits", val2bits&mask, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getRange(val2) field val2", val2, p.getRange(), 0.015625);

  // set Range of CIF1 again
  p.setRange(val3);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setRange(val3) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setRange(val3) pkt len", len2, len4);
  assertEquals("setRange(val3) field val3bits", val3bits&mask, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getRange(val3) field val3", val3, p.getRange(), 0.015625);

  // unset Range of CIF1
  p.setRange(INT64_NULL);
  int32_t len5 = p.getPayloadLength();
  assertEquals("setRange(null) CIF1 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setRange(null) CIF1 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setRange(null) pkt len", len1, len5);
  assertEquals("setRange(null) field null", DOUBLE_NAN, p.getRange());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const double cif7val1 = 0;
  const int32_t cif7val1bits = 0x0;
  const double cif7val2 = val1;
  const int32_t cif7val2bits = val1bits;
  const double cif7val3 = val2;
  const int32_t cif7val3bits = val2bits;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getRange() field null", DOUBLE_NAN, p.getRange());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getRange(CURRENT) field null", DOUBLE_NAN, p.getRange(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getRange(MIN) field null", DOUBLE_NAN, p.getRange(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getRange(MAX) field null", DOUBLE_NAN, p.getRange(MAX_VALUE));

  // set Range CURRENT_VALUE
  p.setRange(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setRange(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setRange(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setRange(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setRange(val1,CURRENT) field val1bits", cif7val1bits, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getRange(CURRENT) field val1", cif7val1, p.getRange(CURRENT_VALUE), 0.015625);

  // set Range MIN_VALUE
  p.setRange(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setRange(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setRange(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setRange(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setRange(val3,MIN) field val3bits", cif7val3bits, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getRange(MIN) field val3", cif7val3, p.getRange(MIN_VALUE), 0.015625);

  // set Range MAX_VALUE
  p.setRange(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setRange(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setRange(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setRange(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setRange(val2,MAX) field val2bits", cif7val2bits, VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("getRange(MAX) field val2", cif7val2, p.getRange(MAX_VALUE), 0.015625);

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    cif7val3bits,    VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    cif7val2bits,    VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getRange(MIN) field val3",     cif7val3,    p.getRange(MIN_VALUE), 0.015625);
  assertEquals("getRange(MAX) field val2",     cif7val2,    p.getRange(MAX_VALUE), 0.015625);
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetBeamwidth () {
  // CIF1 bit 25
  const size_t CIF = 1;
  const size_t CIF_bit = 25;

  const float   val1      = 0.0;
  const int32_t val1bits  = 0x00000000; // h and v set to val1
  const float   val2      = 1.0;
  const int32_t val2bits1 = 0x00800000; // h  set to val2; v set to val1
  const int32_t val2bits2 = 0x00800080; // h and v set to val2
  const float   val3      = 0.0078125;
  const int32_t val3bits1 = 0x00800001; // h set to val2; v set to val3
  const int32_t val3bits2 = 0x00010001; // h and v set to val3
  const float   val4      = 360.0;
  const int32_t val4bits  = 0xB400B400; // h and v set to val4
  const float   val5      = 359.9921875;
  const int32_t val5bits  = 0xB3FFB3FF; // h and v set to val5

  const int32_t size = 4;

  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF1 for Beamwidth
  p.addCIF1();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getHorizontalBeamwidth() field null", FLOAT_NAN, p.getHorizontalBeamwidth());
  assertEquals("getVerticalBeamwidth() field null",   FLOAT_NAN, p.getVerticalBeamwidth());

  // set Beamwidth of CIF1
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setBeamwidth(val1,val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setBeamwidth(val1) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setBeamwidth(val1) pkt len", len1+size, len2);
  assertEquals("setBeamwidth(val1) field val1bits",   val1bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getHorizontalBeamwidth() field val1", val1, p.getHorizontalBeamwidth());
  assertEquals("getVerticalBeamwidth() field val1",   val1, p.getVerticalBeamwidth());

  // set Horizontal then Vertical Beamwidth of CIF1 again
  p.setHorizontalBeamwidth(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setHorizontalBeamwidth(val2) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setHorizontalBeamwidth(val2) pkt len", len2, len3);
  assertEquals("setHorizontalBeamwidth(val2) field val2bits1", val2bits1, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getHorizontalBeamwidth() field val2",          val2, p.getHorizontalBeamwidth());
  assertEquals("getVerticalBeamwidth() field val1",            val1, p.getVerticalBeamwidth());
  p.setVerticalBeamwidth(val2);
  assertEquals("setVerticalBeamwidth(val2) field val2bits2", val2bits2, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getHorizontalBeamwidth() field val2",        val2, p.getHorizontalBeamwidth());
  assertEquals("getVerticalBeamwidth() field val2",          val2, p.getVerticalBeamwidth());

  // set Vertical then Horizontal Beamwidth of CIF1 again
  p.setVerticalBeamwidth(val3);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setVerticalBeamwidth(val3) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setVerticalBeamwidth(val3) pkt len", len2, len4);
  assertEquals("setVerticalBeamwidth(val3) field val3bits1", val3bits1, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getVerticalBeamwidth() field val3",          val3, p.getVerticalBeamwidth());
  assertEquals("getHorizontalBeamwidth() field val2",        val2, p.getHorizontalBeamwidth());
  p.setHorizontalBeamwidth(val3);
  assertEquals("setHorizontalBeamwidth(val3) field val3bits2", val3bits2, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getHorizontalBeamwidth() field val3",        val3, p.getHorizontalBeamwidth());
  assertEquals("getVerticalBeamwidth() field val3",          val3, p.getVerticalBeamwidth());

  // set both Horizontal and Vertical Beamwidth of CIF1 again
  p.setBeamwidth(val4, val4);
  int32_t len5 = p.getPayloadLength();
  assertEquals("setBeamwidth(val4) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setBeamwidth(val4) pkt len", len2, len5);
  assertEquals("setBeamwidth(val4) field val4bits",   val4bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getHorizontalBeamwidth() field val4", val4, p.getHorizontalBeamwidth());
  assertEquals("getVerticalBeamwidth() field val4",   val4, p.getVerticalBeamwidth());

  // set both H and V Beamwidth of CIF1 again
  p.setBeamwidth(val5, val5);
  int32_t len6 = p.getPayloadLength();
  assertEquals("setBeamwidth(val5) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setBeamwidth(val5) pkt len", len2, len6);
  assertEquals("setBeamwidth(val5) field val5bits",       val5bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getHorizontalBeamwidth() field val5",     val5, p.getHorizontalBeamwidth());
  assertEquals("getVerticalBeamwidth() field val5",       val5, p.getVerticalBeamwidth());

  // unset Beamwidth of CIF1
  p.setBeamwidth(FLOAT_NAN, FLOAT_NAN);
  int32_t len7 = p.getPayloadLength();
  assertEquals("setBeamwidth(null) CIF1 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setBeamwidth(null) CIF1 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setBeamwidth(null) pkt len", len1, len7);
  assertEquals("getHorizontalBeamwidth() field null", FLOAT_NAN, p.getHorizontalBeamwidth());
  assertEquals("getVerticalBeamwidth() field null",   FLOAT_NAN, p.getVerticalBeamwidth());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const float cif7val1 = val1;
  const int32_t cif7val1bits = val1bits;
  const float cif7val2 = val2;
  const int32_t cif7val2bits = val2bits2;
  const float cif7val3 = val3;
  const int32_t cif7val3bits = val3bits2;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getHorizontalBeamwidth() field null", FLOAT_NAN, p.getHorizontalBeamwidth());
  assertEquals("getVerticalBeamwidth() field null",   FLOAT_NAN, p.getVerticalBeamwidth());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getHorizontalBeamwidth(CURRENT) field null", FLOAT_NAN, p.getHorizontalBeamwidth(CURRENT_VALUE));
  assertEquals("getVerticalBeamwidth(CURRENT) field null",   FLOAT_NAN, p.getVerticalBeamwidth(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getHorizontalBeamwidth(MIN) field null", FLOAT_NAN, p.getHorizontalBeamwidth(MIN_VALUE));
  assertEquals("getVerticalBeamwidth(MIN) field null",   FLOAT_NAN, p.getVerticalBeamwidth(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getHorizontalBeamwidth(MAX) field null", FLOAT_NAN, p.getHorizontalBeamwidth(MAX_VALUE));
  assertEquals("getVerticalBeamwidth(MAX) field null",   FLOAT_NAN, p.getVerticalBeamwidth(MAX_VALUE));

  // set Beamwidth CURRENT_VALUE
  p.setBeamwidth(cif7val1, cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setBeamwidth(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setBeamwidth(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setBeamwidth(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setBeamwidth(val1,CURRENT) field val1bits", cif7val1bits, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getHorizontalBeamwidth(CURRENT) field val1", cif7val1, p.getHorizontalBeamwidth(CURRENT_VALUE));
  assertEquals("getVerticalBeamwidth(CURRENT) field val1",   cif7val1, p.getVerticalBeamwidth(CURRENT_VALUE));

  // set Beamwidth MIN_VALUE
  p.setBeamwidth(cif7val3, cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setBeamwidth(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setBeamwidth(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setBeamwidth(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setBeamwidth(val3,MIN) field val3bits", cif7val3bits, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getHorizontalBeamwidth(MIN) field val3", cif7val3, p.getHorizontalBeamwidth(MIN_VALUE));
  assertEquals("getVerticalBeamwidth(MIN) field val3",   cif7val3, p.getVerticalBeamwidth(MIN_VALUE));

  // set Beamwidth MAX_VALUE
  p.setBeamwidth(cif7val2, cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setBeamwidth(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setBeamwidth(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setBeamwidth(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setBeamwidth(val2,MAX) field val2bits", cif7val2bits, VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("getHorizontalBeamwidth(MAX) field val2", cif7val2, p.getHorizontalBeamwidth(MAX_VALUE));
  assertEquals("getVerticalBeamwidth(MAX) field val2",   cif7val2, p.getVerticalBeamwidth(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    cif7val3bits,    VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    cif7val2bits,    VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getHorizontalBeamwidth(MIN) field val3", cif7val3, p.getHorizontalBeamwidth(MIN_VALUE));
  assertEquals("getVerticalBeamwidth(MIN) field val3",   cif7val3, p.getVerticalBeamwidth(MIN_VALUE));
  assertEquals("getHorizontalBeamwidth(MAX) field val2", cif7val2, p.getHorizontalBeamwidth(MAX_VALUE));
  assertEquals("getVerticalBeamwidth(MAX) field val2",   cif7val2, p.getVerticalBeamwidth(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetSpatialReferenceType () {
  // CIF1 bit 26
  const size_t CIF = 1;
  const size_t CIF_bit = 26;

  const int32_t val1 = 0x12345678;
  const int32_t val2 = 0x87654321;
  const int32_t mask = 0xFFFFFFFF;
  const int32_t size = 4;
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF1 for Spatial Reference Type
  p.addCIF1();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getSpatialReferenceType() field null", INT32_NULL, p.getSpatialReferenceType());

  // set Spatial Reference Type of CIF1
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setSpatialReferenceType(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setSpatialReferenceType(val1) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSpatialReferenceType(val1) pkt len", len1+size, len2);
  assertEquals("setSpatialReferenceType(val1) field val1bits", (int32_t) (val1&mask), VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("setSpatialReferenceType(val1) field val1", val1, p.getSpatialReferenceType());

  // set Spatial Reference Type of CIF1 again
  p.setSpatialReferenceType(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setSpatialReferenceType(val2) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSpatialReferenceType(val2) pkt len", len2, len3);
  assertEquals("setSpatialReferenceType(val2) field val2bits", (int32_t) (val2&mask), VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("setSpatialReferenceType(val2) field val2", val2, p.getSpatialReferenceType());

  // unset Spatial Reference Type of CIF1
  p.setSpatialReferenceType(INT32_NULL);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setSpatialReferenceType(null) CIF1 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSpatialReferenceType(null) CIF1 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setSpatialReferenceType(null) pkt len", len1, len4);
  assertEquals("setSpatialReferenceType(null) field null", INT32_NULL, p.getSpatialReferenceType());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const int32_t cif7val1 = 0x0;
  const int32_t cif7val2 = val1;
  const int32_t cif7val3 = val2;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getSpatialReferenceType() field null", INT32_NULL, p.getSpatialReferenceType());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getSpatialReferenceType(CURRENT) field null", INT32_NULL, p.getSpatialReferenceType(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getSpatialReferenceType(MIN) field null", INT32_NULL, p.getSpatialReferenceType(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getSpatialReferenceType(MAX) field null", INT32_NULL, p.getSpatialReferenceType(MAX_VALUE));

  // set SpatialReferenceType CURRENT_VALUE
  p.setSpatialReferenceType(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setSpatialReferenceType(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setSpatialReferenceType(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSpatialReferenceType(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setSpatialReferenceType(val1,CURRENT) field val1bits", (int32_t)cif7val1&mask, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getSpatialReferenceType(CURRENT) field val1", cif7val1, p.getSpatialReferenceType(CURRENT_VALUE));

  // set SpatialReferenceType MIN_VALUE
  p.setSpatialReferenceType(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setSpatialReferenceType(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setSpatialReferenceType(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSpatialReferenceType(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setSpatialReferenceType(val3,MIN) field val3bits", (int32_t)mask&cif7val3, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getSpatialReferenceType(MIN) field val3", cif7val3, p.getSpatialReferenceType(MIN_VALUE));

  // set SpatialReferenceType MAX_VALUE
  p.setSpatialReferenceType(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setSpatialReferenceType(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setSpatialReferenceType(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSpatialReferenceType(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setSpatialReferenceType(val2,MAX) field val2bits", (int32_t)mask&cif7val2, VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("getSpatialReferenceType(MAX) field val2", cif7val2, p.getSpatialReferenceType(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    (int32_t)mask&cif7val3,    VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    (int32_t)mask&cif7val2,    VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getSpatialReferenceType(MIN) field val3",     cif7val3,    p.getSpatialReferenceType(MIN_VALUE));
  assertEquals("getSpatialReferenceType(MAX) field val2",     cif7val2,    p.getSpatialReferenceType(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetSpatialScanType () {
  // CIF1 bit 27
  const size_t CIF = 1;
  const size_t CIF_bit = 27;

  const int16_t val1 = 0x1234;
  const int16_t val2 = 0x4321;
  const int32_t mask = 0x0000FFFF;
  const int32_t size = 4;
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF1 for SpatialScanType
  p.addCIF1();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getSpatialScanType() field null", INT16_NULL, p.getSpatialScanType());

  // set SpatialScanType of CIF1
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setSpatialScanType(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setSpatialScanType(val1) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSpatialScanType(val1) pkt len", len1+size, len2);
  assertEquals("setSpatialScanType(val1) field val1bits", (int32_t) (val1&mask), VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("setSpatialScanType(val1) field val1", val1, p.getSpatialScanType());

  // set SpatialScanType of CIF1 again
  p.setSpatialScanType(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setSpatialScanType(val2) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSpatialScanType(val2) pkt len", len2, len3);
  assertEquals("setSpatialScanType(val2) field val2bits", (int32_t) (val2&mask), VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("setSpatialScanType(val2) field val2", val2, p.getSpatialScanType());

  // unset SpatialScanType of CIF1
  p.setSpatialScanType(INT16_NULL);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setSpatialScanType(null) CIF1 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSpatialScanType(null) CIF1 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setSpatialScanType(null) pkt len", len1, len4);
  assertEquals("setSpatialScanType(null) field null", INT16_NULL, p.getSpatialScanType());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const int16_t cif7val1 = 0x0;
  const int16_t cif7val2 = val1;
  const int16_t cif7val3 = val2;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getSpatialScanType() field null", INT16_NULL, p.getSpatialScanType());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getSpatialScanType(CURRENT) field null", INT16_NULL, p.getSpatialScanType(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getSpatialScanType(MIN) field null", INT16_NULL, p.getSpatialScanType(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getSpatialScanType(MAX) field null", INT16_NULL, p.getSpatialScanType(MAX_VALUE));

  // set SpatialScanType CURRENT_VALUE
  p.setSpatialScanType(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setSpatialScanType(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setSpatialScanType(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSpatialScanType(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setSpatialScanType(val1,CURRENT) field val1bits", (int32_t)cif7val1&mask, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getSpatialScanType(CURRENT) field val1", cif7val1, p.getSpatialScanType(CURRENT_VALUE));

  // set SpatialScanType MIN_VALUE
  p.setSpatialScanType(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setSpatialScanType(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setSpatialScanType(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSpatialScanType(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setSpatialScanType(val3,MIN) field val3bits", (int32_t)mask&cif7val3, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getSpatialScanType(MIN) field val3", cif7val3, p.getSpatialScanType(MIN_VALUE));

  // set SpatialScanType MAX_VALUE
  p.setSpatialScanType(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setSpatialScanType(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setSpatialScanType(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSpatialScanType(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setSpatialScanType(val2,MAX) field val2bits", (int32_t)mask&cif7val2, VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("getSpatialScanType(MAX) field val2", cif7val2, p.getSpatialScanType(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    (int32_t)mask&cif7val3,    VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    (int32_t)mask&cif7val2,    VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getSpatialScanType(MIN) field val3",     cif7val3,    p.getSpatialScanType(MIN_VALUE));
  assertEquals("getSpatialScanType(MAX) field val2",     cif7val2,    p.getSpatialScanType(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSet3DPointingVectorStructured () {
  // CIF 1 bit 28
  // ArrayOfRecords format
  // HeaderSize is either 0 or 1
  //   - Note: docs say 3 or 4, but that's inconsistent with definition of ArrayOfRecords, so ignoring that guidance
  //           3 or 4 must include the required 3 words of every ArrayOfRecords, which is incorrect.
  //           Get your ish together V49 spec people, this is absurd.
  //   - depends on whether optional App-Specific Header is included, which is a 32-bit word if so
  //   - optional App-Specific Header is a *Global* Index/Ref/Beam subfield
  // NumWords/Record is either 1 or 2
  //   - depends on whether optional Index/Ref/Beam subfield is included in each record
  // Bitmapped CIF subfield only uses bits 31 and 30
  //   - Bit 31: Set when each record includes the optional Index/Ref/Beam subfield
  //   - Bit 30: Always set; Indicates presence of 3D Pointing Vector subfield in each record, which is required
  // App-Specific header is optional 32-bit word
  //   - as mentioned above, this is a *Global* Index/Ref/Beam subfield
  // Each Record is at most 2 words
  //   - First 32-bit word is optional, and is the Index/Ref/Beam subfield
  //   - Second 32-bit word is required, and is the 3D Pointing Vector subfield
  // Index/Ref/Beam subfield
  //   - Bits 31..16: Record Index (optional; 0 when global or unused in records)
  //   - Bits 15..4: Reserved
  //   - Bits 3..2: Reference (00 not specified; 01 ECEF; 10 Platform centered; 11 Array centered)
  //   - Bits 1..0: Beam (00 not specified; 01 Beam or signal direction; 10 Null; 11 reserved)
  // 3D Pointing Vector subfield
  //   - Bits 31..16: Elevation angle in degrees; radix point to the right of bit 23; range [-90,90]
  //   - Bits 15..0: Azimuthal angle in degrees; radix point to the right of bit 7; range [0,512)
  const size_t CIF = 1;
  const size_t CIF_bit = 28;

  const int32_t recSize1 = 2;
  ArrayOfRecords val1;
  val1.setRecordSize(recSize1); // includes optional subfield as well as 3D Pointing Vector subfield
  const int32_t bitMappedInd1 = 0xC0000000; // same
  val1.setBitMappedIndicator(bitMappedInd1);
  char appSpecHdr1[4] = {0x00, 0x00, 0x00, 0x0D}; // Array centered; Beam or signal direction
  val1.setApplicationSpecificHeader((char*) &appSpecHdr1, 4);
  char buf1[8] = {0x00, 0x01, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80}; // index 1; ref/beam not specified; 1.0 for each angle
  Record rec1(recSize1*4);
  rec1.writeBytes((void*) &buf1);
  assertEquals("3DPointingVectorStructured(val1) recSize1", recSize1*4, rec1.getByteLength());
  assertEquals("3DPointingVectorStructured(val1) addRec1", true, val1.addRecord(rec1));
  char buf2[8] = {0x00, 0x02, 0x00, 0x06, 0x00, 0xC0, 0x00, 0xC0}; // index 2; ref=ECEF; beam=null; 1.5 for each angle
  Record rec2(recSize1*4);
  rec2.writeBytes((void*) &buf2);
  assertEquals("3DPointingVectorStructured(val1) addRec2", true, val1.addRecord(rec2));
  const int32_t val1size = 8*4;
  assertEquals("3DPointingVectorStructured(val1) val1size", val1size, val1.getTotalFieldSize()*4);

  const int32_t recSize2 = 1;
  ArrayOfRecords val2;
  val2.setRecordSize(recSize2); // includes only 3D Pointing Vector subfield
  const int32_t bitMappedInd2 = 0x40000000; // same
  val2.setBitMappedIndicator(bitMappedInd2);
  //val2.setApplicationSpecificHeader(..., 4); // no application specific header
  char buf3[4] = {0xFF, 0x80, 0xFF, 0x80}; // -1.0 for elevation; 511.0 for azimuthal
  Record rec3(recSize2*4);
  rec3.writeBytes((void*) &buf3);
  assertEquals("3DPointingVectorStructured(val2) addRec3", true, val2.addRecord(rec3));
  char buf4[4] = {0x01, 0x40, 0x01, 0x40}; // 2.5 for each angle
  Record rec4(recSize2*4);
  rec4.writeBytes((void*) &buf4);
  assertEquals("3DPointingVectorStructured(val2) addRec4", true, val2.addRecord(rec4));
  const int32_t val2size = 5*4;
  assertEquals("3DPointingVectorStructured(val2) val2size", val2size, val2.getTotalFieldSize()*4);

  const ArrayOfRecords nullval;

  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF1 for 3DPointingVectorStructured
  p.addCIF1();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("get3DPointingVectorStructured() field null", nullval, p.get3DPointingVectorStructured());

  // set 3DPointingVectorStructured of CIF1
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.set3DPointingVectorStructured(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("set3DPointingVectorStructured(val1) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("set3DPointingVectorStructured(val1) pkt len", len1+val1size, len2);
  assertEquals("set3DPointingVectorStructured(val1) field val1bits1", 0x00000008, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("set3DPointingVectorStructured(val1) field val1bits2", 0x01002002, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("set3DPointingVectorStructured(val1) field val1bits3", bitMappedInd1, VRTMath::unpackInt(p.getPayloadPointer(), 16));
  assertEquals("set3DPointingVectorStructured(val1) field val1bits4", 0x0000000D, VRTMath::unpackInt(p.getPayloadPointer(), 20));
  assertEquals("set3DPointingVectorStructured(val1) field val1rec1", 0x0001000000800080, VRTMath::unpackLong(p.getPayloadPointer(), 24));
  assertEquals("set3DPointingVectorStructured(val1) field val1rec2", 0x0002000600C000C0, VRTMath::unpackLong(p.getPayloadPointer(), 32));
  assertEquals("get3DPointingVectorStructured(val1) field val1", val1, p.get3DPointingVectorStructured());

  // set 3DPointingVectorStructured of CIF1 again
  p.set3DPointingVectorStructured(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("set3DPointingVectorStructured(val2) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("set3DPointingVectorStructured(val2) pkt len", len1+val2size, len3);
  assertEquals("get3DPointingVectorStructured(val2) field val2", val2, p.get3DPointingVectorStructured());

  // unset 3DPointingVectorStructured of CIF1
  p.set3DPointingVectorStructured(nullval);
  int32_t len4 = p.getPayloadLength();
  assertEquals("set3DPointingVectorStructured(null) CIF1 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("set3DPointingVectorStructured(null) CIF1 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("set3DPointingVectorStructured(null) pkt len", len1, len4);
  assertEquals("set3DPointingVectorStructured(null) field null", nullval, p.get3DPointingVectorStructured());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  ArrayOfRecords cif7val1 = val1;

  ArrayOfRecords cif7val2;
  cif7val2.setRecordSize(recSize1);
  cif7val2.setBitMappedIndicator(bitMappedInd1);
  cif7val2.setApplicationSpecificHeader((char*) &appSpecHdr1, 4);
  assertEquals("3DPointingVectorStructured(cif7val2) addRec2", true, cif7val2.addRecord(rec2));
  assertEquals("3DPointingVectorStructured(cif7val2) addRec1", true, cif7val2.addRecord(rec1));

  ArrayOfRecords cif7val3;
  cif7val3.setRecordSize(recSize1);
  cif7val3.setBitMappedIndicator(bitMappedInd1);
  cif7val3.setApplicationSpecificHeader((char*) &appSpecHdr1, 4);
  assertEquals("3DPointingVectorStructured(cif7val3) addRec2", true, cif7val3.addRecord(rec2));
  assertEquals("3DPointingVectorStructured(cif7val3)b addRec2", true, cif7val3.addRecord(rec2));

  const int32_t size = val1size;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("get3DPointingVectorStructured() field null", nullval, p.get3DPointingVectorStructured());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("get3DPointingVectorStructured(CURRENT) field null", nullval, p.get3DPointingVectorStructured(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("get3DPointingVectorStructured(MIN) field null", nullval, p.get3DPointingVectorStructured(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("get3DPointingVectorStructured(MAX) field null", nullval, p.get3DPointingVectorStructured(MAX_VALUE));

  // set 3DPointingVectorStructured CURRENT_VALUE
  p.set3DPointingVectorStructured(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("set3DPointingVectorStructured(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("set3DPointingVectorStructured(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("set3DPointingVectorStructured(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  //assertEquals("set3DPointingVectorStructured(val1,CURRENT) field val1bits", cif7val1, VRTMath::unpackUUID(p.getPayloadPointer(), 12));
  ArrayOfRecords tmp1;
  VRTMath::unpackRecord(p.getPayload(), 12, tmp1);
  assertEquals("set3DPointingVectorStructured(val1,CURRENT) field val1bits", cif7val1, tmp1);
  assertEquals("get3DPointingVectorStructured(CURRENT) field val1", cif7val1, p.get3DPointingVectorStructured(CURRENT_VALUE));

  // set 3DPointingVectorStructured MIN_VALUE
  p.set3DPointingVectorStructured(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("set3DPointingVectorStructured(val3,MIN) pkt len", len5b, len6b);
  assertEquals("set3DPointingVectorStructured(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("set3DPointingVectorStructured(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  //assertEquals("set3DPointingVectorStructured(val3,MIN) field val3bits", cif7val3, VRTMath::unpackUUID(p.getPayloadPointer(), 12+2*size));
  ArrayOfRecords tmp2;
  VRTMath::unpackRecord(p.getPayload(), 12+2*size, tmp2);
  assertEquals("set3DPointingVectorStructured(val3,MIN) field val3bits", cif7val3, tmp2);
  assertEquals("get3DPointingVectorStructured(MIN) field val3", cif7val3, p.get3DPointingVectorStructured(MIN_VALUE));

  // set 3DPointingVectorStructured MAX_VALUE
  p.set3DPointingVectorStructured(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("set3DPointingVectorStructured(val2,MAX) pkt len", len6b, len7b);
  assertEquals("set3DPointingVectorStructured(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("set3DPointingVectorStructured(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  //assertEquals("set3DPointingVectorStructured(val2,MAX) field val2bits", cif7val2, VRTMath::unpackUUID(p.getPayloadPointer(), 12+size));
  ArrayOfRecords tmp3;
  VRTMath::unpackRecord(p.getPayload(), 12+size, tmp3);
  assertEquals("set3DPointingVectorStructured(val2,MAX) field val2bits", cif7val2, tmp3);
  assertEquals("get3DPointingVectorStructured(MAX) field val2", cif7val2, p.get3DPointingVectorStructured(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  //assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    cif7val3,    VRTMath::unpackUUID(p.getPayloadPointer(), 12+size));
  ArrayOfRecords tmp4;
  VRTMath::unpackRecord(p.getPayload(), 12+size, tmp4);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits", cif7val3, tmp4);
  //assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    cif7val2,    VRTMath::unpackUUID(p.getPayloadPointer(), 12));
  ArrayOfRecords tmp5;
  VRTMath::unpackRecord(p.getPayload(), 12, tmp5);
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits", cif7val2, tmp5);
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("get3DPointingVectorStructured(MIN) field val3",     cif7val3,    p.get3DPointingVectorStructured(MIN_VALUE));
  assertEquals("get3DPointingVectorStructured(MAX) field val2",     cif7val2,    p.get3DPointingVectorStructured(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

//void BasicQueryAcknowledgePacketTest::testSet3DPointingVectorElevation () { } // tested by testSet3DPointingVector
//void BasicQueryAcknowledgePacketTest::testSet3DPointingVectorAzimuth () { } // tested by testSet3DPointingVector

void BasicQueryAcknowledgePacketTest::testSet3DPointingVector() {
  // CIF1 bit 29
  const size_t CIF = 1;
  const size_t CIF_bit = 29;

  // EL [-90,90] w/ resolution 0.0078125
  // AZ [0,511.9921875] w/ same resolution
  const float   val1     = 90.0;
  const int32_t val1bits = 0x2D002D00;
  const float   val2     = 1.0;
  const int32_t val2bits = 0x00800080;
  const float   val3     = 0.0078125;
  const int32_t val3bits = 0x00010001;
  const float   el4      = -1.0;
  const float   az4      = 511.0;
  const int32_t val4bits = 0xFF80FF80;
  const float   el5      = -0.0078125;
  const float   az5      = 511.9921875;
  const int32_t val5bits = 0xFFFFFFFF;
  const int32_t val6bits = 0x00010080; // az=val2 and el=val3
  const int32_t val7bits = 0xFF800080; // az=val2 and el=el4
  const int32_t val8bits = 0x0080FF80; // az=az4  and el=val2

  const int32_t size = 4;

  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF1 for 3DPointingVector
  p.addCIF1();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("get3DPointingVectorElevation() field null", FLOAT_NAN, p.get3DPointingVectorElevation());
  assertEquals("get3DPointingVectorAzimuth() field null", FLOAT_NAN, p.get3DPointingVectorAzimuth());

  // set 3DPointingVectorElevation of CIF1
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.set3DPointingVectorElevation(val1);
  //p.set3DPointingVectorAzimuth(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("set3DPointingVectorElevation(val1) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("set3DPointingVectorElevation(val1) pkt len", len1+size, len2);
  assertEquals("set3DPointingVectorElevation(val1) field val1bits", val1bits&0xFFFF0000, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("get3DPointingVectorElevation() field val1", val1, p.get3DPointingVectorElevation(), (float)0.0078125);
  assertEquals("get3DPointingVectorAzimuth() field 0", (float)0.0, p.get3DPointingVectorAzimuth(), (float)0.0078125);

  // set 3DPointingVector of CIF1 again
  p.set3DPointingVectorElevation(val2);
  p.set3DPointingVectorAzimuth(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("set3DPointingVector(val2) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("set3DPointingVector(val2) pkt len", len2, len3);
  assertEquals("set3DPointingVector(val2) field val2bits", val2bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("get3DPointingVectorElevation() field val2", val2, p.get3DPointingVectorElevation(), (float)0.0078125);
  assertEquals("get3DPointingVectorAzimuth() field val2", val2, p.get3DPointingVectorAzimuth(), (float)0.0078125);

  // set 3DPointingVector of CIF1 again... switch order
  p.set3DPointingVectorAzimuth(val3);
  p.set3DPointingVectorElevation(val3);
  int32_t len4 = p.getPayloadLength();
  assertEquals("set3DPointingVector(val3) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("set3DPointingVector(val3) pkt len", len2, len4);
  assertEquals("set3DPointingVector(val3) field val3bits", val3bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("get3DPointingVectorElevation() field val3", val3, p.get3DPointingVectorElevation(), (float)0.0078125);
  assertEquals("get3DPointingVectorAzimuth() field val3", val3, p.get3DPointingVectorAzimuth(), (float)0.0078125);

  // set 3DPointingVector of CIF1 again
  p.set3DPointingVectorAzimuth(az4);
  p.set3DPointingVectorElevation(el4);
  int32_t len5 = p.getPayloadLength();
  assertEquals("set3DPointingVector(val4) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("set3DPointingVector(val4) pkt len", len2, len5);
  assertEquals("set3DPointingVector(val4) field val4bits", val4bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("get3DPointingVectorElevation() field el4", el4, p.get3DPointingVectorElevation(), (float)0.0078125);
  assertEquals("get3DPointingVectorAzimuth() field az4", az4, p.get3DPointingVectorAzimuth(), (float)0.0078125);

  // set 3DPointingVector of CIF1 again.. switch order back
  p.set3DPointingVectorElevation(el5);
  p.set3DPointingVectorAzimuth(az5);
  int32_t len6 = p.getPayloadLength();
  assertEquals("set3DPointingVector(val5) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("set3DPointingVector(val5) pkt len", len2, len6);
  assertEquals("set3DPointingVector(val5) field val5bits", val5bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("get3DPointingVectorElevation() field el5", el5, p.get3DPointingVectorElevation(), (float)0.0078125);
  assertEquals("get3DPointingVectorAzimuth() field az5", az5, p.get3DPointingVectorAzimuth(), (float)0.0078125);

  // Make sure 3DPointingVector values are in correct place (VRT-39) [Az in lower-order
  // bits and El in the higher-order bits.]
  p.set3DPointingVectorAzimuth(val2);
  p.set3DPointingVectorElevation(val3);
  assertEquals("set3DPointingVector(val6) field val6bits", val6bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("get3DPointingVectorAzimuth() field val6", val2, p.get3DPointingVectorAzimuth(), (float)0.0078125);
  assertEquals("get3DPointingVectorElevation() field val6", val3, p.get3DPointingVectorElevation(), (float)0.0078125);

  // Make sure setting individual 3DPointingVector values works
  p.set3DPointingVectorAzimuth(val2);
  p.set3DPointingVectorElevation(el4);
  assertEquals("set3DPointingVector(val7) field val7bits", val7bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("get3DPointingVectorAzimuth() field val7", val2, p.get3DPointingVectorAzimuth(), (float)0.0078125);
  assertEquals("get3DPointingVectorElevation() field val7", el4, p.get3DPointingVectorElevation(), (float)0.0078125);

  p.set3DPointingVectorAzimuth(az4);
  p.set3DPointingVectorElevation(val2);
  assertEquals("set3DPointingVector(val8) field val8bits", val8bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("get3DPointingVectorAzimuth() field val8", az4, p.get3DPointingVectorAzimuth(), (float)0.0078125);
  assertEquals("get3DPointingVectorElevation() field val8", val2, p.get3DPointingVectorElevation(), (float)0.0078125);

  // unset 3DPointingVectorElevation of CIF1
  p.set3DPointingVectorElevation(FLOAT_NAN);
  int32_t len7 = p.getPayloadLength();
  assertEquals("set3DPointingVector(null) CIF1 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("set3DPointingVector(null) CIF1 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("set3DPointingVector(null) pkt len", len1, len7);
  assertEquals("get3DPointingVectorAzimuth() field null", FLOAT_NAN, p.get3DPointingVectorAzimuth());
  assertEquals("get3DPointingVectorElevation() field null", FLOAT_NAN, p.get3DPointingVectorElevation());

  // set 3DPointingVectorAzimuth of CIF1
  //Utilities::dumpBytes(p.getPayloadPointer(), len7);
  p.set3DPointingVectorAzimuth(val1);
  //p.set3DPointingVectorElevation(val1);
  int32_t len8 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8);
  assertEquals("set3DPointingVectorAzimuth(val1) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("set3DPointingVectorAzimuth(val1) pkt len", len7+size, len8);
  assertEquals("set3DPointingVectorAzimuth(val1) field val1bits", val1bits&0x0000FFFF, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("get3DPointingVectorAzimuth() field val1", val1, p.get3DPointingVectorAzimuth(), (float)0.0078125);
  assertEquals("get3DPointingVectorElevation() field 0", (float)0.0, p.get3DPointingVectorElevation(), (float)0.0078125);

  // unset Azimuth of CIF1
  p.set3DPointingVectorAzimuth(FLOAT_NAN);
  int32_t len9 = p.getPayloadLength();
  assertEquals("set3DPointingVector(null) CIF1 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("set3DPointingVector(null) CIF1 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("set3DPointingVector(null) pkt len", len1, len9);
  assertEquals("get3DPointingVectorAzimuth() field null", FLOAT_NAN, p.get3DPointingVectorAzimuth());
  assertEquals("get3DPointingVectorElevation() field null", FLOAT_NAN, p.get3DPointingVectorElevation());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const float cif7val1 = val1;
  const int32_t cif7val1bits = val1bits;
  const float cif7val2 = val2;
  const int32_t cif7val2bits = val2bits;
  const float cif7val3 = val3;
  const int32_t cif7val3bits = val3bits;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("get3DPointingVectorAzimuth() field null", FLOAT_NAN, p.get3DPointingVectorAzimuth());
  assertEquals("get3DPointingVectorElevation() field null", FLOAT_NAN, p.get3DPointingVectorElevation());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("get3DPointingVectorAzimuth(CURRENT) field null", FLOAT_NAN, p.get3DPointingVectorAzimuth(CURRENT_VALUE));
  assertEquals("get3DPointingVectorElevation(CURRENT) field null", FLOAT_NAN, p.get3DPointingVectorElevation(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("get3DPointingVectorAzimuth(MIN) field null", FLOAT_NAN, p.get3DPointingVectorAzimuth(MIN_VALUE));
  assertEquals("get3DPointingVectorElevation(MIN) field null", FLOAT_NAN, p.get3DPointingVectorElevation(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("get3DPointingVectorAzimuth(MAX) field null", FLOAT_NAN, p.get3DPointingVectorAzimuth(MAX_VALUE));
  assertEquals("get3DPointingVectorElevation(MAX) field null", FLOAT_NAN, p.get3DPointingVectorElevation(MAX_VALUE));

  // set 3DPointingVector CURRENT_VALUE
  p.set3DPointingVectorAzimuth(cif7val1, CURRENT_VALUE);
  p.set3DPointingVectorElevation(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("set3DPointingVector(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("set3DPointingVector(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("set3DPointingVector(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("set3DPointingVector(val1,CURRENT) field val1bits", cif7val1bits, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("get3DPointingVectorAzimuth(CURRENT) field val1", cif7val1, p.get3DPointingVectorAzimuth(CURRENT_VALUE), (float)0.0078125);
  assertEquals("get3DPointingVectorElevation(CURRENT) field val1", cif7val1, p.get3DPointingVectorElevation(CURRENT_VALUE), (float)0.0078125);

  // set 3DPointingVector MIN_VALUE
  p.set3DPointingVectorAzimuth(cif7val3, MIN_VALUE);
  p.set3DPointingVectorElevation(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("set3DPointingVector(val3,MIN) pkt len", len5b, len6b);
  assertEquals("set3DPointingVector(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("set3DPointingVector(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("set3DPointingVector(val3,MIN) field val3bits", cif7val3bits, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("get3DPointingVectorAzimuth(MIN) field val3", cif7val3, p.get3DPointingVectorAzimuth(MIN_VALUE), (float)0.0078125);
  assertEquals("get3DPointingVectorElevation(MIN) field val3", cif7val3, p.get3DPointingVectorElevation(MIN_VALUE), (float)0.0078125);

  // set 3DPointingVector MAX_VALUE
  p.set3DPointingVectorAzimuth(cif7val2, MAX_VALUE);
  p.set3DPointingVectorElevation(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("set3DPointingVector(val2,MAX) pkt len", len6b, len7b);
  assertEquals("set3DPointingVector(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("set3DPointingVector(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("set3DPointingVector(val2,MAX) field val2bits", cif7val2bits, VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("get3DPointingVectorAzimuth(MAX) field val2", cif7val2, p.get3DPointingVectorAzimuth(MAX_VALUE), (float)0.0078125);
  assertEquals("get3DPointingVectorElevation(MAX) field val2", cif7val2, p.get3DPointingVectorElevation(MAX_VALUE), (float)0.0078125);

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    cif7val3bits,    VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    cif7val2bits,    VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("get3DPointingVectorAzimuth(MIN) field val3",     cif7val3,    p.get3DPointingVectorAzimuth(MIN_VALUE), (float)0.0078125);
  assertEquals("get3DPointingVectorElevation(MIN) field val3",     cif7val3,    p.get3DPointingVectorElevation(MIN_VALUE), (float)0.0078125);
  assertEquals("get3DPointingVectorAzimuth(MAX) field val2",     cif7val2,    p.get3DPointingVectorAzimuth(MAX_VALUE), (float)0.0078125);
  assertEquals("get3DPointingVectorElevation(MAX) field val2",     cif7val2,    p.get3DPointingVectorElevation(MAX_VALUE), (float)0.0078125);
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

//void BasicQueryAcknowledgePacketTest::testSetPolarizationTiltAngle () { } // tested by testSetPolarizationAngle
//void BasicQueryAcknowledgePacketTest::testSetPolarizationEllipticityAngle () { } // tested by testSetPolarizationAngle

void BasicQueryAcknowledgePacketTest::testSetPolarizationAngle () {
  // CIF1 bit 30
  const size_t CIF = 1;
  const size_t CIF_bit = 30;

  // resolution of 0.0001220703125?
  const float   val1     = 2.0;
  const int32_t val1bits = 0x40004000;
  const float   val2     = 1.0;
  const int32_t val2bits = 0x20002000;
  //const float   val3     = 0.0078125;
  const float   val3     = 0.0001220703125;
  const int32_t val3bits = 0x00010001;
  const float   val4     = -1.0;
  const int32_t val4bits = 0xE000E000;
  //const float   val5     = -0.0078125;
  const float   val5     = -0.0001220703125;
  const int32_t val5bits = 0xFFFFFFFF;
  const int32_t val6bits = 0xE0002000; // ellipticity=val2 and tilt=val4
  const int32_t val7bits = 0x2000E000; // ellipticity=val4 and tilt=val2

  const int32_t size = 4;

  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF1 for PolarizaionAngle
  p.addCIF1();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getPolarizationTiltAngle() field null", FLOAT_NAN, p.getPolarizationTiltAngle());
  assertEquals("getPolarizationEllipticityAngle() field null", FLOAT_NAN, p.getPolarizationEllipticityAngle());

  // set PolarizationTiltAngle of CIF1
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setPolarizationTiltAngle(val1);
  //p.setPolarizationEllipticityAngle(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setPolarizationTiltAngle(val1) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setPolarizationTiltAngle(val1) pkt len", len1+size, len2);
  assertEquals("setPolarizationTiltAngle(val1) field val1bits", val1bits&0xFFFF0000, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getPolarizationTiltAngle() field val1", val1, p.getPolarizationTiltAngle(), (float)0.0001220703125);
  assertEquals("getPolarizationEllipticityAngle() field 0", (float)0.0, p.getPolarizationEllipticityAngle(), (float)0.0001220703125);

  // set PolarizaionAngle of CIF1 again
  p.setPolarizationTiltAngle(val2);
  p.setPolarizationEllipticityAngle(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setPolarizationAngle(val2) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setPolarizationAngle(val2) pkt len", len2, len3);
  assertEquals("setPolarizationAngle(val2) field val2bits", val2bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getPolarizationTiltAngle() field val2", val2, p.getPolarizationTiltAngle(), (float)0.0001220703125);
  assertEquals("getPolarizationEllipticityAngle() field val2", val2, p.getPolarizationEllipticityAngle(), (float)0.0001220703125);

  // set PolarizaionAngle of CIF1 again... switch order
  p.setPolarizationEllipticityAngle(val3);
  p.setPolarizationTiltAngle(val3);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setPolarizationAngle(val3) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setPolarizationAngle(val3) pkt len", len2, len4);
  assertEquals("setPolarizationAngle(val3) field val3bits", val3bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getPolarizationTiltAngle() field val3", val3, p.getPolarizationTiltAngle(), (float)0.0001220703125);
  assertEquals("getPolarizationEllipticityAngle() field val3", val3, p.getPolarizationEllipticityAngle(), (float)0.0001220703125);

  // set PolarizaionAngle of CIF1 again
  p.setPolarizationEllipticityAngle(val4);
  p.setPolarizationTiltAngle(val4);
  int32_t len5 = p.getPayloadLength();
  assertEquals("setPolarizationAngle(val4) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setPolarizationAngle(val4) pkt len", len2, len5);
  assertEquals("setPolarizationAngle(val4) field val4bits", val4bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getPolarizationTiltAngle() field val4", val4, p.getPolarizationTiltAngle(), (float)0.0001220703125);
  assertEquals("getPolarizationEllipticityAngle() field val4", val4, p.getPolarizationEllipticityAngle(), (float)0.0001220703125);

  // set PolarizaionAngle of CIF1 again.. switch order back
  p.setPolarizationTiltAngle(val5);
  p.setPolarizationEllipticityAngle(val5);
  int32_t len6 = p.getPayloadLength();
  assertEquals("setPolarizationAngle(val5) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setPolarizationAngle(val5) pkt len", len2, len6);
  assertEquals("setPolarizationAngle(val5) field val5bits", val5bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getPolarizationTiltAngle() field val5", val5, p.getPolarizationTiltAngle(), (float)0.0001220703125);
  assertEquals("getPolarizationEllipticityAngle() field val5", val5, p.getPolarizationEllipticityAngle(), (float)0.0001220703125);

  // Make sure gain values are in correct place (VRT-39) [Gain 1 in lower-order
  // bits and Gain 2 in the higher-order bits.]
  // Make sure setting individual gain values works
  // val6bits = 0xFF800080; // ellipticity=val2 and tilt=val4
  p.setPolarizationEllipticityAngle(val2);
  p.setPolarizationTiltAngle(val4);
  assertEquals("setPolarizationAngle(val6) field val6bits", val6bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getPolarizationEllipticityAngle() field val6", val2, p.getPolarizationEllipticityAngle(), (float)0.0001220703125);
  assertEquals("getPolarizationTiltAngle() field val6", val4, p.getPolarizationTiltAngle(), (float)0.0001220703125);

  // val8bits = 0x0080FF80; // ellipticity=val4 and tilt=val2
  p.setPolarizationEllipticityAngle(val4);
  p.setPolarizationTiltAngle(val2);
  assertEquals("setPolarizationAngle(val7) field val7bits", val7bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getPolarizationEllipticityAngle() field val7", val4, p.getPolarizationEllipticityAngle(), (float)0.0001220703125);
  assertEquals("getPolarizationTiltAngle() field val7", val2, p.getPolarizationTiltAngle(), (float)0.0001220703125);

  // unset PolarizationTiltAngle of CIF1
  p.setPolarizationTiltAngle(FLOAT_NAN);
  int32_t len7 = p.getPayloadLength();
  assertEquals("setPolarizationTiltAngle(null) CIF1 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setPolarizationTiltAngle(null) CIF1 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setPolarizationTiltAngle(null) pkt len", len1, len7);
  assertEquals("getPolarizationEllipticityAngle() field null", FLOAT_NAN, p.getPolarizationEllipticityAngle());
  assertEquals("getPolarizationTiltAngle() field null", FLOAT_NAN, p.getPolarizationTiltAngle());

  // set PolarizationEllipticityAngle of CIF1
  //Utilities::dumpBytes(p.getPayloadPointer(), len7);
  p.setPolarizationEllipticityAngle(val1);
  //p.setPolarizationTiltAngle(val1);
  int32_t len8 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8);
  assertEquals("setPolarizationEllipticityAngle(val1) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setPolarizationEllipticityAngle(val1) pkt len", len7+size, len8);
  assertEquals("setPolarizationEllipticityAngle(val1) field val1bits", val1bits&0x0000FFFF, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getPolarizationEllipticityAngle() field val1", val1, p.getPolarizationEllipticityAngle(), (float)0.0001220703125);
  assertEquals("getPolarizationTiltAngle() field 0", (float)0.0, p.getPolarizationTiltAngle(), (float)0.0001220703125);

  // unset PolarizationEllipticityAngle of CIF1
  p.setPolarizationEllipticityAngle(FLOAT_NAN);
  int32_t len9 = p.getPayloadLength();
  assertEquals("setPolarizationEllipticityAngle(null) CIF1 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setPolarizationEllipticityAngle(null) CIF1 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setPolarizationEllipticityAngle(null) pkt len", len1, len9);
  assertEquals("getPolarizationEllipticityAngle() field null", FLOAT_NAN, p.getPolarizationEllipticityAngle());
  assertEquals("getPolarizationTiltAngle() field null", FLOAT_NAN, p.getPolarizationTiltAngle());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const float cif7val1 = val1;
  const int32_t cif7val1bits = val1bits;
  const float cif7val2 = val2;
  const int32_t cif7val2bits = val2bits;
  const float cif7val3 = val3;
  const int32_t cif7val3bits = val3bits;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getPolarizationEllipticityAngle() field null", FLOAT_NAN, p.getPolarizationEllipticityAngle());
  assertEquals("getPolarizationTiltAngle() field null", FLOAT_NAN, p.getPolarizationTiltAngle());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getPolarizationEllipticityAngle(CURRENT) field null", FLOAT_NAN, p.getPolarizationEllipticityAngle(CURRENT_VALUE));
  assertEquals("getPolarizationTiltAngle(CURRENT) field null", FLOAT_NAN, p.getPolarizationTiltAngle(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getPolarizationEllipticityAngle(MIN) field null", FLOAT_NAN, p.getPolarizationEllipticityAngle(MIN_VALUE));
  assertEquals("getPolarizationTiltAngle(MIN) field null", FLOAT_NAN, p.getPolarizationTiltAngle(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getPolarizationEllipticityAngle(MAX) field null", FLOAT_NAN, p.getPolarizationEllipticityAngle(MAX_VALUE));
  assertEquals("getPolarizationTiltAngle(MAX) field null", FLOAT_NAN, p.getPolarizationTiltAngle(MAX_VALUE));

  // set PolarizationAngle CURRENT_VALUE
  p.setPolarizationEllipticityAngle(cif7val1, CURRENT_VALUE);
  p.setPolarizationTiltAngle(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setPolarizationAngle(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setPolarizationAngle(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setPolarizationAngle(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setPolarizationAngle(val1,CURRENT) field val1bits", cif7val1bits, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getPolarizationEllipticityAngle(CURRENT) field val1", cif7val1, p.getPolarizationEllipticityAngle(CURRENT_VALUE), (float)0.0001220703125);
  assertEquals("getPolarizationTiltAngle(CURRENT) field val1", cif7val1, p.getPolarizationTiltAngle(CURRENT_VALUE), (float)0.0001220703125);

  // set PolarizationAngle MIN_VALUE
  p.setPolarizationEllipticityAngle(cif7val3, MIN_VALUE);
  p.setPolarizationTiltAngle(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setPolarizationAngle(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setPolarizationAngle(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setPolarizationAngle(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setPolarizationAngle(val3,MIN) field val3bits", cif7val3bits, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getPolarizationEllipticityAngle(MIN) field val3", cif7val3, p.getPolarizationEllipticityAngle(MIN_VALUE), (float)0.0001220703125);
  assertEquals("getPolarizationTiltAngle(MIN) field val3", cif7val3, p.getPolarizationTiltAngle(MIN_VALUE), (float)0.0001220703125);

  // set PolarizationAngle MAX_VALUE
  p.setPolarizationEllipticityAngle(cif7val2, MAX_VALUE);
  p.setPolarizationTiltAngle(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setPolarizationAngle(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setPolarizationAngle(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setPolarizationAngle(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setPolarizationAngle(val2,MAX) field val2bits", cif7val2bits, VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("getPolarizationEllipticityAngle(MAX) field val2", cif7val2, p.getPolarizationEllipticityAngle(MAX_VALUE), (float)0.0001220703125);
  assertEquals("getPolarizationTiltAngle(MAX) field val2", cif7val2, p.getPolarizationTiltAngle(MAX_VALUE), (float)0.0001220703125);

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    cif7val3bits,    VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    cif7val2bits,    VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getPolarizationEllipticityAngle(MIN) field val3",     cif7val3,    p.getPolarizationEllipticityAngle(MIN_VALUE), (float)0.0001220703125);
  assertEquals("getPolarizationTiltAngle(MIN) field val3",     cif7val3,    p.getPolarizationTiltAngle(MIN_VALUE), (float)0.0001220703125);
  assertEquals("getPolarizationEllipticityAngle(MAX) field val2",     cif7val2,    p.getPolarizationEllipticityAngle(MAX_VALUE), (float)0.0001220703125);
  assertEquals("getPolarizationTiltAngle(MAX) field val2",     cif7val2,    p.getPolarizationTiltAngle(MAX_VALUE), (float)0.0001220703125);
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}


void BasicQueryAcknowledgePacketTest::testSetPhaseOffset () {
  // CIF1 bit 31
  const size_t CIF = 1;
  const size_t CIF_bit = 31;

  const float   val1     = 0.0;
  const int32_t val1bits = 0x00000000;
  const float   val2     = 1.0;
  const int32_t val2bits = 0x00000080;
  const float   val3     = 0.0078125;
  const int32_t val3bits = 0x00000001;
  const float   val4     = -1.0;
  const int32_t val4bits = 0x0000FF80;
  const float   val5     = -0.0078125;
  const int32_t val5bits = 0x0000FFFF;

  const int32_t size = 4;

  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF1 for PhaseOffset
  p.addCIF1();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getPhaseOffset() field null", FLOAT_NAN, p.getPhaseOffset());

  // set PhaseOffset of CIF1
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setPhaseOffset(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setPhaseOffset(val1) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setPhaseOffset(val1) pkt len", len1+size, len2);
  assertEquals("setPhaseOffset(val1) field val1bits", val1bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getPhaseOffset(val1) field val1", val1, p.getPhaseOffset());

  // set PhaseOffset of CIF1 again
  p.setPhaseOffset(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setPhaseOffset(val2) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setPhaseOffset(val2) pkt len", len2, len3);
  assertEquals("setPhaseOffset(val2) field val2bits", val2bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getPhaseOffset(val2) field val2", val2, p.getPhaseOffset());

  // set PhaseOffset of CIF1 again
  p.setPhaseOffset(val3);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setPhaseOffset(val3) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setPhaseOffset(val3) pkt len", len2, len4);
  assertEquals("setPhaseOffset(val3) field val3bits", val3bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getPhaseOffset(val3) field val3", val3, p.getPhaseOffset());

  // set PhaseOffset of CIF1 again
  p.setPhaseOffset(val4);
  int32_t len5 = p.getPayloadLength();
  assertEquals("setPhaseOffset(val4) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setPhaseOffset(val4) pkt len", len2, len5);
  assertEquals("setPhaseOffset(val4) field val4bits", val4bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getPhaseOffset(val4) field val4", val4, p.getPhaseOffset());

  // set PhaseOffset of CIF1 again
  p.setPhaseOffset(val5);
  int32_t len6 = p.getPayloadLength();
  assertEquals("setPhaseOffset(val5) CIF1 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setPhaseOffset(val5) pkt len", len2, len6);
  assertEquals("setPhaseOffset(val5) field val5bits", val5bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getPhaseOffset(val5) field val5", val5, p.getPhaseOffset());

  // unset PhaseOffset of CIF1
  p.setPhaseOffset(FLOAT_NAN);
  int32_t len7 = p.getPayloadLength();
  assertEquals("setPhaseOffset(null) CIF1 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setPhaseOffset(null) CIF1 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setPhaseOffset(null) pkt len", len1, len7);
  assertEquals("setPhaseOffset(null) field null", FLOAT_NAN, p.getPhaseOffset());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const float cif7val1 = 0;
  const int32_t cif7val1bits = 0x0;
  const float cif7val2 = val1;
  const int32_t cif7val2bits = val1bits;
  const float cif7val3 = val2;
  const int32_t cif7val3bits = val2bits;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getPhaseOffset() field null", FLOAT_NAN, p.getPhaseOffset());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getPhaseOffset(CURRENT) field null", FLOAT_NAN, p.getPhaseOffset(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getPhaseOffset(MIN) field null", FLOAT_NAN, p.getPhaseOffset(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getPhaseOffset(MAX) field null", FLOAT_NAN, p.getPhaseOffset(MAX_VALUE));

  // set PhaseOffset CURRENT_VALUE
  p.setPhaseOffset(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setPhaseOffset(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setPhaseOffset(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setPhaseOffset(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setPhaseOffset(val1,CURRENT) field val1bits", cif7val1bits, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getPhaseOffset(CURRENT) field val1", cif7val1, p.getPhaseOffset(CURRENT_VALUE));

  // set PhaseOffset MIN_VALUE
  p.setPhaseOffset(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setPhaseOffset(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setPhaseOffset(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setPhaseOffset(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setPhaseOffset(val3,MIN) field val3bits", cif7val3bits, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getPhaseOffset(MIN) field val3", cif7val3, p.getPhaseOffset(MIN_VALUE));

  // set PhaseOffset MAX_VALUE
  p.setPhaseOffset(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setPhaseOffset(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setPhaseOffset(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setPhaseOffset(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setPhaseOffset(val2,MAX) field val2bits", cif7val2bits, VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("getPhaseOffset(MAX) field val2", cif7val2, p.getPhaseOffset(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    cif7val3bits,    VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    cif7val2bits,    VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getPhaseOffset(MIN) field val3",     cif7val3,    p.getPhaseOffset(MIN_VALUE));
  assertEquals("getPhaseOffset(MAX) field val2",     cif7val2,    p.getPhaseOffset(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}


// CIF2 tests

void BasicQueryAcknowledgePacketTest::testSetFunctionPriorityID () {
  // CIF2 bit 6
  const size_t CIF = 2;
  const size_t CIF_bit = 6;

  const int16_t val1 = 0x1234;
  const int16_t val2 = 0x4321;
  const int32_t mask = 0x0000FFFF;
  const int32_t size = 4;
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF2 for FunctionPriorityID
  p.addCIF2();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF2() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF2() pkt len", len0+4, len1);
  assertEquals("addCIF2() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getFunctionPriorityID() field null", INT16_NULL, p.getFunctionPriorityID());

  // set FunctionPriorityID of CIF2
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setFunctionPriorityID(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setFunctionPriorityID(val1) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setFunctionPriorityID(val1) pkt len", len1+size, len2);
  assertEquals("setFunctionPriorityID(val1) field val1bits", (int32_t) (val1&mask), VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("setFunctionPriorityID(val1) field val1", val1, p.getFunctionPriorityID());

  // set FunctionPriorityID of CIF2 again
  p.setFunctionPriorityID(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setFunctionPriorityID(val2) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setFunctionPriorityID(val2) pkt len", len2, len3);
  assertEquals("setFunctionPriorityID(val2) field val2bits", (int32_t) (val2&mask), VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("setFunctionPriorityID(val2) field val2", val2, p.getFunctionPriorityID());

  // unset FunctionPriorityID of CIF2
  p.setFunctionPriorityID(INT16_NULL);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setFunctionPriorityID(null) CIF2 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setFunctionPriorityID(null) CIF2 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setFunctionPriorityID(null) pkt len", len1, len4);
  assertEquals("setFunctionPriorityID(null) field null", INT16_NULL, p.getFunctionPriorityID());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const int16_t cif7val1 = 0x0;
  const int16_t cif7val2 = val1;
  const int16_t cif7val3 = val2;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getFunctionPriorityID() field null", INT16_NULL, p.getFunctionPriorityID());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getFunctionPriorityID(CURRENT) field null", INT16_NULL, p.getFunctionPriorityID(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getFunctionPriorityID(MIN) field null", INT16_NULL, p.getFunctionPriorityID(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getFunctionPriorityID(MAX) field null", INT16_NULL, p.getFunctionPriorityID(MAX_VALUE));

  // set FunctionPriorityID CURRENT_VALUE
  p.setFunctionPriorityID(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setFunctionPriorityID(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setFunctionPriorityID(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setFunctionPriorityID(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setFunctionPriorityID(val1,CURRENT) field val1bits", (int32_t)cif7val1&mask, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getFunctionPriorityID(CURRENT) field val1", cif7val1, p.getFunctionPriorityID(CURRENT_VALUE));

  // set FunctionPriorityID MIN_VALUE
  p.setFunctionPriorityID(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setFunctionPriorityID(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setFunctionPriorityID(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setFunctionPriorityID(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setFunctionPriorityID(val3,MIN) field val3bits", (int32_t)mask&cif7val3, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getFunctionPriorityID(MIN) field val3", cif7val3, p.getFunctionPriorityID(MIN_VALUE));

  // set FunctionPriorityID MAX_VALUE
  p.setFunctionPriorityID(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setFunctionPriorityID(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setFunctionPriorityID(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setFunctionPriorityID(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setFunctionPriorityID(val2,MAX) field val2bits", (int32_t)mask&cif7val2, VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("getFunctionPriorityID(MAX) field val2", cif7val2, p.getFunctionPriorityID(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    (int32_t)mask&cif7val3,    VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    (int32_t)mask&cif7val2,    VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getFunctionPriorityID(MIN) field val3",     cif7val3,    p.getFunctionPriorityID(MIN_VALUE));
  assertEquals("getFunctionPriorityID(MAX) field val2",     cif7val2,    p.getFunctionPriorityID(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetEventID () {
  // CIF2 bit 7
  const size_t CIF = 2;
  const size_t CIF_bit = 7;

  const int16_t val1 = 0x1234;
  const int16_t val2 = 0x4321;
  const int32_t mask = 0x0000FFFF;
  const int32_t size = 4;
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF2 for EventID
  p.addCIF2();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF2() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF2() pkt len", len0+4, len1);
  assertEquals("addCIF2() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getEventID() field null", INT16_NULL, p.getEventID());

  // set EventID of CIF2
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setEventID(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setEventID(val1) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setEventID(val1) pkt len", len1+size, len2);
  assertEquals("setEventID(val1) field val1bits", (int32_t) (val1&mask), VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("setEventID(val1) field val1", val1, p.getEventID());

  // set EventID of CIF2 again
  p.setEventID(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setEventID(val2) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setEventID(val2) pkt len", len2, len3);
  assertEquals("setEventID(val2) field val2bits", (int32_t) (val2&mask), VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("setEventID(val2) field val2", val2, p.getEventID());

  // unset EventID of CIF2
  p.setEventID(INT16_NULL);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setEventID(null) CIF2 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setEventID(null) CIF2 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setEventID(null) pkt len", len1, len4);
  assertEquals("setEventID(null) field null", INT16_NULL, p.getEventID());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const int16_t cif7val1 = 0x0;
  const int16_t cif7val2 = val1;
  const int16_t cif7val3 = val2;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getEventID() field null", INT16_NULL, p.getEventID());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getEventID(CURRENT) field null", INT16_NULL, p.getEventID(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getEventID(MIN) field null", INT16_NULL, p.getEventID(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getEventID(MAX) field null", INT16_NULL, p.getEventID(MAX_VALUE));

  // set EventID CURRENT_VALUE
  p.setEventID(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setEventID(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setEventID(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setEventID(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setEventID(val1,CURRENT) field val1bits", (int32_t)cif7val1&mask, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getEventID(CURRENT) field val1", cif7val1, p.getEventID(CURRENT_VALUE));

  // set EventID MIN_VALUE
  p.setEventID(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setEventID(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setEventID(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setEventID(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setEventID(val3,MIN) field val3bits", (int32_t)mask&cif7val3, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getEventID(MIN) field val3", cif7val3, p.getEventID(MIN_VALUE));

  // set EventID MAX_VALUE
  p.setEventID(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setEventID(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setEventID(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setEventID(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setEventID(val2,MAX) field val2bits", (int32_t)mask&cif7val2, VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("getEventID(MAX) field val2", cif7val2, p.getEventID(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    (int32_t)mask&cif7val3,    VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    (int32_t)mask&cif7val2,    VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getEventID(MIN) field val3",     cif7val3,    p.getEventID(MIN_VALUE));
  assertEquals("getEventID(MAX) field val2",     cif7val2,    p.getEventID(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetModeID () {
  // CIF2 bit 8
  const size_t CIF = 2;
  const size_t CIF_bit = 8;

  const int16_t val1 = 0x1234;
  const int16_t val2 = 0x4321;
  const int32_t mask = 0x0000FFFF;
  const int32_t size = 4;
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF2 for Mode ID
  p.addCIF2();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF2() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF2() pkt len", len0+size, len1);
  assertEquals("addCIF2() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getModeID() field null", INT16_NULL, p.getModeID());

  // set Mode ID of CIF2
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setModeID(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setModeID(val1) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setModeID(val1) pkt len", len1+4, len2);
  assertEquals("setModeID(val1) field val1bits", (int32_t) (val1&mask), VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("setModeID(val1) field val1", val1, p.getModeID());

  // set Mode ID of CIF2 again
  p.setModeID(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setModeID(val2) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setModeID(val2) pkt len", len2, len3);
  assertEquals("setModeID(val2) field val2bits", (int32_t) (val2&mask), VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("setModeID(val2) field val2", val2, p.getModeID());

  // unset Mode ID of CIF2
  p.setModeID(INT16_NULL);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setModeID(null) CIF2 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setModeID(null) CIF2 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setModeID(null) pkt len", len1, len4);
  assertEquals("setModeID(null) field null", INT16_NULL, p.getModeID());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const int16_t cif7val1 = 0x0;
  const int16_t cif7val2 = val1;
  const int16_t cif7val3 = val2;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getModeID() field null", INT16_NULL, p.getModeID());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getModeID(CURRENT) field null", INT16_NULL, p.getModeID(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getModeID(MIN) field null", INT16_NULL, p.getModeID(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getModeID(MAX) field null", INT16_NULL, p.getModeID(MAX_VALUE));

  // set ModeID CURRENT_VALUE
  p.setModeID(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setModeID(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setModeID(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setModeID(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setModeID(val1,CURRENT) field val1bits", (int32_t)cif7val1&mask, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getModeID(CURRENT) field val1", cif7val1, p.getModeID(CURRENT_VALUE));

  // set ModeID MIN_VALUE
  p.setModeID(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setModeID(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setModeID(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setModeID(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setModeID(val3,MIN) field val3bits", (int32_t)mask&cif7val3, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getModeID(MIN) field val3", cif7val3, p.getModeID(MIN_VALUE));

  // set ModeID MAX_VALUE
  p.setModeID(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setModeID(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setModeID(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setModeID(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setModeID(val2,MAX) field val2bits", (int32_t)mask&cif7val2, VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("getModeID(MAX) field val2", cif7val2, p.getModeID(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    (int32_t)mask&cif7val3,    VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    (int32_t)mask&cif7val2,    VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getModeID(MIN) field val3",     cif7val3,    p.getModeID(MIN_VALUE));
  assertEquals("getModeID(MAX) field val2",     cif7val2,    p.getModeID(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetFunctionID () {
  // CIF2 bit 9
  const size_t CIF = 2;
  const size_t CIF_bit = 9;

  const int16_t val1 = 0x1234;
  const int16_t val2 = 0x4321;
  const int32_t mask = 0x0000FFFF;
  const int32_t size = 4;
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF2 for FunctionID
  p.addCIF2();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF2() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF2() pkt len", len0+4, len1);
  assertEquals("addCIF2() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getFunctionID() field null", INT16_NULL, p.getFunctionID());

  // set FunctionID of CIF2
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setFunctionID(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setFunctionID(val1) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setFunctionID(val1) pkt len", len1+size, len2);
  assertEquals("setFunctionID(val1) field val1bits", (int32_t) (val1&mask), VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("setFunctionID(val1) field val1", val1, p.getFunctionID());

  // set FunctionID of CIF2 again
  p.setFunctionID(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setFunctionID(val2) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setFunctionID(val2) pkt len", len2, len3);
  assertEquals("setFunctionID(val2) field val2bits", (int32_t) (val2&mask), VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("setFunctionID(val2) field val2", val2, p.getFunctionID());

  // unset FunctionID of CIF2
  p.setFunctionID(INT16_NULL);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setFunctionID(null) CIF2 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setFunctionID(null) CIF2 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setFunctionID(null) pkt len", len1, len4);
  assertEquals("setFunctionID(null) field null", INT16_NULL, p.getFunctionID());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const int16_t cif7val1 = 0x0;
  const int16_t cif7val2 = val1;
  const int16_t cif7val3 = val2;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getFunctionID() field null", INT16_NULL, p.getFunctionID());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getFunctionID(CURRENT) field null", INT16_NULL, p.getFunctionID(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getFunctionID(MIN) field null", INT16_NULL, p.getFunctionID(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getFunctionID(MAX) field null", INT16_NULL, p.getFunctionID(MAX_VALUE));

  // set FunctionID CURRENT_VALUE
  p.setFunctionID(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setFunctionID(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setFunctionID(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setFunctionID(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setFunctionID(val1,CURRENT) field val1bits", (int32_t)cif7val1&mask, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getFunctionID(CURRENT) field val1", cif7val1, p.getFunctionID(CURRENT_VALUE));

  // set FunctionID MIN_VALUE
  p.setFunctionID(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setFunctionID(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setFunctionID(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setFunctionID(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setFunctionID(val3,MIN) field val3bits", (int32_t)mask&cif7val3, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getFunctionID(MIN) field val3", cif7val3, p.getFunctionID(MIN_VALUE));

  // set FunctionID MAX_VALUE
  p.setFunctionID(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setFunctionID(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setFunctionID(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setFunctionID(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setFunctionID(val2,MAX) field val2bits", (int32_t)mask&cif7val2, VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("getFunctionID(MAX) field val2", cif7val2, p.getFunctionID(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    (int32_t)mask&cif7val3,    VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    (int32_t)mask&cif7val2,    VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getFunctionID(MIN) field val3",     cif7val3,    p.getFunctionID(MIN_VALUE));
  assertEquals("getFunctionID(MAX) field val2",     cif7val2,    p.getFunctionID(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetModulationType () {
  // CIF2 bit 10
  const size_t CIF = 2;
  const size_t CIF_bit = 10;

  const int16_t val1 = 0x1234;
  const int16_t val2 = 0x4321;
  const int32_t mask = 0x0000FFFF;
  const int32_t size = 4;
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF2 for ModulationType
  p.addCIF2();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF2() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF2() pkt len", len0+4, len1);
  assertEquals("addCIF2() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getModulationType() field null", INT16_NULL, p.getModulationType());

  // set ModulationType of CIF2
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setModulationType(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setModulationType(val1) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setModulationType(val1) pkt len", len1+size, len2);
  assertEquals("setModulationType(val1) field val1bits", (int32_t) (val1&mask), VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("setModulationType(val1) field val1", val1, p.getModulationType());

  // set ModulationType of CIF2 again
  p.setModulationType(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setModulationType(val2) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setModulationType(val2) pkt len", len2, len3);
  assertEquals("setModulationType(val2) field val2bits", (int32_t) (val2&mask), VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("setModulationType(val2) field val2", val2, p.getModulationType());

  // unset ModulationType of CIF2
  p.setModulationType(INT16_NULL);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setModulationType(null) CIF2 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setModulationType(null) CIF2 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setModulationType(null) pkt len", len1, len4);
  assertEquals("setModulationType(null) field null", INT16_NULL, p.getModulationType());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const int16_t cif7val1 = 0x0;
  const int16_t cif7val2 = val1;
  const int16_t cif7val3 = val2;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getModulationType() field null", INT16_NULL, p.getModulationType());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getModulationType(CURRENT) field null", INT16_NULL, p.getModulationType(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getModulationType(MIN) field null", INT16_NULL, p.getModulationType(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getModulationType(MAX) field null", INT16_NULL, p.getModulationType(MAX_VALUE));

  // set ModulationType CURRENT_VALUE
  p.setModulationType(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setModulationType(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setModulationType(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setModulationType(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setModulationType(val1,CURRENT) field val1bits", (int32_t)cif7val1&mask, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getModulationType(CURRENT) field val1", cif7val1, p.getModulationType(CURRENT_VALUE));

  // set ModulationType MIN_VALUE
  p.setModulationType(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setModulationType(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setModulationType(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setModulationType(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setModulationType(val3,MIN) field val3bits", (int32_t)mask&cif7val3, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getModulationType(MIN) field val3", cif7val3, p.getModulationType(MIN_VALUE));

  // set ModulationType MAX_VALUE
  p.setModulationType(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setModulationType(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setModulationType(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setModulationType(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setModulationType(val2,MAX) field val2bits", (int32_t)mask&cif7val2, VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("getModulationType(MAX) field val2", cif7val2, p.getModulationType(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    (int32_t)mask&cif7val3,    VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    (int32_t)mask&cif7val2,    VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getModulationType(MIN) field val3",     cif7val3,    p.getModulationType(MIN_VALUE));
  assertEquals("getModulationType(MAX) field val2",     cif7val2,    p.getModulationType(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetModulationClass () {
  // CIF2 bit 11
  const size_t CIF = 2;
  const size_t CIF_bit = 11;

  const int16_t val1 = 0x1234;
  const int16_t val2 = 0x4321;
  const int32_t mask = 0x0000FFFF;
  const int32_t size = 4;
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF2 for ModulationClass
  p.addCIF2();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF2() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF2() pkt len", len0+4, len1);
  assertEquals("addCIF2() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getModulationClass() field null", INT16_NULL, p.getModulationClass());

  // set ModulationClass of CIF2
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setModulationClass(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setModulationClass(val1) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setModulationClass(val1) pkt len", len1+size, len2);
  assertEquals("setModulationClass(val1) field val1bits", (int32_t) (val1&mask), VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("setModulationClass(val1) field val1", val1, p.getModulationClass());

  // set ModulationClass of CIF2 again
  p.setModulationClass(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setModulationClass(val2) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setModulationClass(val2) pkt len", len2, len3);
  assertEquals("setModulationClass(val2) field val2bits", (int32_t) (val2&mask), VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("setModulationClass(val2) field val2", val2, p.getModulationClass());

  // unset ModulationClass of CIF2
  p.setModulationClass(INT16_NULL);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setModulationClass(null) CIF2 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setModulationClass(null) CIF2 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setModulationClass(null) pkt len", len1, len4);
  assertEquals("setModulationClass(null) field null", INT16_NULL, p.getModulationClass());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const int16_t cif7val1 = 0x0;
  const int16_t cif7val2 = val1;
  const int16_t cif7val3 = val2;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getModulationClass() field null", INT16_NULL, p.getModulationClass());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getModulationClass(CURRENT) field null", INT16_NULL, p.getModulationClass(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getModulationClass(MIN) field null", INT16_NULL, p.getModulationClass(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getModulationClass(MAX) field null", INT16_NULL, p.getModulationClass(MAX_VALUE));

  // set ModulationClass CURRENT_VALUE
  p.setModulationClass(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setModulationClass(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setModulationClass(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setModulationClass(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setModulationClass(val1,CURRENT) field val1bits", (int32_t)cif7val1&mask, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getModulationClass(CURRENT) field val1", cif7val1, p.getModulationClass(CURRENT_VALUE));

  // set ModulationClass MIN_VALUE
  p.setModulationClass(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setModulationClass(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setModulationClass(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setModulationClass(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setModulationClass(val3,MIN) field val3bits", (int32_t)mask&cif7val3, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getModulationClass(MIN) field val3", cif7val3, p.getModulationClass(MIN_VALUE));

  // set ModulationClass MAX_VALUE
  p.setModulationClass(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setModulationClass(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setModulationClass(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setModulationClass(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setModulationClass(val2,MAX) field val2bits", (int32_t)mask&cif7val2, VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("getModulationClass(MAX) field val2", cif7val2, p.getModulationClass(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    (int32_t)mask&cif7val3,    VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    (int32_t)mask&cif7val2,    VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getModulationClass(MIN) field val3",     cif7val3,    p.getModulationClass(MIN_VALUE));
  assertEquals("getModulationClass(MAX) field val2",     cif7val2,    p.getModulationClass(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetEmsDeviceClass () {
  // CIF2 bit 14
  const size_t CIF = 2;
  const size_t CIF_bit = 14;

  const int16_t val1 = 0x1234;
  const int16_t val2 = 0x4321;
  const int32_t mask = 0x0000FFFF;
  const int32_t size = 4;
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF2 for EmsDeviceClass
  p.addCIF2();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF2() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF2() pkt len", len0+4, len1);
  assertEquals("addCIF2() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getEmsDeviceClass() field null", INT16_NULL, p.getEmsDeviceClass());

  // set EmsDeviceClass of CIF2
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setEmsDeviceClass(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setEmsDeviceClass(val1) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setEmsDeviceClass(val1) pkt len", len1+size, len2);
  assertEquals("setEmsDeviceClass(val1) field val1bits", (int32_t) (val1&mask), VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("setEmsDeviceClass(val1) field val1", val1, p.getEmsDeviceClass());

  // set EmsDeviceClass of CIF2 again
  p.setEmsDeviceClass(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setEmsDeviceClass(val2) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setEmsDeviceClass(val2) pkt len", len2, len3);
  assertEquals("setEmsDeviceClass(val2) field val2bits", (int32_t) (val2&mask), VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("setEmsDeviceClass(val2) field val2", val2, p.getEmsDeviceClass());

  // unset EmsDeviceClass of CIF2
  p.setEmsDeviceClass(INT16_NULL);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setEmsDeviceClass(null) CIF2 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setEmsDeviceClass(null) CIF2 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setEmsDeviceClass(null) pkt len", len1, len4);
  assertEquals("setEmsDeviceClass(null) field null", INT16_NULL, p.getEmsDeviceClass());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const int16_t cif7val1 = 0x0;
  const int16_t cif7val2 = val1;
  const int16_t cif7val3 = val2;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getEmsDeviceClass() field null", INT16_NULL, p.getEmsDeviceClass());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getEmsDeviceClass(CURRENT) field null", INT16_NULL, p.getEmsDeviceClass(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getEmsDeviceClass(MIN) field null", INT16_NULL, p.getEmsDeviceClass(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getEmsDeviceClass(MAX) field null", INT16_NULL, p.getEmsDeviceClass(MAX_VALUE));

  // set EmsDeviceClass CURRENT_VALUE
  p.setEmsDeviceClass(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setEmsDeviceClass(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setEmsDeviceClass(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setEmsDeviceClass(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setEmsDeviceClass(val1,CURRENT) field val1bits", (int32_t)cif7val1&mask, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getEmsDeviceClass(CURRENT) field val1", cif7val1, p.getEmsDeviceClass(CURRENT_VALUE));

  // set EmsDeviceClass MIN_VALUE
  p.setEmsDeviceClass(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setEmsDeviceClass(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setEmsDeviceClass(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setEmsDeviceClass(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setEmsDeviceClass(val3,MIN) field val3bits", (int32_t)mask&cif7val3, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getEmsDeviceClass(MIN) field val3", cif7val3, p.getEmsDeviceClass(MIN_VALUE));

  // set EmsDeviceClass MAX_VALUE
  p.setEmsDeviceClass(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setEmsDeviceClass(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setEmsDeviceClass(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setEmsDeviceClass(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setEmsDeviceClass(val2,MAX) field val2bits", (int32_t)mask&cif7val2, VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("getEmsDeviceClass(MAX) field val2", cif7val2, p.getEmsDeviceClass(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    (int32_t)mask&cif7val3,    VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    (int32_t)mask&cif7val2,    VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getEmsDeviceClass(MIN) field val3",     cif7val3,    p.getEmsDeviceClass(MIN_VALUE));
  assertEquals("getEmsDeviceClass(MAX) field val2",     cif7val2,    p.getEmsDeviceClass(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetOperator () {
  // CIF2 bit 18
  const size_t CIF = 2;
  const size_t CIF_bit = 18;

  const int16_t val1 = 0x1234;
  const int16_t val2 = 0x4321;
  const int32_t mask = 0x0000FFFF;
  const int32_t size = 4;
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF2 for Operator
  p.addCIF2();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF2() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF2() pkt len", len0+4, len1);
  assertEquals("addCIF2() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getOperator() field null", INT16_NULL, p.getOperator());

  // set Operator of CIF2
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setOperator(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setOperator(val1) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setOperator(val1) pkt len", len1+size, len2);
  assertEquals("setOperator(val1) field val1bits", (int32_t) (val1&mask), VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("setOperator(val1) field val1", val1, p.getOperator());

  // set Operator of CIF2 again
  p.setOperator(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setOperator(val2) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setOperator(val2) pkt len", len2, len3);
  assertEquals("setOperator(val2) field val2bits", (int32_t) (val2&mask), VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("setOperator(val2) field val2", val2, p.getOperator());

  // unset Operator of CIF2
  p.setOperator(INT16_NULL);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setOperator(null) CIF2 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setOperator(null) CIF2 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setOperator(null) pkt len", len1, len4);
  assertEquals("setOperator(null) field null", INT16_NULL, p.getOperator());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const int16_t cif7val1 = 0x0;
  const int16_t cif7val2 = val1;
  const int16_t cif7val3 = val2;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getOperator() field null", INT16_NULL, p.getOperator());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getOperator(CURRENT) field null", INT16_NULL, p.getOperator(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getOperator(MIN) field null", INT16_NULL, p.getOperator(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getOperator(MAX) field null", INT16_NULL, p.getOperator(MAX_VALUE));

  // set Operator CURRENT_VALUE
  p.setOperator(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setOperator(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setOperator(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setOperator(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setOperator(val1,CURRENT) field val1bits", (int32_t)cif7val1&mask, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getOperator(CURRENT) field val1", cif7val1, p.getOperator(CURRENT_VALUE));

  // set Operator MIN_VALUE
  p.setOperator(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setOperator(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setOperator(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setOperator(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setOperator(val3,MIN) field val3bits", (int32_t)mask&cif7val3, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getOperator(MIN) field val3", cif7val3, p.getOperator(MIN_VALUE));

  // set Operator MAX_VALUE
  p.setOperator(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setOperator(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setOperator(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setOperator(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setOperator(val2,MAX) field val2bits", (int32_t)mask&cif7val2, VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("getOperator(MAX) field val2", cif7val2, p.getOperator(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    (int32_t)mask&cif7val3,    VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    (int32_t)mask&cif7val2,    VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getOperator(MIN) field val3",     cif7val3,    p.getOperator(MIN_VALUE));
  assertEquals("getOperator(MAX) field val2",     cif7val2,    p.getOperator(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetCountryCode () {
  // CIF2 bit 19
  const size_t CIF = 2;
  const size_t CIF_bit = 19;

  const int16_t val1 = 0x1234;
  const int16_t val2 = 0x4321;
  const int32_t mask = 0x0000FFFF;
  const int32_t size = 4;
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF2 for CountryCode
  p.addCIF2();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF2() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF2() pkt len", len0+4, len1);
  assertEquals("addCIF2() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getCountryCode() field null", INT16_NULL, p.getCountryCode());

  // set CountryCode of CIF2
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setCountryCode(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setCountryCode(val1) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCountryCode(val1) pkt len", len1+size, len2);
  assertEquals("setCountryCode(val1) field val1bits", (int32_t) (val1&mask), VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("setCountryCode(val1) field val1", val1, p.getCountryCode());

  // set CountryCode of CIF2 again
  p.setCountryCode(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setCountryCode(val2) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCountryCode(val2) pkt len", len2, len3);
  assertEquals("setCountryCode(val2) field val2bits", (int32_t) (val2&mask), VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("setCountryCode(val2) field val2", val2, p.getCountryCode());

  // unset CountryCode of CIF2
  p.setCountryCode(INT16_NULL);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setCountryCode(null) CIF2 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCountryCode(null) CIF2 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setCountryCode(null) pkt len", len1, len4);
  assertEquals("setCountryCode(null) field null", INT16_NULL, p.getCountryCode());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const int16_t cif7val1 = 0x0;
  const int16_t cif7val2 = val1;
  const int16_t cif7val3 = val2;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getCountryCode() field null", INT16_NULL, p.getCountryCode());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getCountryCode(CURRENT) field null", INT16_NULL, p.getCountryCode(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getCountryCode(MIN) field null", INT16_NULL, p.getCountryCode(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getCountryCode(MAX) field null", INT16_NULL, p.getCountryCode(MAX_VALUE));

  // set CountryCode CURRENT_VALUE
  p.setCountryCode(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setCountryCode(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setCountryCode(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCountryCode(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCountryCode(val1,CURRENT) field val1bits", (int32_t)cif7val1&mask, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getCountryCode(CURRENT) field val1", cif7val1, p.getCountryCode(CURRENT_VALUE));

  // set CountryCode MIN_VALUE
  p.setCountryCode(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setCountryCode(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setCountryCode(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCountryCode(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCountryCode(val3,MIN) field val3bits", (int32_t)mask&cif7val3, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCountryCode(MIN) field val3", cif7val3, p.getCountryCode(MIN_VALUE));

  // set CountryCode MAX_VALUE
  p.setCountryCode(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setCountryCode(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setCountryCode(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCountryCode(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCountryCode(val2,MAX) field val2bits", (int32_t)mask&cif7val2, VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("getCountryCode(MAX) field val2", cif7val2, p.getCountryCode(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    (int32_t)mask&cif7val3,    VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    (int32_t)mask&cif7val2,    VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCountryCode(MIN) field val3",     cif7val3,    p.getCountryCode(MIN_VALUE));
  assertEquals("getCountryCode(MAX) field val2",     cif7val2,    p.getCountryCode(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetRFFootprintRange () {
  // CIF2 bit 3
  const size_t CIF = 2;
  const size_t CIF_bit = 3;

  const int32_t val1 = 0x12345678;
  const int32_t val2 = 0x87654321;
  const int32_t size = 4;
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF2
  p.addCIF2();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF2() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF2() pkt len", len0+4, len1);
  assertEquals("addCIF2() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getRFFootprintRange() field null", INT32_NULL, p.getRFFootprintRange());

  // set RFFootprintRange of CIF2
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setRFFootprintRange(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setRFFootprintRange(val1) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setRFFootprintRange(val1) pkt len", len1+size, len2);
  assertEquals("setRFFootprintRange(val1) field val1", val1, p.getRFFootprintRange());

  // set RFFootprintRange of CIF2 again
  p.setRFFootprintRange(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setRFFootprintRange(val2) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setRFFootprintRange(val2) pkt len", len2, len3);
  assertEquals("setRFFootprintRange(val2) field val2", val2, p.getRFFootprintRange());

  // unset RFFootprintRange of CIF2
  p.setRFFootprintRange(INT32_NULL);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setRFFootprintRange(null) CIF2 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setRFFootprintRange(null) CIF2 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setRFFootprintRange(null) pkt len", len1, len4);
  assertEquals("setRFFootprintRange(null) field null", INT32_NULL, p.getRFFootprintRange());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const int32_t cif7val1 = 0x0;
  const int32_t cif7val2 = val1;
  const int32_t cif7val3 = val2;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getRFFootprintRange() field null", INT32_NULL, p.getRFFootprintRange());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getRFFootprintRange(CURRENT) field null", INT32_NULL, p.getRFFootprintRange(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getRFFootprintRange(MIN) field null", INT32_NULL, p.getRFFootprintRange(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getRFFootprintRange(MAX) field null", INT32_NULL, p.getRFFootprintRange(MAX_VALUE));

  // set RFFootprintRange CURRENT_VALUE
  p.setRFFootprintRange(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setRFFootprintRange(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setRFFootprintRange(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setRFFootprintRange(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setRFFootprintRange(val1,CURRENT) field val1bits", cif7val1, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getRFFootprintRange(CURRENT) field val1", cif7val1, p.getRFFootprintRange(CURRENT_VALUE));

  // set RFFootprintRange MIN_VALUE
  p.setRFFootprintRange(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setRFFootprintRange(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setRFFootprintRange(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setRFFootprintRange(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setRFFootprintRange(val3,MIN) field val3bits", cif7val3, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getRFFootprintRange(MIN) field val3", cif7val3, p.getRFFootprintRange(MIN_VALUE));

  // set RFFootprintRange MAX_VALUE
  p.setRFFootprintRange(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setRFFootprintRange(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setRFFootprintRange(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setRFFootprintRange(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setRFFootprintRange(val2,MAX) field val2bits", cif7val2, VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("getRFFootprintRange(MAX) field val2", cif7val2, p.getRFFootprintRange(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    cif7val3,    VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    cif7val2,    VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getRFFootprintRange(MIN) field val3",     cif7val3,    p.getRFFootprintRange(MIN_VALUE));
  assertEquals("getRFFootprintRange(MAX) field val2",     cif7val2,    p.getRFFootprintRange(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetRFFootprint () {
  // CIF2 bit 4
  const size_t CIF = 2;
  const size_t CIF_bit = 4;

  const int32_t val1 = 0x12345678;
  const int32_t val2 = 0x87654321;
  const int32_t size = 4;
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF2
  p.addCIF2();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF2() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF2() pkt len", len0+4, len1);
  assertEquals("addCIF2() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getRFFootprint() field null", INT32_NULL, p.getRFFootprint());

  // set RFFootprint of CIF2
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setRFFootprint(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setRFFootprint(val1) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setRFFootprint(val1) pkt len", len1+size, len2);
  assertEquals("setRFFootprint(val1) field val1", val1, p.getRFFootprint());

  // set RFFootprint of CIF2 again
  p.setRFFootprint(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setRFFootprint(val2) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setRFFootprint(val2) pkt len", len2, len3);
  assertEquals("setRFFootprint(val2) field val2", val2, p.getRFFootprint());

  // unset RFFootprint of CIF2
  p.setRFFootprint(INT32_NULL);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setRFFootprint(null) CIF2 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setRFFootprint(null) CIF2 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setRFFootprint(null) pkt len", len1, len4);
  assertEquals("setRFFootprint(null) field null", INT32_NULL, p.getRFFootprint());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const int32_t cif7val1 = 0x0;
  const int32_t cif7val2 = val1;
  const int32_t cif7val3 = val2;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getRFFootprint() field null", INT32_NULL, p.getRFFootprint());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getRFFootprint(CURRENT) field null", INT32_NULL, p.getRFFootprint(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getRFFootprint(MIN) field null", INT32_NULL, p.getRFFootprint(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getRFFootprint(MAX) field null", INT32_NULL, p.getRFFootprint(MAX_VALUE));

  // set RFFootprint CURRENT_VALUE
  p.setRFFootprint(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setRFFootprint(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setRFFootprint(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setRFFootprint(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setRFFootprint(val1,CURRENT) field val1bits", cif7val1, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getRFFootprint(CURRENT) field val1", cif7val1, p.getRFFootprint(CURRENT_VALUE));

  // set RFFootprint MIN_VALUE
  p.setRFFootprint(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setRFFootprint(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setRFFootprint(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setRFFootprint(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setRFFootprint(val3,MIN) field val3bits", cif7val3, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getRFFootprint(MIN) field val3", cif7val3, p.getRFFootprint(MIN_VALUE));

  // set RFFootprint MAX_VALUE
  p.setRFFootprint(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setRFFootprint(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setRFFootprint(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setRFFootprint(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setRFFootprint(val2,MAX) field val2bits", cif7val2, VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("getRFFootprint(MAX) field val2", cif7val2, p.getRFFootprint(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    cif7val3,    VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    cif7val2,    VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getRFFootprint(MIN) field val3",     cif7val3,    p.getRFFootprint(MIN_VALUE));
  assertEquals("getRFFootprint(MAX) field val2",     cif7val2,    p.getRFFootprint(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetCommunicationPriorityID () {
  // CIF2 bit 5
  const size_t CIF = 2;
  const size_t CIF_bit = 5;

  const int32_t val1 = 0x12345678;
  const int32_t val2 = 0x87654321;
  const int32_t size = 4;
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF2
  p.addCIF2();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF2() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF2() pkt len", len0+4, len1);
  assertEquals("addCIF2() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getCommunicationPriorityID() field null", INT32_NULL, p.getCommunicationPriorityID());

  // set CommunicationPriorityID of CIF2
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setCommunicationPriorityID(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setCommunicationPriorityID(val1) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCommunicationPriorityID(val1) pkt len", len1+size, len2);
  assertEquals("setCommunicationPriorityID(val1) field val1", val1, p.getCommunicationPriorityID());

  // set CommunicationPriorityID of CIF2 again
  p.setCommunicationPriorityID(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setCommunicationPriorityID(val2) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCommunicationPriorityID(val2) pkt len", len2, len3);
  assertEquals("setCommunicationPriorityID(val2) field val2", val2, p.getCommunicationPriorityID());

  // unset CommunicationPriorityID of CIF2
  p.setCommunicationPriorityID(INT32_NULL);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setCommunicationPriorityID(null) CIF2 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCommunicationPriorityID(null) CIF2 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setCommunicationPriorityID(null) pkt len", len1, len4);
  assertEquals("setCommunicationPriorityID(null) field null", INT32_NULL, p.getCommunicationPriorityID());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const int32_t cif7val1 = 0x0;
  const int32_t cif7val2 = val1;
  const int32_t cif7val3 = val2;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getCommunicationPriorityID() field null", INT32_NULL, p.getCommunicationPriorityID());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getCommunicationPriorityID(CURRENT) field null", INT32_NULL, p.getCommunicationPriorityID(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getCommunicationPriorityID(MIN) field null", INT32_NULL, p.getCommunicationPriorityID(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getCommunicationPriorityID(MAX) field null", INT32_NULL, p.getCommunicationPriorityID(MAX_VALUE));

  // set CommunicationPriorityID CURRENT_VALUE
  p.setCommunicationPriorityID(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setCommunicationPriorityID(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setCommunicationPriorityID(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCommunicationPriorityID(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCommunicationPriorityID(val1,CURRENT) field val1bits", cif7val1, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getCommunicationPriorityID(CURRENT) field val1", cif7val1, p.getCommunicationPriorityID(CURRENT_VALUE));

  // set CommunicationPriorityID MIN_VALUE
  p.setCommunicationPriorityID(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setCommunicationPriorityID(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setCommunicationPriorityID(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCommunicationPriorityID(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCommunicationPriorityID(val3,MIN) field val3bits", cif7val3, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCommunicationPriorityID(MIN) field val3", cif7val3, p.getCommunicationPriorityID(MIN_VALUE));

  // set CommunicationPriorityID MAX_VALUE
  p.setCommunicationPriorityID(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setCommunicationPriorityID(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setCommunicationPriorityID(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCommunicationPriorityID(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCommunicationPriorityID(val2,MAX) field val2bits", cif7val2, VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("getCommunicationPriorityID(MAX) field val2", cif7val2, p.getCommunicationPriorityID(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    cif7val3,    VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    cif7val2,    VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCommunicationPriorityID(MIN) field val3",     cif7val3,    p.getCommunicationPriorityID(MIN_VALUE));
  assertEquals("getCommunicationPriorityID(MAX) field val2",     cif7val2,    p.getCommunicationPriorityID(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetEmsDeviceInstance () {
  // CIF2 bit 12
  const size_t CIF = 2;
  const size_t CIF_bit = 12;

  const int32_t val1 = 0x12345678;
  const int32_t val2 = 0x87654321;
  const int32_t size = 4;
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF2
  p.addCIF2();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF2() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF2() pkt len", len0+4, len1);
  assertEquals("addCIF2() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getEmsDeviceInstance() field null", INT32_NULL, p.getEmsDeviceInstance());

  // set EmsDeviceInstance of CIF2
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setEmsDeviceInstance(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setEmsDeviceInstance(val1) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setEmsDeviceInstance(val1) pkt len", len1+size, len2);
  assertEquals("setEmsDeviceInstance(val1) field val1", val1, p.getEmsDeviceInstance());

  // set EmsDeviceInstance of CIF2 again
  p.setEmsDeviceInstance(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setEmsDeviceInstance(val2) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setEmsDeviceInstance(val2) pkt len", len2, len3);
  assertEquals("setEmsDeviceInstance(val2) field val2", val2, p.getEmsDeviceInstance());

  // unset EmsDeviceInstance of CIF2
  p.setEmsDeviceInstance(INT32_NULL);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setEmsDeviceInstance(null) CIF2 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setEmsDeviceInstance(null) CIF2 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setEmsDeviceInstance(null) pkt len", len1, len4);
  assertEquals("setEmsDeviceInstance(null) field null", INT32_NULL, p.getEmsDeviceInstance());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const int32_t cif7val1 = 0x0;
  const int32_t cif7val2 = val1;
  const int32_t cif7val3 = val2;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getEmsDeviceInstance() field null", INT32_NULL, p.getEmsDeviceInstance());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getEmsDeviceInstance(CURRENT) field null", INT32_NULL, p.getEmsDeviceInstance(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getEmsDeviceInstance(MIN) field null", INT32_NULL, p.getEmsDeviceInstance(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getEmsDeviceInstance(MAX) field null", INT32_NULL, p.getEmsDeviceInstance(MAX_VALUE));

  // set EmsDeviceInstance CURRENT_VALUE
  p.setEmsDeviceInstance(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setEmsDeviceInstance(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setEmsDeviceInstance(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setEmsDeviceInstance(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setEmsDeviceInstance(val1,CURRENT) field val1bits", cif7val1, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getEmsDeviceInstance(CURRENT) field val1", cif7val1, p.getEmsDeviceInstance(CURRENT_VALUE));

  // set EmsDeviceInstance MIN_VALUE
  p.setEmsDeviceInstance(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setEmsDeviceInstance(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setEmsDeviceInstance(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setEmsDeviceInstance(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setEmsDeviceInstance(val3,MIN) field val3bits", cif7val3, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getEmsDeviceInstance(MIN) field val3", cif7val3, p.getEmsDeviceInstance(MIN_VALUE));

  // set EmsDeviceInstance MAX_VALUE
  p.setEmsDeviceInstance(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setEmsDeviceInstance(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setEmsDeviceInstance(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setEmsDeviceInstance(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setEmsDeviceInstance(val2,MAX) field val2bits", cif7val2, VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("getEmsDeviceInstance(MAX) field val2", cif7val2, p.getEmsDeviceInstance(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    cif7val3,    VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    cif7val2,    VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getEmsDeviceInstance(MIN) field val3",     cif7val3,    p.getEmsDeviceInstance(MIN_VALUE));
  assertEquals("getEmsDeviceInstance(MAX) field val2",     cif7val2,    p.getEmsDeviceInstance(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetEmsDeviceType () {
  // CIF2 bit 13
  const size_t CIF = 2;
  const size_t CIF_bit = 13;

  const int32_t val1 = 0x12345678;
  const int32_t val2 = 0x87654321;
  const int32_t size = 4;
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF2
  p.addCIF2();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF2() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF2() pkt len", len0+4, len1);
  assertEquals("addCIF2() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getEmsDeviceType() field null", INT32_NULL, p.getEmsDeviceType());

  // set EmsDeviceType of CIF2
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setEmsDeviceType(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setEmsDeviceType(val1) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setEmsDeviceType(val1) pkt len", len1+size, len2);
  assertEquals("setEmsDeviceType(val1) field val1", val1, p.getEmsDeviceType());

  // set EmsDeviceType of CIF2 again
  p.setEmsDeviceType(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setEmsDeviceType(val2) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setEmsDeviceType(val2) pkt len", len2, len3);
  assertEquals("setEmsDeviceType(val2) field val2", val2, p.getEmsDeviceType());

  // unset EmsDeviceType of CIF2
  p.setEmsDeviceType(INT32_NULL);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setEmsDeviceType(null) CIF2 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setEmsDeviceType(null) CIF2 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setEmsDeviceType(null) pkt len", len1, len4);
  assertEquals("setEmsDeviceType(null) field null", INT32_NULL, p.getEmsDeviceType());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const int32_t cif7val1 = 0x0;
  const int32_t cif7val2 = val1;
  const int32_t cif7val3 = val2;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getEmsDeviceType() field null", INT32_NULL, p.getEmsDeviceType());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getEmsDeviceType(CURRENT) field null", INT32_NULL, p.getEmsDeviceType(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getEmsDeviceType(MIN) field null", INT32_NULL, p.getEmsDeviceType(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getEmsDeviceType(MAX) field null", INT32_NULL, p.getEmsDeviceType(MAX_VALUE));

  // set EmsDeviceType CURRENT_VALUE
  p.setEmsDeviceType(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setEmsDeviceType(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setEmsDeviceType(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setEmsDeviceType(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setEmsDeviceType(val1,CURRENT) field val1bits", cif7val1, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getEmsDeviceType(CURRENT) field val1", cif7val1, p.getEmsDeviceType(CURRENT_VALUE));

  // set EmsDeviceType MIN_VALUE
  p.setEmsDeviceType(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setEmsDeviceType(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setEmsDeviceType(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setEmsDeviceType(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setEmsDeviceType(val3,MIN) field val3bits", cif7val3, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getEmsDeviceType(MIN) field val3", cif7val3, p.getEmsDeviceType(MIN_VALUE));

  // set EmsDeviceType MAX_VALUE
  p.setEmsDeviceType(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setEmsDeviceType(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setEmsDeviceType(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setEmsDeviceType(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setEmsDeviceType(val2,MAX) field val2bits", cif7val2, VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("getEmsDeviceType(MAX) field val2", cif7val2, p.getEmsDeviceType(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    cif7val3,    VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    cif7val2,    VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getEmsDeviceType(MIN) field val3",     cif7val3,    p.getEmsDeviceType(MIN_VALUE));
  assertEquals("getEmsDeviceType(MAX) field val2",     cif7val2,    p.getEmsDeviceType(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetPlatformDisplay () {
  // CIF2 bit 15
  const size_t CIF = 2;
  const size_t CIF_bit = 15;

  const int32_t val1 = 0x12345678;
  const int32_t val2 = 0x87654321;
  const int32_t size = 4;
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF2
  p.addCIF2();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF2() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF2() pkt len", len0+4, len1);
  assertEquals("addCIF2() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getPlatformDisplay() field null", INT32_NULL, p.getPlatformDisplay());

  // set PlatformDisplay of CIF2
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setPlatformDisplay(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setPlatformDisplay(val1) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setPlatformDisplay(val1) pkt len", len1+size, len2);
  assertEquals("setPlatformDisplay(val1) field val1", val1, p.getPlatformDisplay());

  // set PlatformDisplay of CIF2 again
  p.setPlatformDisplay(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setPlatformDisplay(val2) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setPlatformDisplay(val2) pkt len", len2, len3);
  assertEquals("setPlatformDisplay(val2) field val2", val2, p.getPlatformDisplay());

  // unset PlatformDisplay of CIF2
  p.setPlatformDisplay(INT32_NULL);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setPlatformDisplay(null) CIF2 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setPlatformDisplay(null) CIF2 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setPlatformDisplay(null) pkt len", len1, len4);
  assertEquals("setPlatformDisplay(null) field null", INT32_NULL, p.getPlatformDisplay());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const int32_t cif7val1 = 0x0;
  const int32_t cif7val2 = val1;
  const int32_t cif7val3 = val2;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getPlatformDisplay() field null", INT32_NULL, p.getPlatformDisplay());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getPlatformDisplay(CURRENT) field null", INT32_NULL, p.getPlatformDisplay(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getPlatformDisplay(MIN) field null", INT32_NULL, p.getPlatformDisplay(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getPlatformDisplay(MAX) field null", INT32_NULL, p.getPlatformDisplay(MAX_VALUE));

  // set PlatformDisplay CURRENT_VALUE
  p.setPlatformDisplay(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setPlatformDisplay(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setPlatformDisplay(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setPlatformDisplay(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setPlatformDisplay(val1,CURRENT) field val1bits", cif7val1, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getPlatformDisplay(CURRENT) field val1", cif7val1, p.getPlatformDisplay(CURRENT_VALUE));

  // set PlatformDisplay MIN_VALUE
  p.setPlatformDisplay(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setPlatformDisplay(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setPlatformDisplay(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setPlatformDisplay(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setPlatformDisplay(val3,MIN) field val3bits", cif7val3, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getPlatformDisplay(MIN) field val3", cif7val3, p.getPlatformDisplay(MIN_VALUE));

  // set PlatformDisplay MAX_VALUE
  p.setPlatformDisplay(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setPlatformDisplay(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setPlatformDisplay(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setPlatformDisplay(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setPlatformDisplay(val2,MAX) field val2bits", cif7val2, VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("getPlatformDisplay(MAX) field val2", cif7val2, p.getPlatformDisplay(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    cif7val3,    VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    cif7val2,    VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getPlatformDisplay(MIN) field val3",     cif7val3,    p.getPlatformDisplay(MIN_VALUE));
  assertEquals("getPlatformDisplay(MAX) field val2",     cif7val2,    p.getPlatformDisplay(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetPlatformInstance () {
  // CIF2 bit 16
  const size_t CIF = 2;
  const size_t CIF_bit = 16;

  const int32_t val1 = 0x12345678;
  const int32_t val2 = 0x87654321;
  const int32_t size = 4;
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF2
  p.addCIF2();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF2() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF2() pkt len", len0+4, len1);
  assertEquals("addCIF2() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getPlatformInstance() field null", INT32_NULL, p.getPlatformInstance());

  // set PlatformInstance of CIF2
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setPlatformInstance(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setPlatformInstance(val1) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setPlatformInstance(val1) pkt len", len1+size, len2);
  assertEquals("setPlatformInstance(val1) field val1", val1, p.getPlatformInstance());

  // set PlatformInstance of CIF2 again
  p.setPlatformInstance(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setPlatformInstance(val2) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setPlatformInstance(val2) pkt len", len2, len3);
  assertEquals("setPlatformInstance(val2) field val2", val2, p.getPlatformInstance());

  // unset PlatformInstance of CIF2
  p.setPlatformInstance(INT32_NULL);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setPlatformInstance(null) CIF2 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setPlatformInstance(null) CIF2 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setPlatformInstance(null) pkt len", len1, len4);
  assertEquals("setPlatformInstance(null) field null", INT32_NULL, p.getPlatformInstance());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const int32_t cif7val1 = 0x0;
  const int32_t cif7val2 = val1;
  const int32_t cif7val3 = val2;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getPlatformInstance() field null", INT32_NULL, p.getPlatformInstance());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getPlatformInstance(CURRENT) field null", INT32_NULL, p.getPlatformInstance(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getPlatformInstance(MIN) field null", INT32_NULL, p.getPlatformInstance(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getPlatformInstance(MAX) field null", INT32_NULL, p.getPlatformInstance(MAX_VALUE));

  // set PlatformInstance CURRENT_VALUE
  p.setPlatformInstance(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setPlatformInstance(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setPlatformInstance(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setPlatformInstance(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setPlatformInstance(val1,CURRENT) field val1bits", cif7val1, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getPlatformInstance(CURRENT) field val1", cif7val1, p.getPlatformInstance(CURRENT_VALUE));

  // set PlatformInstance MIN_VALUE
  p.setPlatformInstance(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setPlatformInstance(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setPlatformInstance(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setPlatformInstance(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setPlatformInstance(val3,MIN) field val3bits", cif7val3, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getPlatformInstance(MIN) field val3", cif7val3, p.getPlatformInstance(MIN_VALUE));

  // set PlatformInstance MAX_VALUE
  p.setPlatformInstance(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setPlatformInstance(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setPlatformInstance(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setPlatformInstance(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setPlatformInstance(val2,MAX) field val2bits", cif7val2, VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("getPlatformInstance(MAX) field val2", cif7val2, p.getPlatformInstance(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    cif7val3,    VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    cif7val2,    VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getPlatformInstance(MIN) field val3",     cif7val3,    p.getPlatformInstance(MIN_VALUE));
  assertEquals("getPlatformInstance(MAX) field val2",     cif7val2,    p.getPlatformInstance(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetPlatformClass () {
  // CIF2 bit 17
  const size_t CIF = 2;
  const size_t CIF_bit = 17;

  const int32_t val1 = 0x12345678;
  const int32_t val2 = 0x87654321;
  const int32_t size = 4;
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF2
  p.addCIF2();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF2() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF2() pkt len", len0+4, len1);
  assertEquals("addCIF2() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getPlatformClass() field null", INT32_NULL, p.getPlatformClass());

  // set PlatformClass of CIF2
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setPlatformClass(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setPlatformClass(val1) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setPlatformClass(val1) pkt len", len1+size, len2);
  assertEquals("setPlatformClass(val1) field val1", val1, p.getPlatformClass());

  // set PlatformClass of CIF2 again
  p.setPlatformClass(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setPlatformClass(val2) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setPlatformClass(val2) pkt len", len2, len3);
  assertEquals("setPlatformClass(val2) field val2", val2, p.getPlatformClass());

  // unset PlatformClass of CIF2
  p.setPlatformClass(INT32_NULL);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setPlatformClass(null) CIF2 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setPlatformClass(null) CIF2 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setPlatformClass(null) pkt len", len1, len4);
  assertEquals("setPlatformClass(null) field null", INT32_NULL, p.getPlatformClass());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const int32_t cif7val1 = 0x0;
  const int32_t cif7val2 = val1;
  const int32_t cif7val3 = val2;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getPlatformClass() field null", INT32_NULL, p.getPlatformClass());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getPlatformClass(CURRENT) field null", INT32_NULL, p.getPlatformClass(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getPlatformClass(MIN) field null", INT32_NULL, p.getPlatformClass(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getPlatformClass(MAX) field null", INT32_NULL, p.getPlatformClass(MAX_VALUE));

  // set PlatformClass CURRENT_VALUE
  p.setPlatformClass(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setPlatformClass(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setPlatformClass(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setPlatformClass(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setPlatformClass(val1,CURRENT) field val1bits", cif7val1, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getPlatformClass(CURRENT) field val1", cif7val1, p.getPlatformClass(CURRENT_VALUE));

  // set PlatformClass MIN_VALUE
  p.setPlatformClass(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setPlatformClass(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setPlatformClass(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setPlatformClass(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setPlatformClass(val3,MIN) field val3bits", cif7val3, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getPlatformClass(MIN) field val3", cif7val3, p.getPlatformClass(MIN_VALUE));

  // set PlatformClass MAX_VALUE
  p.setPlatformClass(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setPlatformClass(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setPlatformClass(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setPlatformClass(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setPlatformClass(val2,MAX) field val2bits", cif7val2, VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("getPlatformClass(MAX) field val2", cif7val2, p.getPlatformClass(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    cif7val3,    VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    cif7val2,    VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getPlatformClass(MIN) field val3",     cif7val3,    p.getPlatformClass(MIN_VALUE));
  assertEquals("getPlatformClass(MAX) field val2",     cif7val2,    p.getPlatformClass(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetTrackID () {
  // CIF2 bit 20
  const size_t CIF = 2;
  const size_t CIF_bit = 20;

  const int32_t val1 = 0x12345678;
  const int32_t val2 = 0x87654321;
  const int32_t size = 4;
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF2
  p.addCIF2();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF2() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF2() pkt len", len0+4, len1);
  assertEquals("addCIF2() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getTrackID() field null", INT32_NULL, p.getTrackID());

  // set TrackID of CIF2
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setTrackID(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setTrackID(val1) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setTrackID(val1) pkt len", len1+size, len2);
  assertEquals("setTrackID(val1) field val1", val1, p.getTrackID());

  // set TrackID of CIF2 again
  p.setTrackID(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setTrackID(val2) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setTrackID(val2) pkt len", len2, len3);
  assertEquals("setTrackID(val2) field val2", val2, p.getTrackID());

  // unset TrackID of CIF2
  p.setTrackID(INT32_NULL);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setTrackID(null) CIF2 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setTrackID(null) CIF2 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setTrackID(null) pkt len", len1, len4);
  assertEquals("setTrackID(null) field null", INT32_NULL, p.getTrackID());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const int32_t cif7val1 = 0x0;
  const int32_t cif7val2 = val1;
  const int32_t cif7val3 = val2;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getTrackID() field null", INT32_NULL, p.getTrackID());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getTrackID(CURRENT) field null", INT32_NULL, p.getTrackID(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getTrackID(MIN) field null", INT32_NULL, p.getTrackID(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getTrackID(MAX) field null", INT32_NULL, p.getTrackID(MAX_VALUE));

  // set TrackID CURRENT_VALUE
  p.setTrackID(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setTrackID(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setTrackID(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setTrackID(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setTrackID(val1,CURRENT) field val1bits", cif7val1, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getTrackID(CURRENT) field val1", cif7val1, p.getTrackID(CURRENT_VALUE));

  // set TrackID MIN_VALUE
  p.setTrackID(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setTrackID(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setTrackID(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setTrackID(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setTrackID(val3,MIN) field val3bits", cif7val3, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getTrackID(MIN) field val3", cif7val3, p.getTrackID(MIN_VALUE));

  // set TrackID MAX_VALUE
  p.setTrackID(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setTrackID(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setTrackID(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setTrackID(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setTrackID(val2,MAX) field val2bits", cif7val2, VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("getTrackID(MAX) field val2", cif7val2, p.getTrackID(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    cif7val3,    VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    cif7val2,    VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getTrackID(MIN) field val3",     cif7val3,    p.getTrackID(MIN_VALUE));
  assertEquals("getTrackID(MAX) field val2",     cif7val2,    p.getTrackID(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetInformationSource () {
  // CIF2 bit 21
  const size_t CIF = 2;
  const size_t CIF_bit = 21;

  const int32_t val1 = 0x12345678;
  const int32_t val2 = 0x87654321;
  const int32_t size = 4;
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF2
  p.addCIF2();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF2() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF2() pkt len", len0+4, len1);
  assertEquals("addCIF2() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getInformationSource() field null", INT32_NULL, p.getInformationSource());

  // set InformationSource of CIF2
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setInformationSource(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setInformationSource(val1) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setInformationSource(val1) pkt len", len1+size, len2);
  assertEquals("setInformationSource(val1) field val1", val1, p.getInformationSource());

  // set InformationSource of CIF2 again
  p.setInformationSource(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setInformationSource(val2) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setInformationSource(val2) pkt len", len2, len3);
  assertEquals("setInformationSource(val2) field val2", val2, p.getInformationSource());

  // unset InformationSource of CIF2
  p.setInformationSource(INT32_NULL);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setInformationSource(null) CIF2 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setInformationSource(null) CIF2 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setInformationSource(null) pkt len", len1, len4);
  assertEquals("setInformationSource(null) field null", INT32_NULL, p.getInformationSource());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const int32_t cif7val1 = 0x0;
  const int32_t cif7val2 = val1;
  const int32_t cif7val3 = val2;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getInformationSource() field null", INT32_NULL, p.getInformationSource());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getInformationSource(CURRENT) field null", INT32_NULL, p.getInformationSource(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getInformationSource(MIN) field null", INT32_NULL, p.getInformationSource(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getInformationSource(MAX) field null", INT32_NULL, p.getInformationSource(MAX_VALUE));

  // set InformationSource CURRENT_VALUE
  p.setInformationSource(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setInformationSource(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setInformationSource(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setInformationSource(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setInformationSource(val1,CURRENT) field val1bits", cif7val1, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getInformationSource(CURRENT) field val1", cif7val1, p.getInformationSource(CURRENT_VALUE));

  // set InformationSource MIN_VALUE
  p.setInformationSource(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setInformationSource(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setInformationSource(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setInformationSource(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setInformationSource(val3,MIN) field val3bits", cif7val3, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getInformationSource(MIN) field val3", cif7val3, p.getInformationSource(MIN_VALUE));

  // set InformationSource MAX_VALUE
  p.setInformationSource(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setInformationSource(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setInformationSource(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setInformationSource(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setInformationSource(val2,MAX) field val2bits", cif7val2, VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("getInformationSource(MAX) field val2", cif7val2, p.getInformationSource(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    cif7val3,    VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    cif7val2,    VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getInformationSource(MIN) field val3",     cif7val3,    p.getInformationSource(MIN_VALUE));
  assertEquals("getInformationSource(MAX) field val2",     cif7val2,    p.getInformationSource(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetControllerIDField () {
  // CIF2 bit 23
  const size_t CIF = 2;
  const size_t CIF_bit = 23;

  const int32_t val1 = 0x12345678;
  const int32_t val2 = 0x87654321;
  const int32_t size = 4;
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF2
  p.addCIF2();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF2() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF2() pkt len", len0+4, len1);
  assertEquals("addCIF2() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getControllerIDField() field null", INT32_NULL, p.getControllerIDField());

  // set ControllerIDField of CIF2
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setControllerIDField(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setControllerIDField(val1) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setControllerIDField(val1) pkt len", len1+size, len2);
  assertEquals("setControllerIDField(val1) field val1", val1, p.getControllerIDField());

  // set ControllerIDField of CIF2 again
  p.setControllerIDField(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setControllerIDField(val2) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setControllerIDField(val2) pkt len", len2, len3);
  assertEquals("setControllerIDField(val2) field val2", val2, p.getControllerIDField());

  // unset ControllerIDField of CIF2
  p.setControllerIDField(INT32_NULL);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setControllerIDField(null) CIF2 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setControllerIDField(null) CIF2 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setControllerIDField(null) pkt len", len1, len4);
  assertEquals("setControllerIDField(null) field null", INT32_NULL, p.getControllerIDField());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const int32_t cif7val1 = 0x0;
  const int32_t cif7val2 = val1;
  const int32_t cif7val3 = val2;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getControllerIDField() field null", INT32_NULL, p.getControllerIDField());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getControllerIDField(CURRENT) field null", INT32_NULL, p.getControllerIDField(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getControllerIDField(MIN) field null", INT32_NULL, p.getControllerIDField(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getControllerIDField(MAX) field null", INT32_NULL, p.getControllerIDField(MAX_VALUE));

  // set ControllerIDField CURRENT_VALUE
  p.setControllerIDField(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setControllerIDField(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setControllerIDField(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setControllerIDField(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setControllerIDField(val1,CURRENT) field val1bits", cif7val1, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getControllerIDField(CURRENT) field val1", cif7val1, p.getControllerIDField(CURRENT_VALUE));

  // set ControllerIDField MIN_VALUE
  p.setControllerIDField(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setControllerIDField(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setControllerIDField(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setControllerIDField(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setControllerIDField(val3,MIN) field val3bits", cif7val3, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getControllerIDField(MIN) field val3", cif7val3, p.getControllerIDField(MIN_VALUE));

  // set ControllerIDField MAX_VALUE
  p.setControllerIDField(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setControllerIDField(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setControllerIDField(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setControllerIDField(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setControllerIDField(val2,MAX) field val2bits", cif7val2, VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("getControllerIDField(MAX) field val2", cif7val2, p.getControllerIDField(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    cif7val3,    VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    cif7val2,    VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getControllerIDField(MIN) field val3",     cif7val3,    p.getControllerIDField(MIN_VALUE));
  assertEquals("getControllerIDField(MAX) field val2",     cif7val2,    p.getControllerIDField(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetControlleeIDField () {
  // CIF2 bit 25
  const size_t CIF = 2;
  const size_t CIF_bit = 25;

  const int32_t val1 = 0x12345678;
  const int32_t val2 = 0x87654321;
  const int32_t size = 4;
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF2
  p.addCIF2();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF2() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF2() pkt len", len0+4, len1);
  assertEquals("addCIF2() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getControlleeIDField() field null", INT32_NULL, p.getControlleeIDField());

  // set ControlleeIDField of CIF2
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setControlleeIDField(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setControlleeIDField(val1) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setControlleeIDField(val1) pkt len", len1+size, len2);
  assertEquals("setControlleeIDField(val1) field val1", val1, p.getControlleeIDField());

  // set ControlleeIDField of CIF2 again
  p.setControlleeIDField(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setControlleeIDField(val2) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setControlleeIDField(val2) pkt len", len2, len3);
  assertEquals("setControlleeIDField(val2) field val2", val2, p.getControlleeIDField());

  // unset ControlleeIDField of CIF2
  p.setControlleeIDField(INT32_NULL);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setControlleeIDField(null) CIF2 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setControlleeIDField(null) CIF2 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setControlleeIDField(null) pkt len", len1, len4);
  assertEquals("setControlleeIDField(null) field null", INT32_NULL, p.getControlleeIDField());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const int32_t cif7val1 = 0x0;
  const int32_t cif7val2 = val1;
  const int32_t cif7val3 = val2;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getControlleeIDField() field null", INT32_NULL, p.getControlleeIDField());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getControlleeIDField(CURRENT) field null", INT32_NULL, p.getControlleeIDField(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getControlleeIDField(MIN) field null", INT32_NULL, p.getControlleeIDField(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getControlleeIDField(MAX) field null", INT32_NULL, p.getControlleeIDField(MAX_VALUE));

  // set ControlleeIDField CURRENT_VALUE
  p.setControlleeIDField(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setControlleeIDField(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setControlleeIDField(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setControlleeIDField(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setControlleeIDField(val1,CURRENT) field val1bits", cif7val1, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getControlleeIDField(CURRENT) field val1", cif7val1, p.getControlleeIDField(CURRENT_VALUE));

  // set ControlleeIDField MIN_VALUE
  p.setControlleeIDField(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setControlleeIDField(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setControlleeIDField(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setControlleeIDField(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setControlleeIDField(val3,MIN) field val3bits", cif7val3, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getControlleeIDField(MIN) field val3", cif7val3, p.getControlleeIDField(MIN_VALUE));

  // set ControlleeIDField MAX_VALUE
  p.setControlleeIDField(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setControlleeIDField(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setControlleeIDField(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setControlleeIDField(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setControlleeIDField(val2,MAX) field val2bits", cif7val2, VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("getControlleeIDField(MAX) field val2", cif7val2, p.getControlleeIDField(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    cif7val3,    VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    cif7val2,    VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getControlleeIDField(MIN) field val3",     cif7val3,    p.getControlleeIDField(MIN_VALUE));
  assertEquals("getControlleeIDField(MAX) field val2",     cif7val2,    p.getControlleeIDField(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetCitedMessageID () {
  // CIF2 bit 26
  const size_t CIF = 2;
  const size_t CIF_bit = 26;

  const int32_t val1 = 0x12345678;
  const int32_t val2 = 0x87654321;
  const int32_t size = 4;
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF2
  p.addCIF2();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF2() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF2() pkt len", len0+4, len1);
  assertEquals("addCIF2() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getCitedMessageID() field null", INT32_NULL, p.getCitedMessageID());

  // set CitedMessageID of CIF2
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setCitedMessageID(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setCitedMessageID(val1) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCitedMessageID(val1) pkt len", len1+size, len2);
  assertEquals("setCitedMessageID(val1) field val1", val1, p.getCitedMessageID());

  // set CitedMessageID of CIF2 again
  p.setCitedMessageID(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setCitedMessageID(val2) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCitedMessageID(val2) pkt len", len2, len3);
  assertEquals("setCitedMessageID(val2) field val2", val2, p.getCitedMessageID());

  // unset CitedMessageID of CIF2
  p.setCitedMessageID(INT32_NULL);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setCitedMessageID(null) CIF2 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCitedMessageID(null) CIF2 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setCitedMessageID(null) pkt len", len1, len4);
  assertEquals("setCitedMessageID(null) field null", INT32_NULL, p.getCitedMessageID());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const int32_t cif7val1 = 0x0;
  const int32_t cif7val2 = val1;
  const int32_t cif7val3 = val2;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getCitedMessageID() field null", INT32_NULL, p.getCitedMessageID());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getCitedMessageID(CURRENT) field null", INT32_NULL, p.getCitedMessageID(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getCitedMessageID(MIN) field null", INT32_NULL, p.getCitedMessageID(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getCitedMessageID(MAX) field null", INT32_NULL, p.getCitedMessageID(MAX_VALUE));

  // set CitedMessageID CURRENT_VALUE
  p.setCitedMessageID(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setCitedMessageID(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setCitedMessageID(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCitedMessageID(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCitedMessageID(val1,CURRENT) field val1bits", cif7val1, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getCitedMessageID(CURRENT) field val1", cif7val1, p.getCitedMessageID(CURRENT_VALUE));

  // set CitedMessageID MIN_VALUE
  p.setCitedMessageID(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setCitedMessageID(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setCitedMessageID(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCitedMessageID(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCitedMessageID(val3,MIN) field val3bits", cif7val3, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCitedMessageID(MIN) field val3", cif7val3, p.getCitedMessageID(MIN_VALUE));

  // set CitedMessageID MAX_VALUE
  p.setCitedMessageID(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setCitedMessageID(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setCitedMessageID(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCitedMessageID(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCitedMessageID(val2,MAX) field val2bits", cif7val2, VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("getCitedMessageID(MAX) field val2", cif7val2, p.getCitedMessageID(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    cif7val3,    VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    cif7val2,    VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCitedMessageID(MIN) field val3",     cif7val3,    p.getCitedMessageID(MIN_VALUE));
  assertEquals("getCitedMessageID(MAX) field val2",     cif7val2,    p.getCitedMessageID(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetChildrenSID () {
  // CIF2 bit 27
  const size_t CIF = 2;
  const size_t CIF_bit = 27;

  const int32_t val1 = 0x12345678;
  const int32_t val2 = 0x87654321;
  const int32_t size = 4;
  const std::string val1_str = Utilities::format("%d", val1);
  const std::string val2_str = Utilities::format("%d", val2);
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF2
  p.addCIF2();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF2() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF2() pkt len", len0+4, len1);
  assertEquals("addCIF2() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getChildrenSID() field null", INT32_NULL, p.getChildrenSID());
  assertEquals("getChildrenSIDString() field null", std::string(""), p.getChildrenSIDString());

  // set ChildrenSID of CIF2
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setChildrenSID(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setChildrenSID(val1) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setChildrenSID(val1) pkt len", len1+size, len2);
  assertEquals("setChildrenSID(val1) field val1", val1, p.getChildrenSID());
  assertEquals("getChildrenSIDString() field val1", val1_str, p.getChildrenSIDString());

  // set ChildrenSID of CIF2 again, this time using a string
  p.setChildrenSIDString(val2_str);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setChildrenSIDString(val2_str) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setChildrenSIDString(val2_str) pkt len", len2, len3);
  assertEquals("setChildrenSIDString(val2_str) field val2_str", val2_str, p.getChildrenSIDString());
  assertEquals("getChildrenSID() field val2", val2, p.getChildrenSID());

  // unset ChildrenSID of CIF2
  p.setChildrenSID(INT32_NULL);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setChildrenSID(null) CIF2 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setChildrenSID(null) CIF2 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setChildrenSID(null) pkt len", len1, len4);
  assertEquals("setChildrenSID(null) field null", INT32_NULL, p.getChildrenSID());
  assertEquals("getChildrenSIDString() field null", std::string(""), p.getChildrenSIDString());

  // set ChildrenSID of CIF2 again
  p.setChildrenSID(val2);
  int32_t len5 = p.getPayloadLength();
  assertEquals("setChildrenSID(val2) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setChildrenSID(val2) pkt len", len2, len5);
  assertEquals("setChildrenSID(val2) field val2", val2, p.getChildrenSID());
  assertEquals("getChildrenSIDString() field val2", val2_str, p.getChildrenSIDString());

  // unset ChildrenSID of CIF2 again, this time using empty string
  p.setChildrenSIDString(std::string(""));
  int32_t len6 = p.getPayloadLength();
  assertEquals("setChildrenSIDString(null) CIF2 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setChildrenSIDString(null) CIF2 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setChildrenSIDString(null) pkt len", len1, len6);
  assertEquals("getChildrenSIDString() field null", std::string(""), p.getChildrenSIDString());
  assertEquals("getChildrenSID() field null", INT32_NULL, p.getChildrenSID());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const int32_t cif7val1 = 0x0;
  const int32_t cif7val2 = val1;
  const int32_t cif7val3 = val2;
  const std::string cif7val1_str = Utilities::format("%d", cif7val1);
  const std::string cif7val2_str = val1_str;
  const std::string cif7val3_str = val2_str;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getChildrenSID() field null", INT32_NULL, p.getChildrenSID());
  assertEquals("getChildrenSIDString() field null", std::string(""), p.getChildrenSIDString());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getChildrenSID(CURRENT) field null", INT32_NULL, p.getChildrenSID(CURRENT_VALUE));
  assertEquals("getChildrenSIDString(CURRENT) field null", std::string(""), p.getChildrenSIDString(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getChildrenSID(MIN) field null", INT32_NULL, p.getChildrenSID(MIN_VALUE));
  assertEquals("getChildrenSIDString(MIN) field null", std::string(""), p.getChildrenSIDString(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getChildrenSID(MAX) field null", INT32_NULL, p.getChildrenSID(MAX_VALUE));
  assertEquals("getChildrenSIDString(MAX) field null", std::string(""), p.getChildrenSIDString(MAX_VALUE));

  // set ChildrenSID CURRENT_VALUE
  p.setChildrenSID(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setChildrenSID(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setChildrenSID(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setChildrenSID(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setChildrenSID(val1,CURRENT) field val1bits", cif7val1, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getChildrenSID(CURRENT) field val1", cif7val1, p.getChildrenSID(CURRENT_VALUE));
  assertEquals("getChildrenSIDString(CURRENT) field val1", cif7val1_str, p.getChildrenSIDString(CURRENT_VALUE));

  // set ChildrenSIDString MIN_VALUE
  p.setChildrenSIDString(cif7val3_str, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setChildrenSIDString(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setChildrenSIDString(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setChildrenSIDString(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setChildrenSIDString(val3,MIN) field val3bits", cif7val3, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getChildrenSIDString(MIN) field val3", cif7val3_str, p.getChildrenSIDString(MIN_VALUE));
  assertEquals("getChildrenSID(MIN) field val3", cif7val3, p.getChildrenSID(MIN_VALUE));

  // set ChildrenSID MAX_VALUE
  p.setChildrenSID(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setChildrenSID(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setChildrenSID(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setChildrenSID(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setChildrenSID(val2,MAX) field val2bits", cif7val2, VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("getChildrenSID(MAX) field val2", cif7val2, p.getChildrenSID(MAX_VALUE));
  assertEquals("getChildrenSIDString(MAX) field val2", cif7val2_str, p.getChildrenSIDString(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    cif7val3,    VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    cif7val2,    VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getChildrenSID(MIN) field val3",     cif7val3,    p.getChildrenSID(MIN_VALUE));
  assertEquals("getChildrenSID(MAX) field val2",     cif7val2,    p.getChildrenSID(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetParentsSID () {
  // CIF2 bit 28
  const size_t CIF = 2;
  const size_t CIF_bit = 28;

  const int32_t val1 = 0x12345678;
  const int32_t val2 = 0x87654321;
  const int32_t size = 4;
  const std::string val1_str = Utilities::format("%d", val1);
  const std::string val2_str = Utilities::format("%d", val2);
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF2
  p.addCIF2();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF2() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF2() pkt len", len0+4, len1);
  assertEquals("addCIF2() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getParentsSID() field null", INT32_NULL, p.getParentsSID());
  assertEquals("getParentsSIDString() field null", std::string(""), p.getParentsSIDString());

  // set ParentsSID of CIF2
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setParentsSID(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setParentsSID(val1) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setParentsSID(val1) pkt len", len1+size, len2);
  assertEquals("setParentsSID(val1) field val1", val1, p.getParentsSID());
  assertEquals("getParentsSIDString() field val1", val1_str, p.getParentsSIDString());

  // set ParentsSID of CIF2 again, this time using a string
  p.setParentsSIDString(val2_str);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setParentsSIDString(val2_str) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setParentsSIDString(val2_str) pkt len", len2, len3);
  assertEquals("setParentsSIDString(val2_str) field val2_str", val2_str, p.getParentsSIDString());
  assertEquals("getParentsSID() field val2", val2, p.getParentsSID());

  // unset ParentsSID of CIF2
  p.setParentsSID(INT32_NULL);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setParentsSID(null) CIF2 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setParentsSID(null) CIF2 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setParentsSID(null) pkt len", len1, len4);
  assertEquals("setParentsSID(null) field null", INT32_NULL, p.getParentsSID());
  assertEquals("getParentsSIDString() field null", std::string(""), p.getParentsSIDString());

  // set ParentsSID of CIF2 again
  p.setParentsSID(val2);
  int32_t len5 = p.getPayloadLength();
  assertEquals("setParentsSID(val2) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setParentsSID(val2) pkt len", len2, len5);
  assertEquals("setParentsSID(val2) field val2", val2, p.getParentsSID());
  assertEquals("getParentsSIDString() field val2", val2_str, p.getParentsSIDString());

  // unset ParentsSID of CIF2 again, this time using empty string
  p.setParentsSIDString(std::string(""));
  int32_t len6 = p.getPayloadLength();
  assertEquals("setParentsSIDString(null) CIF2 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setParentsSIDString(null) CIF2 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setParentsSIDString(null) pkt len", len1, len6);
  assertEquals("getParentsSIDString() field null", std::string(""), p.getParentsSIDString());
  assertEquals("getParentsSID() field null", INT32_NULL, p.getParentsSID());
  
  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const int32_t cif7val1 = 0x0;
  const int32_t cif7val2 = val1;
  const int32_t cif7val3 = val2;
  const std::string cif7val1_str = Utilities::format("%d", cif7val1);
  const std::string cif7val2_str = val1_str;
  const std::string cif7val3_str = val2_str;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getParentsSID() field null", INT32_NULL, p.getParentsSID());
  assertEquals("getParentsSIDString() field null", std::string(""), p.getParentsSIDString());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getParentsSID(CURRENT) field null", INT32_NULL, p.getParentsSID(CURRENT_VALUE));
  assertEquals("getParentsSIDString(CURRENT) field null", std::string(""), p.getParentsSIDString(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getParentsSID(MIN) field null", INT32_NULL, p.getParentsSID(MIN_VALUE));
  assertEquals("getParentsSIDString(MIN) field null", std::string(""), p.getParentsSIDString(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getParentsSID(MAX) field null", INT32_NULL, p.getParentsSID(MAX_VALUE));
  assertEquals("getParentsSIDString(MAX) field null", std::string(""), p.getParentsSIDString(MAX_VALUE));

  // set ParentsSID CURRENT_VALUE
  p.setParentsSID(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setParentsSID(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setParentsSID(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setParentsSID(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setParentsSID(val1,CURRENT) field val1bits", cif7val1, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getParentsSID(CURRENT) field val1", cif7val1, p.getParentsSID(CURRENT_VALUE));
  assertEquals("getParentsSIDString(CURRENT) field val1", cif7val1_str, p.getParentsSIDString(CURRENT_VALUE));

  // set ParentsSIDString MIN_VALUE
  p.setParentsSIDString(cif7val3_str, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setParentsSIDString(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setParentsSIDString(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setParentsSIDString(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setParentsSIDString(val3,MIN) field val3bits", cif7val3, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getParentsSIDString(MIN) field val3", cif7val3_str, p.getParentsSIDString(MIN_VALUE));
  assertEquals("getParentsSID(MIN) field val3", cif7val3, p.getParentsSID(MIN_VALUE));

  // set ParentsSID MAX_VALUE
  p.setParentsSID(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setParentsSID(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setParentsSID(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setParentsSID(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setParentsSID(val2,MAX) field val2bits", cif7val2, VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("getParentsSID(MAX) field val2", cif7val2, p.getParentsSID(MAX_VALUE));
  assertEquals("getParentsSIDString(MAX) field val2", cif7val2_str, p.getParentsSIDString(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    cif7val3,    VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    cif7val2,    VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getParentsSID(MIN) field val3",     cif7val3,    p.getParentsSID(MIN_VALUE));
  assertEquals("getParentsSID(MAX) field val2",     cif7val2,    p.getParentsSID(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetSiblingsSID () {
  // CIF2 bit 29
  const size_t CIF = 2;
  const size_t CIF_bit = 29;

  const int32_t val1 = 0x12345678;
  const int32_t val2 = 0x87654321;
  const int32_t size = 4;
  const std::string val1_str = Utilities::format("%d", val1);
  const std::string val2_str = Utilities::format("%d", val2);
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF2
  p.addCIF2();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF2() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF2() pkt len", len0+4, len1);
  assertEquals("addCIF2() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getSiblingsSID() field null", INT32_NULL, p.getSiblingsSID());
  assertEquals("getSiblingsSIDString() field null", std::string(""), p.getSiblingsSIDString());

  // set SiblingsSID of CIF2
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setSiblingsSID(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setSiblingsSID(val1) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSiblingsSID(val1) pkt len", len1+size, len2);
  assertEquals("setSiblingsSID(val1) field val1", val1, p.getSiblingsSID());
  assertEquals("getSiblingsSIDString() field val1", val1_str, p.getSiblingsSIDString());

  // set SiblingsSID of CIF2 again, this time using a string
  p.setSiblingsSIDString(val2_str);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setSiblingsSIDString(val2_str) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSiblingsSIDString(val2_str) pkt len", len2, len3);
  assertEquals("setSiblingsSIDString(val2_str) field val2_str", val2_str, p.getSiblingsSIDString());
  assertEquals("getSiblingsSID() field val2", val2, p.getSiblingsSID());

  // unset SiblingsSID of CIF2
  p.setSiblingsSID(INT32_NULL);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setSiblingsSID(null) CIF2 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSiblingsSID(null) CIF2 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setSiblingsSID(null) pkt len", len1, len4);
  assertEquals("setSiblingsSID(null) field null", INT32_NULL, p.getSiblingsSID());
  assertEquals("getSiblingsSIDString() field null", std::string(""), p.getSiblingsSIDString());

  // set SiblingsSID of CIF2 again
  p.setSiblingsSID(val2);
  int32_t len5 = p.getPayloadLength();
  assertEquals("setSiblingsSID(val2) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSiblingsSID(val2) pkt len", len2, len5);
  assertEquals("setSiblingsSID(val2) field val2", val2, p.getSiblingsSID());
  assertEquals("getSiblingsSIDString() field val2", val2_str, p.getSiblingsSIDString());

  // unset SiblingsSID of CIF2 again, this time using empty string
  p.setSiblingsSIDString(std::string(""));
  int32_t len6 = p.getPayloadLength();
  assertEquals("setSiblingsSIDString(null) CIF2 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSiblingsSIDString(null) CIF2 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setSiblingsSIDString(null) pkt len", len1, len6);
  assertEquals("getSiblingsSIDString() field null", std::string(""), p.getSiblingsSIDString());
  assertEquals("getSiblingsSID() field null", INT32_NULL, p.getSiblingsSID());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const int32_t cif7val1 = 0x0;
  const int32_t cif7val2 = val1;
  const int32_t cif7val3 = val2;
  const std::string cif7val1_str = Utilities::format("%d", cif7val1);
  const std::string cif7val2_str = val1_str;
  const std::string cif7val3_str = val2_str;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getSiblingsSID() field null", INT32_NULL, p.getSiblingsSID());
  assertEquals("getSiblingsSIDString() field null", std::string(""), p.getSiblingsSIDString());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getSiblingsSID(CURRENT) field null", INT32_NULL, p.getSiblingsSID(CURRENT_VALUE));
  assertEquals("getSiblingsSIDString(CURRENT) field null", std::string(""), p.getSiblingsSIDString(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getSiblingsSID(MIN) field null", INT32_NULL, p.getSiblingsSID(MIN_VALUE));
  assertEquals("getSiblingsSIDString(MIN) field null", std::string(""), p.getSiblingsSIDString(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getSiblingsSID(MAX) field null", INT32_NULL, p.getSiblingsSID(MAX_VALUE));
  assertEquals("getSiblingsSIDString(MAX) field null", std::string(""), p.getSiblingsSIDString(MAX_VALUE));

  // set SiblingsSID CURRENT_VALUE
  p.setSiblingsSID(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setSiblingsSID(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setSiblingsSID(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSiblingsSID(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setSiblingsSID(val1,CURRENT) field val1bits", cif7val1, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getSiblingsSID(CURRENT) field val1", cif7val1, p.getSiblingsSID(CURRENT_VALUE));
  assertEquals("getSiblingsSIDString(CURRENT) field val1", cif7val1_str, p.getSiblingsSIDString(CURRENT_VALUE));

  // set SiblingsSIDString MIN_VALUE
  p.setSiblingsSIDString(cif7val3_str, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setSiblingsSIDString(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setSiblingsSIDString(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSiblingsSIDString(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setSiblingsSIDString(val3,MIN) field val3bits", cif7val3, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getSiblingsSIDString(MIN) field val3", cif7val3_str, p.getSiblingsSIDString(MIN_VALUE));
  assertEquals("getSiblingsSID(MIN) field val3", cif7val3, p.getSiblingsSID(MIN_VALUE));

  // set SiblingsSID MAX_VALUE
  p.setSiblingsSID(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setSiblingsSID(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setSiblingsSID(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSiblingsSID(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setSiblingsSID(val2,MAX) field val2bits", cif7val2, VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("getSiblingsSID(MAX) field val2", cif7val2, p.getSiblingsSID(MAX_VALUE));
  assertEquals("getSiblingsSIDString(MAX) field val2", cif7val2_str, p.getSiblingsSIDString(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    cif7val3,    VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    cif7val2,    VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getSiblingsSID(MIN) field val3",     cif7val3,    p.getSiblingsSID(MIN_VALUE));
  assertEquals("getSiblingsSID(MAX) field val2",     cif7val2,    p.getSiblingsSID(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetCitedSID () {
  // CIF2 bit 30
  const size_t CIF = 2;
  const size_t CIF_bit = 30;

  const int32_t val1 = 0x12345678;
  const int32_t val2 = 0x87654321;
  const int32_t size = 4;
  const std::string val1_str = Utilities::format("%d", val1);
  const std::string val2_str = Utilities::format("%d", val2);
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF2
  p.addCIF2();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF2() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF2() pkt len", len0+4, len1);
  assertEquals("addCIF2() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getCitedSID() field null", INT32_NULL, p.getCitedSID());
  assertEquals("getCitedSIDString() field null", std::string(""), p.getCitedSIDString());

  // set CitedSID of CIF2
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setCitedSID(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setCitedSID(val1) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCitedSID(val1) pkt len", len1+size, len2);
  assertEquals("setCitedSID(val1) field val1", val1, p.getCitedSID());
  assertEquals("getCitedSIDString() field val1", val1_str, p.getCitedSIDString());

  // set CitedSID of CIF2 again, this time using a string
  p.setCitedSIDString(val2_str);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setCitedSIDString(val2_str) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCitedSIDString(val2_str) pkt len", len2, len3);
  assertEquals("setCitedSIDString(val2_str) field val2_str", val2_str, p.getCitedSIDString());
  assertEquals("getCitedSID() field val2", val2, p.getCitedSID());

  // unset CitedSID of CIF2
  p.setCitedSID(INT32_NULL);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setCitedSID(null) CIF2 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCitedSID(null) CIF2 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setCitedSID(null) pkt len", len1, len4);
  assertEquals("setCitedSID(null) field null", INT32_NULL, p.getCitedSID());
  assertEquals("getCitedSIDString() field null", std::string(""), p.getCitedSIDString());

  // set CitedSID of CIF2 again
  p.setCitedSID(val2);
  int32_t len5 = p.getPayloadLength();
  assertEquals("setCitedSID(val2) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCitedSID(val2) pkt len", len2, len5);
  assertEquals("setCitedSID(val2) field val2", val2, p.getCitedSID());
  assertEquals("getCitedSIDString() field val2", val2_str, p.getCitedSIDString());

  // unset CitedSID of CIF2 again, this time using empty string
  p.setCitedSIDString(std::string(""));
  int32_t len6 = p.getPayloadLength();
  assertEquals("setCitedSIDString(null) CIF2 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCitedSIDString(null) CIF2 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setCitedSIDString(null) pkt len", len1, len6);
  assertEquals("getCitedSIDString() field null", std::string(""), p.getCitedSIDString());
  assertEquals("getCitedSID() field null", INT32_NULL, p.getCitedSID());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const int32_t cif7val1 = 0x0;
  const int32_t cif7val2 = val1;
  const int32_t cif7val3 = val2;
  const std::string cif7val1_str = Utilities::format("%d", cif7val1);
  const std::string cif7val2_str = val1_str;
  const std::string cif7val3_str = val2_str;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getCitedSID() field null", INT32_NULL, p.getCitedSID());
  assertEquals("getCitedSIDString() field null", std::string(""), p.getCitedSIDString());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getCitedSID(CURRENT) field null", INT32_NULL, p.getCitedSID(CURRENT_VALUE));
  assertEquals("getCitedSIDString(CURRENT) field null", std::string(""), p.getCitedSIDString(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getCitedSID(MIN) field null", INT32_NULL, p.getCitedSID(MIN_VALUE));
  assertEquals("getCitedSIDString(MIN) field null", std::string(""), p.getCitedSIDString(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getCitedSID(MAX) field null", INT32_NULL, p.getCitedSID(MAX_VALUE));
  assertEquals("getCitedSIDString(MAX) field null", std::string(""), p.getCitedSIDString(MAX_VALUE));

  // set CitedSID CURRENT_VALUE
  p.setCitedSID(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setCitedSID(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setCitedSID(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCitedSID(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCitedSID(val1,CURRENT) field val1bits", cif7val1, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getCitedSID(CURRENT) field val1", cif7val1, p.getCitedSID(CURRENT_VALUE));
  assertEquals("getCitedSIDString(CURRENT) field val1", cif7val1_str, p.getCitedSIDString(CURRENT_VALUE));

  // set CitedSIDString MIN_VALUE
  p.setCitedSIDString(cif7val3_str, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setCitedSIDString(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setCitedSIDString(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCitedSIDString(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCitedSIDString(val3,MIN) field val3bits", cif7val3, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCitedSIDString(MIN) field val3", cif7val3_str, p.getCitedSIDString(MIN_VALUE));
  assertEquals("getCitedSID(MIN) field val3", cif7val3, p.getCitedSID(MIN_VALUE));

  // set CitedSID MAX_VALUE
  p.setCitedSID(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setCitedSID(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setCitedSID(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCitedSID(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCitedSID(val2,MAX) field val2bits", cif7val2, VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("getCitedSID(MAX) field val2", cif7val2, p.getCitedSID(MAX_VALUE));
  assertEquals("getCitedSIDString(MAX) field val2", cif7val2_str, p.getCitedSIDString(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    cif7val3,    VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    cif7val2,    VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCitedSID(MIN) field val3",     cif7val3,    p.getCitedSID(MIN_VALUE));
  assertEquals("getCitedSID(MAX) field val2",     cif7val2,    p.getCitedSID(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetBindField () {
  // CIF2 bit 31
  const size_t CIF = 2;
  const size_t CIF_bit = 31;

  const int32_t val1 = 0x12345678;
  const int32_t val2 = 0x87654321;
  const int32_t size = 4;
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF2
  p.addCIF2();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF2() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF2() pkt len", len0+4, len1);
  assertEquals("addCIF2() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getBindField() field null", INT32_NULL, p.getBindField());

  // set BindField of CIF2
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setBindField(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setBindField(val1) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setBindField(val1) pkt len", len1+size, len2);
  assertEquals("setBindField(val1) field val1", val1, p.getBindField());

  // set BindField of CIF2 again
  p.setBindField(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setBindField(val2) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setBindField(val2) pkt len", len2, len3);
  assertEquals("setBindField(val2) field val2", val2, p.getBindField());

  // unset BindField of CIF2
  p.setBindField(INT32_NULL);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setBindField(null) CIF2 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setBindField(null) CIF2 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setBindField(null) pkt len", len1, len4);
  assertEquals("setBindField(null) field null", INT32_NULL, p.getBindField());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const int32_t cif7val1 = 0x0;
  const int32_t cif7val2 = val1;
  const int32_t cif7val3 = val2;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getBindField() field null", INT32_NULL, p.getBindField());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getBindField(CURRENT) field null", INT32_NULL, p.getBindField(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getBindField(MIN) field null", INT32_NULL, p.getBindField(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getBindField(MAX) field null", INT32_NULL, p.getBindField(MAX_VALUE));

  // set BindField CURRENT_VALUE
  p.setBindField(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setBindField(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setBindField(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setBindField(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setBindField(val1,CURRENT) field val1bits", cif7val1, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getBindField(CURRENT) field val1", cif7val1, p.getBindField(CURRENT_VALUE));

  // set BindField MIN_VALUE
  p.setBindField(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setBindField(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setBindField(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setBindField(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setBindField(val3,MIN) field val3bits", cif7val3, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getBindField(MIN) field val3", cif7val3, p.getBindField(MIN_VALUE));

  // set BindField MAX_VALUE
  p.setBindField(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setBindField(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setBindField(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setBindField(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setBindField(val2,MAX) field val2bits", cif7val2, VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("getBindField(MAX) field val2", cif7val2, p.getBindField(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    cif7val3,    VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    cif7val2,    VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getBindField(MIN) field val3",     cif7val3,    p.getBindField(MIN_VALUE));
  assertEquals("getBindField(MAX) field val2",     cif7val2,    p.getBindField(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetControllerUUIDField () {
  // CIF2 bit 22
  const size_t CIF = 2;
  const size_t CIF_bit = 22;
  const int32_t size = 16;

  const uuid_t u1 = {'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'};
  const UUID val1 = UUID(u1);
  const std::string val1_str("30313233-3435-3637-3839-616263646566");
  const uuid_t u2 = {'f','e','d','c','b','a','9','8','7','6','5','4','3','2','1','0'};
  const UUID val2 = UUID(u2);
  const std::string val2_str("66656463-6261-3938-3736-353433323130");
  const UUID val_null = UUID();
  const std::string val_null_str("00000000-0000-0000-0000-000000000000");
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF2
  p.addCIF2();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF2() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF2() pkt len", len0+4, len1);
  assertEquals("addCIF2() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getControllerUUIDField() field null", val_null, p.getControllerUUIDField());
  assertEquals("getControllerUUIDField() field null str", val_null_str, p.getControllerUUIDField().toString());

  // set ControllerUUIDField of CIF2
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setControllerUUIDField(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setControllerUUIDField(val1) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setControllerUUIDField(val1) pkt len", len1+size, len2);
  assertEquals("getControllerUUIDField() field val1", val1, p.getControllerUUIDField());
  assertEquals("getControllerUUIDField() field val1", val1_str, p.getControllerUUIDField().toString());

  // set ControllerUUIDField of CIF2 again
  p.setControllerUUIDField(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setControllerUUIDField(val2) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setControllerUUIDField(val2) pkt len", len2, len3);
  assertEquals("getControllerUUIDField() field val2", val2, p.getControllerUUIDField());
  assertEquals("getControllerUUIDField() field val2", val2_str, p.getControllerUUIDField().toString());

  // unset ControllerUUIDField of CIF2
  p.setControllerUUIDField(val_null);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setControllerUUIDField(null) CIF2 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setControllerUUIDField(null) CIF2 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setControllerUUIDField(null) pkt len", len1, len4);
  assertEquals("getControllerUUIDField() field null", val_null, p.getControllerUUIDField());
  assertEquals("getControllerUUIDField() field null str", val_null_str, p.getControllerUUIDField().toString());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const uuid_t cif7u1 = {'5','5','5','5','5','5','5','5','5','5','5','5','5','5','5','5'};
  const UUID cif7val1 = UUID(cif7u1);
  const UUID cif7val2 = val1;
  const UUID cif7val3 = val2;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getControllerUUIDField() field null", val_null, p.getControllerUUIDField());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getControllerUUIDField(CURRENT) field null", val_null, p.getControllerUUIDField(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getControllerUUIDField(MIN) field null", val_null, p.getControllerUUIDField(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getControllerUUIDField(MAX) field null", val_null, p.getControllerUUIDField(MAX_VALUE));

  // set ControllerUUIDField CURRENT_VALUE
  p.setControllerUUIDField(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setControllerUUIDField(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setControllerUUIDField(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setControllerUUIDField(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setControllerUUIDField(val1,CURRENT) field val1bits", cif7val1, VRTMath::unpackUUID(p.getPayloadPointer(), 12));
  assertEquals("getControllerUUIDField(CURRENT) field val1", cif7val1, p.getControllerUUIDField(CURRENT_VALUE));

  // set ControllerUUIDField MIN_VALUE
  p.setControllerUUIDField(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setControllerUUIDField(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setControllerUUIDField(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setControllerUUIDField(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setControllerUUIDField(val3,MIN) field val3bits", cif7val3, VRTMath::unpackUUID(p.getPayloadPointer(), 12+2*size));
  assertEquals("getControllerUUIDField(MIN) field val3", cif7val3, p.getControllerUUIDField(MIN_VALUE));

  // set ControllerUUIDField MAX_VALUE
  p.setControllerUUIDField(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setControllerUUIDField(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setControllerUUIDField(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setControllerUUIDField(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setControllerUUIDField(val2,MAX) field val2bits", cif7val2, VRTMath::unpackUUID(p.getPayloadPointer(), 12+size));
  assertEquals("getControllerUUIDField(MAX) field val2", cif7val2, p.getControllerUUIDField(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    cif7val3,    VRTMath::unpackUUID(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    cif7val2,    VRTMath::unpackUUID(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getControllerUUIDField(MIN) field val3",     cif7val3,    p.getControllerUUIDField(MIN_VALUE));
  assertEquals("getControllerUUIDField(MAX) field val2",     cif7val2,    p.getControllerUUIDField(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetControlleeUUIDField () {
  // CIF2 bit 24
  const size_t CIF = 2;
  const size_t CIF_bit = 24;
  const int32_t size = 16;

  const uuid_t u1 = {'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'};
  const UUID val1 = UUID(u1);
  const std::string val1_str("30313233-3435-3637-3839-616263646566");
  const uuid_t u2 = {'f','e','d','c','b','a','9','8','7','6','5','4','3','2','1','0'};
  const UUID val2 = UUID(u2);
  const std::string val2_str("66656463-6261-3938-3736-353433323130");
  const UUID val_null = UUID();
  const std::string val_null_str("00000000-0000-0000-0000-000000000000");
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF2
  p.addCIF2();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF2() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF2() pkt len", len0+4, len1);
  assertEquals("addCIF2() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getControlleeUUIDField() field null", val_null, p.getControlleeUUIDField());
  assertEquals("getControlleeUUIDField() field null str", val_null_str, p.getControlleeUUIDField().toString());

  // set ControlleeUUIDField of CIF2
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setControlleeUUIDField(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setControlleeUUIDField(val1) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setControlleeUUIDField(val1) pkt len", len1+size, len2);
  assertEquals("getControlleeUUIDField() field val1", val1, p.getControlleeUUIDField());
  assertEquals("getControlleeUUIDField() field val1", val1_str, p.getControlleeUUIDField().toString());

  // set ControlleeUUIDField of CIF2 again
  p.setControlleeUUIDField(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setControlleeUUIDField(val2) CIF2 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setControlleeUUIDField(val2) pkt len", len2, len3);
  assertEquals("getControlleeUUIDField() field val2", val2, p.getControlleeUUIDField());
  assertEquals("getControlleeUUIDField() field val2", val2_str, p.getControlleeUUIDField().toString());

  // unset ControlleeUUIDField of CIF2
  p.setControlleeUUIDField(val_null);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setControlleeUUIDField(null) CIF2 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setControlleeUUIDField(null) CIF2 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setControlleeUUIDField(null) pkt len", len1, len4);
  assertEquals("getControlleeUUIDField() field null", val_null, p.getControlleeUUIDField());
  assertEquals("getControlleeUUIDField() field null str", val_null_str, p.getControlleeUUIDField().toString());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const uuid_t cif7u1 = {'5','5','5','5','5','5','5','5','5','5','5','5','5','5','5','5'};
  const UUID cif7val1 = UUID(cif7u1);
  const UUID cif7val2 = val1;
  const UUID cif7val3 = val2;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getControlleeUUIDField() field null", val_null, p.getControlleeUUIDField());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getControlleeUUIDField(CURRENT) field null", val_null, p.getControlleeUUIDField(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getControlleeUUIDField(MIN) field null", val_null, p.getControlleeUUIDField(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getControlleeUUIDField(MAX) field null", val_null, p.getControlleeUUIDField(MAX_VALUE));

  // set ControlleeUUIDField CURRENT_VALUE
  p.setControlleeUUIDField(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setControlleeUUIDField(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setControlleeUUIDField(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setControlleeUUIDField(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setControlleeUUIDField(val1,CURRENT) field val1bits", cif7val1, VRTMath::unpackUUID(p.getPayloadPointer(), 12));
  assertEquals("getControlleeUUIDField(CURRENT) field val1", cif7val1, p.getControlleeUUIDField(CURRENT_VALUE));

  // set ControlleeUUIDField MIN_VALUE
  p.setControlleeUUIDField(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setControlleeUUIDField(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setControlleeUUIDField(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setControlleeUUIDField(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setControlleeUUIDField(val3,MIN) field val3bits", cif7val3, VRTMath::unpackUUID(p.getPayloadPointer(), 12+2*size));
  assertEquals("getControlleeUUIDField(MIN) field val3", cif7val3, p.getControlleeUUIDField(MIN_VALUE));

  // set ControlleeUUIDField MAX_VALUE
  p.setControlleeUUIDField(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setControlleeUUIDField(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setControlleeUUIDField(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setControlleeUUIDField(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setControlleeUUIDField(val2,MAX) field val2bits", cif7val2, VRTMath::unpackUUID(p.getPayloadPointer(), 12+size));
  assertEquals("getControlleeUUIDField(MAX) field val2", cif7val2, p.getControlleeUUIDField(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    cif7val3,    VRTMath::unpackUUID(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    cif7val2,    VRTMath::unpackUUID(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getControlleeUUIDField(MIN) field val3",     cif7val3,    p.getControlleeUUIDField(MIN_VALUE));
  assertEquals("getControlleeUUIDField(MAX) field val2",     cif7val2,    p.getControlleeUUIDField(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

// CIF3 tests

void BasicQueryAcknowledgePacketTest::testSetNetworkID () {
  // CIF3 bit 1
  const size_t CIF = 3;
  const size_t CIF_bit = 1;

  const int32_t val1 = 0x12345678;
  const int32_t val2 = 0x87654321;
  const int32_t size = 4;
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF3
  p.addCIF3();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF3() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF3() pkt len", len0+4, len1);
  assertEquals("addCIF3() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getNetworkID() field null", INT32_NULL, p.getNetworkID());

  // set NetworkID of CIF3
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setNetworkID(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setNetworkID(val1) CIF3 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setNetworkID(val1) pkt len", len1+size, len2);
  assertEquals("setNetworkID(val1) field val1", val1, p.getNetworkID());

  // set NetworkID of CIF3 again
  p.setNetworkID(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setNetworkID(val2) CIF3 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setNetworkID(val2) pkt len", len2, len3);
  assertEquals("setNetworkID(val2) field val2", val2, p.getNetworkID());

  // unset NetworkID of CIF3
  p.setNetworkID(INT32_NULL);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setNetworkID(null) CIF3 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setNetworkID(null) CIF3 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setNetworkID(null) pkt len", len1, len4);
  assertEquals("setNetworkID(null) field null", INT32_NULL, p.getNetworkID());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const int32_t cif7val1 = 0x0;
  const int32_t cif7val2 = val1;
  const int32_t cif7val3 = val2;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getNetworkID() field null", INT32_NULL, p.getNetworkID());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getNetworkID(CURRENT) field null", INT32_NULL, p.getNetworkID(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getNetworkID(MIN) field null", INT32_NULL, p.getNetworkID(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getNetworkID(MAX) field null", INT32_NULL, p.getNetworkID(MAX_VALUE));

  // set NetworkID CURRENT_VALUE
  p.setNetworkID(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setNetworkID(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setNetworkID(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setNetworkID(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setNetworkID(val1,CURRENT) field val1bits", cif7val1, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getNetworkID(CURRENT) field val1", cif7val1, p.getNetworkID(CURRENT_VALUE));

  // set NetworkID MIN_VALUE
  p.setNetworkID(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setNetworkID(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setNetworkID(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setNetworkID(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setNetworkID(val3,MIN) field val3bits", cif7val3, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getNetworkID(MIN) field val3", cif7val3, p.getNetworkID(MIN_VALUE));

  // set NetworkID MAX_VALUE
  p.setNetworkID(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setNetworkID(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setNetworkID(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setNetworkID(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setNetworkID(val2,MAX) field val2bits", cif7val2, VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("getNetworkID(MAX) field val2", cif7val2, p.getNetworkID(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    cif7val3,    VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    cif7val2,    VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getNetworkID(MIN) field val3",     cif7val3,    p.getNetworkID(MIN_VALUE));
  assertEquals("getNetworkID(MAX) field val2",     cif7val2,    p.getNetworkID(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetTroposphericState () {
  // CIF3 bit 2
  const size_t CIF = 3;
  const size_t CIF_bit = 2;

  const int16_t val1 = 0x1234;
  const int16_t val2 = 0x4321;
  const int32_t mask = 0x0000FFFF;
  const int32_t size = 4;
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF3 for Tropospheric State
  p.addCIF3();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF3() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF3() pkt len", len0+4, len1);
  assertEquals("addCIF3() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getTroposphericState() field null", INT16_NULL, p.getTroposphericState());

  // set Tropospheric State of CIF3
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setTroposphericState(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setTroposphericState(val1) CIF3 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setTroposphericState(val1) pkt len", len1+size, len2);
  assertEquals("setTroposphericState(val1) field val1bits", (int32_t) (val1&mask), VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("setTroposphericState(val1) field val1", val1, p.getTroposphericState());

  // set Tropospheric State of CIF3 again
  p.setTroposphericState(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setTroposphericState(val2) CIF3 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setTroposphericState(val2) pkt len", len2, len3);
  assertEquals("setTroposphericState(val2) field val2bits", (int32_t) (val2&mask), VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("setTroposphericState(val2) field val2", val2, p.getTroposphericState());

  // unset Tropospheric State of CIF3
  p.setTroposphericState(INT16_NULL);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setTroposphericState(null) CIF3 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setTroposphericState(null) CIF3 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setTroposphericState(null) pkt len", len1, len4);
  assertEquals("setTroposphericState(null) field null", INT16_NULL, p.getTroposphericState());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const int16_t cif7val1 = 0x0;
  const int16_t cif7val2 = val1;
  const int16_t cif7val3 = val2;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getTroposphericState() field null", INT16_NULL, p.getTroposphericState());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getTroposphericState(CURRENT) field null", INT16_NULL, p.getTroposphericState(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getTroposphericState(MIN) field null", INT16_NULL, p.getTroposphericState(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getTroposphericState(MAX) field null", INT16_NULL, p.getTroposphericState(MAX_VALUE));

  // set TroposphericState CURRENT_VALUE
  p.setTroposphericState(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setTroposphericState(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setTroposphericState(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setTroposphericState(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setTroposphericState(val1,CURRENT) field val1bits", (int32_t)cif7val1&mask, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getTroposphericState(CURRENT) field val1", cif7val1, p.getTroposphericState(CURRENT_VALUE));

  // set TroposphericState MIN_VALUE
  p.setTroposphericState(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setTroposphericState(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setTroposphericState(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setTroposphericState(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setTroposphericState(val3,MIN) field val3bits", (int32_t)mask&cif7val3, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getTroposphericState(MIN) field val3", cif7val3, p.getTroposphericState(MIN_VALUE));

  // set TroposphericState MAX_VALUE
  p.setTroposphericState(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setTroposphericState(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setTroposphericState(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setTroposphericState(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setTroposphericState(val2,MAX) field val2bits", (int32_t)mask&cif7val2, VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("getTroposphericState(MAX) field val2", cif7val2, p.getTroposphericState(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    (int32_t)mask&cif7val3,    VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    (int32_t)mask&cif7val2,    VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getTroposphericState(MIN) field val3",     cif7val3,    p.getTroposphericState(MIN_VALUE));
  assertEquals("getTroposphericState(MAX) field val2",     cif7val2,    p.getTroposphericState(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetSeaAndSwellState () {
  // CIF3 bit 3
  const size_t CIF = 3;
  const size_t CIF_bit = 3;

  const int16_t val1  = (0x3F<<10) | (0x9<<5) | (0x9<<5); // user-def | swell | sea
  const int16_t val2  = (0x00<<10) | (0x7<<5) | (0x0<<5); // user-def | swell | sea
  const int8_t  sea   = 0;
  const int8_t  swell = 7;
  const int32_t mask = 0x0000FFFF;
  const int32_t size = 4;
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF3 for Sea/Swell State
  p.addCIF3();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF3() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF3() pkt len", len0+4, len1);
  assertEquals("addCIF3() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getSeaAndSwellState() field null", INT16_NULL, p.getSeaAndSwellState());

  // set Sea/Swell State of CIF3
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setSeaAndSwellState(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setSeaAndSwellState(val1) CIF3 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSeaAndSwellState(val1) pkt len", len1+size, len2);
  assertEquals("setSeaAndSwellState(val1) field val1bits", (int32_t) (val1&mask), VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("setSeaAndSwellState(val1) field val1", val1, p.getSeaAndSwellState());

  // set Sea/Swell State of CIF3 again
  p.setSeaAndSwellState(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setSeaAndSwellState(val2) CIF3 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSeaAndSwellState(val2) pkt len", len2, len3);
  assertEquals("setSeaAndSwellState(val2) field val2bits", (int32_t) (val2&mask), VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("setSeaAndSwellState(val2) field val2", val2, p.getSeaAndSwellState());

  // set Sea/Swell State of CIF3 again
  p.setSeaAndSwellState(sea, swell);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setSeaAndSwellState(sea,swell) CIF3 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSeaAndSwellState(sea,swell) pkt len", len2, len4);
  assertEquals("setSeaAndSwellState(sea,swell) field sea", sea,     (int8_t) (p.getSeaAndSwellState()      & 0x1F));
  assertEquals("setSeaAndSwellState(sea,swell) field swell", swell, (int8_t) ((p.getSeaAndSwellState()>>5) & 0x1F));

  // unset Sea/Swell State of CIF3
  p.setSeaAndSwellState(INT16_NULL);
  int32_t len5 = p.getPayloadLength();
  assertEquals("setSeaAndSwellState(null) CIF3 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSeaAndSwellState(null) CIF3 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setSeaAndSwellState(null) pkt len", len1, len5);
  assertEquals("setSeaAndSwellState(null) field null", INT16_NULL, p.getSeaAndSwellState());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const int16_t cif7val1 = 0x0;
  const int16_t cif7val2 = val1;
  const int16_t cif7val3 = val2;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getSeaAndSwellState() field null", INT16_NULL, p.getSeaAndSwellState());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getSeaAndSwellState(CURRENT) field null", INT16_NULL, p.getSeaAndSwellState(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getSeaAndSwellState(MIN) field null", INT16_NULL, p.getSeaAndSwellState(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getSeaAndSwellState(MAX) field null", INT16_NULL, p.getSeaAndSwellState(MAX_VALUE));

  // set SeaAndSwellState CURRENT_VALUE
  p.setSeaAndSwellState(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setSeaAndSwellState(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setSeaAndSwellState(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSeaAndSwellState(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setSeaAndSwellState(val1,CURRENT) field val1bits", (int32_t)cif7val1&mask, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getSeaAndSwellState(CURRENT) field val1", cif7val1, p.getSeaAndSwellState(CURRENT_VALUE));

  // set SeaAndSwellState MIN_VALUE
  p.setSeaAndSwellState(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setSeaAndSwellState(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setSeaAndSwellState(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSeaAndSwellState(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setSeaAndSwellState(val3,MIN) field val3bits", (int32_t)mask&cif7val3, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getSeaAndSwellState(MIN) field val3", cif7val3, p.getSeaAndSwellState(MIN_VALUE));

  // set SeaAndSwellState MAX_VALUE
  p.setSeaAndSwellState(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setSeaAndSwellState(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setSeaAndSwellState(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSeaAndSwellState(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setSeaAndSwellState(val2,MAX) field val2bits", (int32_t)mask&cif7val2, VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("getSeaAndSwellState(MAX) field val2", cif7val2, p.getSeaAndSwellState(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    (int32_t)mask&cif7val3,    VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    (int32_t)mask&cif7val2,    VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getSeaAndSwellState(MIN) field val3",     cif7val3,    p.getSeaAndSwellState(MIN_VALUE));
  assertEquals("getSeaAndSwellState(MAX) field val2",     cif7val2,    p.getSeaAndSwellState(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetBarometricPressure () {
  // CIF3 bit 4
  const size_t CIF = 3;
  const size_t CIF_bit = 4;

  const int32_t val1 = 0x12345678;
  const int32_t val2 = 0x00004321;
  const int32_t mask = 0x0001FFFF;
  const int32_t size = 4;
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF3
  p.addCIF3();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF3() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF3() pkt len", len0+4, len1);
  assertEquals("addCIF3() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getBarometricPressure() field null", INT32_NULL, p.getBarometricPressure());

  // set BarometricPressure of CIF3
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setBarometricPressure(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setBarometricPressure(val1) CIF3 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setBarometricPressure(val1) pkt len", len1+size, len2);
  assertEquals("setBarometricPressure(val1) field val1bits", val1&mask, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("setBarometricPressure(val1) field val1", val1&mask, p.getBarometricPressure());

  // set BarometricPressure of CIF3 again
  p.setBarometricPressure(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setBarometricPressure(val2) CIF3 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setBarometricPressure(val2) pkt len", len2, len3);
  assertEquals("setBarometricPressure(val2) field val2bits", val2&mask, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("setBarometricPressure(val2) field val2", val2&mask, p.getBarometricPressure());

  // unset BarometricPressure of CIF3
  p.setBarometricPressure(INT32_NULL);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setBarometricPressure(null) CIF3 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setBarometricPressure(null) CIF3 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setBarometricPressure(null) pkt len", len1, len4);
  assertEquals("setBarometricPressure(null) field null", INT32_NULL, p.getBarometricPressure());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const int32_t cif7val1 = 0x0;
  const int32_t cif7val2 = val1;
  const int32_t cif7val3 = val2;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getBarometricPressure() field null", INT32_NULL, p.getBarometricPressure());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getBarometricPressure(CURRENT) field null", INT32_NULL, p.getBarometricPressure(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getBarometricPressure(MIN) field null", INT32_NULL, p.getBarometricPressure(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getBarometricPressure(MAX) field null", INT32_NULL, p.getBarometricPressure(MAX_VALUE));

  // set BarometricPressure CURRENT_VALUE
  p.setBarometricPressure(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setBarometricPressure(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setBarometricPressure(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setBarometricPressure(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setBarometricPressure(val1,CURRENT) field val1bits", cif7val1&mask, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getBarometricPressure(CURRENT) field val1", cif7val1&mask, p.getBarometricPressure(CURRENT_VALUE));

  // set BarometricPressure MIN_VALUE
  p.setBarometricPressure(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setBarometricPressure(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setBarometricPressure(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setBarometricPressure(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setBarometricPressure(val3,MIN) field val3bits", cif7val3&mask, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getBarometricPressure(MIN) field val3", cif7val3&mask, p.getBarometricPressure(MIN_VALUE));

  // set BarometricPressure MAX_VALUE
  p.setBarometricPressure(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setBarometricPressure(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setBarometricPressure(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setBarometricPressure(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setBarometricPressure(val2,MAX) field val2bits", cif7val2&mask, VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("getBarometricPressure(MAX) field val2", cif7val2&mask, p.getBarometricPressure(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    cif7val3&mask,    VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    cif7val2&mask,    VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getBarometricPressure(MIN) field val3",     cif7val3&mask,    p.getBarometricPressure(MIN_VALUE));
  assertEquals("getBarometricPressure(MAX) field val2",     cif7val2&mask,    p.getBarometricPressure(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetHumidity () {
  // CIF3 bit 5
  const size_t CIF = 3;
  const size_t CIF_bit = 5;

  const int32_t val1 = 0x12345678;
  const int32_t val2 = 0x00004321;
  const int32_t mask = 0x0000FFFF;
  const int32_t size = 4;
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF3
  p.addCIF3();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF3() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF3() pkt len", len0+4, len1);
  assertEquals("addCIF3() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getHumidity() field null", INT32_NULL, p.getHumidity());

  // set Humidity of CIF3
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setHumidity(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setHumidity(val1) CIF3 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setHumidity(val1) pkt len", len1+size, len2);
  assertEquals("setHumidity(val1) field val1", val1&mask, p.getHumidity());

  // set Humidity of CIF3 again
  p.setHumidity(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setHumidity(val2) CIF3 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setHumidity(val2) pkt len", len2, len3);
  assertEquals("setHumidity(val2) field val2", val2&mask, p.getHumidity());

  // unset Humidity of CIF3
  p.setHumidity(INT32_NULL);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setHumidity(null) CIF3 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setHumidity(null) CIF3 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setHumidity(null) pkt len", len1, len4);
  assertEquals("setHumidity(null) field null", INT32_NULL, p.getHumidity());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const int32_t cif7val1 = 0x0;
  const int32_t cif7val2 = val1;
  const int32_t cif7val3 = val2;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getHumidity() field null", INT32_NULL, p.getHumidity());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getHumidity(CURRENT) field null", INT32_NULL, p.getHumidity(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getHumidity(MIN) field null", INT32_NULL, p.getHumidity(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getHumidity(MAX) field null", INT32_NULL, p.getHumidity(MAX_VALUE));

  // set Humidity CURRENT_VALUE
  p.setHumidity(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setHumidity(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setHumidity(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setHumidity(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setHumidity(val1,CURRENT) field val1bits", cif7val1&mask, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getHumidity(CURRENT) field val1", cif7val1&mask, p.getHumidity(CURRENT_VALUE));

  // set Humidity MIN_VALUE
  p.setHumidity(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setHumidity(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setHumidity(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setHumidity(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setHumidity(val3,MIN) field val3bits", cif7val3&mask, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getHumidity(MIN) field val3", cif7val3&mask, p.getHumidity(MIN_VALUE));

  // set Humidity MAX_VALUE
  p.setHumidity(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setHumidity(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setHumidity(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setHumidity(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setHumidity(val2,MAX) field val2bits", cif7val2&mask, VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("getHumidity(MAX) field val2", cif7val2&mask, p.getHumidity(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    cif7val3&mask,    VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    cif7val2&mask,    VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getHumidity(MIN) field val3",     cif7val3&mask,    p.getHumidity(MIN_VALUE));
  assertEquals("getHumidity(MAX) field val2",     cif7val2&mask,    p.getHumidity(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetSeaGroundTemperature () {
  // CIF3 bit 6
  const size_t CIF = 3;
  const size_t CIF_bit = 6;

  const float   val1     = 0.0;
  const int32_t val1bits = 0x00000000;
  const float   val2     = 1.0;
  const int32_t val2bits = 0x00000040;
  const float   val3     = 0.015625;
  const int32_t val3bits = 0x00000001;
  const float   val4     = -1.0;
  const int32_t val4bits = 0x0000FFC0;
  const float   val5     = -0.015625;
  const int32_t val5bits = 0x0000FFFF;
  const int32_t size = 4;
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF3 for Sea/Ground Temperature
  p.addCIF3();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF3() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF3() pkt len", len0+4, len1);
  assertEquals("addCIF3() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getSeaGroundTemperature() field null", FLOAT_NAN, p.getSeaGroundTemperature());

  // set Sea/Ground Temperature of CIF3
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setSeaGroundTemperature(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setSeaGroundTemperature(val1) CIF3 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSeaGroundTemperature(val1) pkt len", len1+size, len2);
  assertEquals("setSeaGroundTemperature(val1) field val1bits", val1bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getSeaGroundTemperature(val1) field val1", val1, p.getSeaGroundTemperature());

  // set Sea/Ground Temperature of CIF3 again
  p.setSeaGroundTemperature(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setSeaGroundTemperature(val2) CIF3 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSeaGroundTemperature(val2) pkt len", len2, len3);
  assertEquals("setSeaGroundTemperature(val2) field val2bits", val2bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getSeaGroundTemperature(val2) field val2", val2, p.getSeaGroundTemperature());

  // set Sea/Ground Temperature of CIF3 again
  p.setSeaGroundTemperature(val3);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setSeaGroundTemperature(val3) CIF3 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSeaGroundTemperature(val3) pkt len", len2, len4);
  assertEquals("setSeaGroundTemperature(val3) field val3bits", val3bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getSeaGroundTemperature(val3) field val3", val3, p.getSeaGroundTemperature());

  // set Sea/Ground Temperature of CIF3 again
  p.setSeaGroundTemperature(val4);
  int32_t len5 = p.getPayloadLength();
  assertEquals("setSeaGroundTemperature(val4) CIF3 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSeaGroundTemperature(val4) pkt len", len2, len5);
  assertEquals("setSeaGroundTemperature(val4) field val4bits", val4bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getSeaGroundTemperature(val4) field val4", val4, p.getSeaGroundTemperature());

  // set Sea/Ground Temperature of CIF3 again
  p.setSeaGroundTemperature(val5);
  int32_t len6 = p.getPayloadLength();
  assertEquals("setSeaGroundTemperature(val5) CIF3 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSeaGroundTemperature(val5) pkt len", len2, len6);
  assertEquals("setSeaGroundTemperature(val5) field val5bits", val5bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getSeaGroundTemperature(val5) field val5", val5, p.getSeaGroundTemperature());

  // unset Sea/Ground Temperature of CIF3
  p.setSeaGroundTemperature(FLOAT_NAN);
  int32_t len7 = p.getPayloadLength();
  assertEquals("setSeaGroundTemperature(null) CIF3 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSeaGroundTemperature(null) CIF3 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setSeaGroundTemperature(null) pkt len", len1, len7);
  assertEquals("setSeaGroundTemperature(null) field null", FLOAT_NAN, p.getSeaGroundTemperature());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const float cif7val1 = 0;
  const int32_t cif7val1bits = 0x0;
  const float cif7val2 = val1;
  const int32_t cif7val2bits = val1bits;
  const float cif7val3 = val2;
  const int32_t cif7val3bits = val2bits;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getSeaGroundTemperature() field null", FLOAT_NAN, p.getSeaGroundTemperature());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getSeaGroundTemperature(CURRENT) field null", FLOAT_NAN, p.getSeaGroundTemperature(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getSeaGroundTemperature(MIN) field null", FLOAT_NAN, p.getSeaGroundTemperature(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getSeaGroundTemperature(MAX) field null", FLOAT_NAN, p.getSeaGroundTemperature(MAX_VALUE));

  // set SeaGroundTemperature CURRENT_VALUE
  p.setSeaGroundTemperature(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setSeaGroundTemperature(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setSeaGroundTemperature(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSeaGroundTemperature(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setSeaGroundTemperature(val1,CURRENT) field val1bits", cif7val1bits, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getSeaGroundTemperature(CURRENT) field val1", cif7val1, p.getSeaGroundTemperature(CURRENT_VALUE));

  // set SeaGroundTemperature MIN_VALUE
  p.setSeaGroundTemperature(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setSeaGroundTemperature(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setSeaGroundTemperature(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSeaGroundTemperature(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setSeaGroundTemperature(val3,MIN) field val3bits", cif7val3bits, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getSeaGroundTemperature(MIN) field val3", cif7val3, p.getSeaGroundTemperature(MIN_VALUE));

  // set SeaGroundTemperature MAX_VALUE
  p.setSeaGroundTemperature(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setSeaGroundTemperature(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setSeaGroundTemperature(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setSeaGroundTemperature(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setSeaGroundTemperature(val2,MAX) field val2bits", cif7val2bits, VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("getSeaGroundTemperature(MAX) field val2", cif7val2, p.getSeaGroundTemperature(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    cif7val3bits,    VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    cif7val2bits,    VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getSeaGroundTemperature(MIN) field val3",     cif7val3,    p.getSeaGroundTemperature(MIN_VALUE));
  assertEquals("getSeaGroundTemperature(MAX) field val2",     cif7val2,    p.getSeaGroundTemperature(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetAirTemperature () {
  // CIF3 bit 7
  const size_t CIF = 3;
  const size_t CIF_bit = 7;

  const float   val1     = 0.0;
  const int32_t val1bits = 0x00000000;
  const float   val2     = 1.0;
  const int32_t val2bits = 0x00000040;
  const float   val3     = 0.015625;
  const int32_t val3bits = 0x00000001;
  const float   val4     = -1.0;
  const int32_t val4bits = 0x0000FFC0;
  const float   val5     = -0.015625;
  const int32_t val5bits = 0x0000FFFF;
  const int32_t size = 4;
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF3 for Air Temperature
  p.addCIF3();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF3() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF3() pkt len", len0+4, len1);
  assertEquals("addCIF3() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getAirTemperature() field null", FLOAT_NAN, p.getAirTemperature());

  // set Air Temperature of CIF3
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setAirTemperature(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setAirTemperature(val1) CIF3 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setAirTemperature(val1) pkt len", len1+size, len2);
  assertEquals("setAirTemperature(val1) field val1bits", val1bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getAirTemperature(val1) field val1", val1, p.getAirTemperature());

  // set Air Temperature of CIF3 again
  p.setAirTemperature(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setAirTemperature(val2) CIF3 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setAirTemperature(val2) pkt len", len2, len3);
  assertEquals("setAirTemperature(val2) field val2bits", val2bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getAirTemperature(val2) field val2", val2, p.getAirTemperature());

  // set Air Temperature of CIF3 again
  p.setAirTemperature(val3);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setAirTemperature(val3) CIF3 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setAirTemperature(val3) pkt len", len2, len4);
  assertEquals("setAirTemperature(val3) field val3bits", val3bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getAirTemperature(val3) field val3", val3, p.getAirTemperature());

  // set Air Temperature of CIF3 again
  p.setAirTemperature(val4);
  int32_t len5 = p.getPayloadLength();
  assertEquals("setAirTemperature(val4) CIF3 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setAirTemperature(val4) pkt len", len2, len5);
  assertEquals("setAirTemperature(val4) field val4bits", val4bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getAirTemperature(val4) field val4", val4, p.getAirTemperature());

  // set Air Temperature of CIF3 again
  p.setAirTemperature(val5);
  int32_t len6 = p.getPayloadLength();
  assertEquals("setAirTemperature(val5) CIF3 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setAirTemperature(val5) pkt len", len2, len6);
  assertEquals("setAirTemperature(val5) field val5bits", val5bits, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getAirTemperature(val5) field val5", val5, p.getAirTemperature());

  // unset Air Temperature of CIF3
  p.setAirTemperature(FLOAT_NAN);
  int32_t len7 = p.getPayloadLength();
  assertEquals("setAirTemperature(null) CIF3 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setAirTemperature(null) CIF3 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setAirTemperature(null) pkt len", len1, len7);
  assertEquals("setAirTemperature(null) field null", FLOAT_NAN, p.getAirTemperature());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const float cif7val1 = 0;
  const int32_t cif7val1bits = 0x0;
  const float cif7val2 = val1;
  const int32_t cif7val2bits = val1bits;
  const float cif7val3 = val2;
  const int32_t cif7val3bits = val2bits;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getAirTemperature() field null", FLOAT_NAN, p.getAirTemperature());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getAirTemperature(CURRENT) field null", FLOAT_NAN, p.getAirTemperature(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getAirTemperature(MIN) field null", FLOAT_NAN, p.getAirTemperature(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getAirTemperature(MAX) field null", FLOAT_NAN, p.getAirTemperature(MAX_VALUE));

  // set AirTemperature CURRENT_VALUE
  p.setAirTemperature(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setAirTemperature(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setAirTemperature(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setAirTemperature(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setAirTemperature(val1,CURRENT) field val1bits", cif7val1bits, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getAirTemperature(CURRENT) field val1", cif7val1, p.getAirTemperature(CURRENT_VALUE));

  // set AirTemperature MIN_VALUE
  p.setAirTemperature(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setAirTemperature(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setAirTemperature(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setAirTemperature(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setAirTemperature(val3,MIN) field val3bits", cif7val3bits, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getAirTemperature(MIN) field val3", cif7val3, p.getAirTemperature(MIN_VALUE));

  // set AirTemperature MAX_VALUE
  p.setAirTemperature(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setAirTemperature(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setAirTemperature(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setAirTemperature(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setAirTemperature(val2,MAX) field val2bits", cif7val2bits, VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("getAirTemperature(MAX) field val2", cif7val2, p.getAirTemperature(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    cif7val3bits,    VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    cif7val2bits,    VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getAirTemperature(MIN) field val3",     cif7val3,    p.getAirTemperature(MIN_VALUE));
  assertEquals("getAirTemperature(MAX) field val2",     cif7val2,    p.getAirTemperature(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

/*
 *  IntegerMode_None  = 0, No integral time code
 *  IntegerMode_UTC   = 1, UTC time code
 *  IntegerMode_GPS   = 2, GPS time code
 *  IntegerMode_Other = 3, Other time code
 *
 *  FractionalMode_None             = 0, No fractional time code
 *  FractionalMode_SampleCount      = 1, Sample count
 *  FractionalMode_RealTime         = 2, Real-Time time stamp (picosecond accuracy)
 *  FractionalMode_FreeRunningCount = 3, Free-running count
 */

void BasicQueryAcknowledgePacketTest::testSetShelfLife () {
  // CIF3 bit 16
  const size_t CIF = 3;
  const size_t CIF_bit = 16;

  const int32_t UTC_JUL1985LS =  489024015; //1985-07-01:00:00:00 UTC time
  const int32_t UTC_DEC2005LS = 1136073625; //2006-01-01:00:00:00 UTC time
  const int32_t GPS_JUL1985LS =  173059200; //1985-07-01:00:00:00 GPS time
  const int64_t ps = 123456789;

  const int32_t l1 = 12; // length of UTC/RealTime ts
  const TimeStamp val1(IntegerMode_UTC,   FractionalMode_RealTime, UTC_JUL1985LS, ps);
  const TimeStamp val2(IntegerMode_UTC,   FractionalMode_RealTime, UTC_DEC2005LS, ps);
  const int32_t l2 = 4; // length of Other/None ts
  const TimeStamp val3(IntegerMode_Other, FractionalMode_None, GPS_JUL1985LS, INT64_NULL);
  const TimeStamp nullts;

  // create packet and modify tsi/tsf values if necessary
  // default packet has buf[1]==0x60, which is TSI: UTC, TSF: Real-Time (ps) fractional timestamp
  BasicQueryAcknowledgePacket p;
  p.setTimeStamp(TimeStamp(IntegerMode_UTC, FractionalMode_RealTime, 0, 0));

  int32_t len0 = p.getPayloadLength();

  // add CIF3 for Shelf Life
  p.addCIF3();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF3() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF3() pkt len", len0+4, len1);
  assertEquals("addCIF3() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getShelfLife() field null", nullts, p.getShelfLife());

  // set Shelf Life of CIF3
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setShelfLife(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setShelfLife(val1) CIF3 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setShelfLife(val1) pkt len", len1+l1, len2);
  assertEquals("setShelfLife(val1) field val1bits", UTC_JUL1985LS, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getShelfLife(val1) field val1", true, (isNull(p.getShelfLife()))? false : p.getShelfLife().equals(val1));

  // set Shelf Life of CIF3 again
  p.setShelfLife(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setShelfLife(val2) CIF3 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setShelfLife(val2) pkt len", len2, len3);
  assertEquals("setShelfLife(val2) field val2bits", UTC_DEC2005LS, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getShelfLife(val2) field val2", true, (isNull(p.getShelfLife()))? false : p.getShelfLife().equals(val2));

  // unset Shelf Life of CIF3
  p.setShelfLife(nullts);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setShelfLife(null) CIF3 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setShelfLife(null) CIF3 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setShelfLife(null) pkt len", len1, len4);
  assertEquals("setShelfLife(null) field null", nullts, p.getShelfLife());

  // modify tsi/tsf values
  p.setTimeStamp(TimeStamp(IntegerMode_Other, FractionalMode_None, 0, 0));

  // add CIF3 for Shelf Life
  p.addCIF3();
  int32_t len5 = p.getPayloadLength();
  assertEquals("addCIF3()2 CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF3()2 pkt len", len0+4, len5);
  assertEquals("addCIF3()2 init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getShelfLife()2 field null", nullts, p.getShelfLife());

  // set Shelf Life of CIF3
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setShelfLife(val3);
  int32_t len6 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setShelfLife(val3) CIF3 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setShelfLife(val3) pkt len", len1+l2, len6);
  assertEquals("setShelfLife(val3) field val3bits", GPS_JUL1985LS, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getShelfLife(val3) field val3", true, (isNull(p.getShelfLife()))? false : p.getShelfLife().equals(val3));

  // unset Shelf Life of CIF3
  p.setShelfLife(nullts);
  int32_t len7 = p.getPayloadLength();
  assertEquals("setShelfLife(null)2 CIF3 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setShelfLife(null)2 CIF3 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setShelfLife(null)2 pkt len", len1, len7);
  assertEquals("setShelfLife(null)2 field null", nullts, p.getShelfLife());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  p.setTimeStamp(TimeStamp(IntegerMode_UTC, FractionalMode_RealTime, 0, 0));
  const TimeStamp cif7val1(IntegerMode_UTC,   FractionalMode_RealTime, UTC_JUL1985LS, ps*2);
  const TimeStamp cif7val2 = val1;
  const TimeStamp cif7val3 = val2;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;
  const int32_t size = l1;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getShelfLife() field null", nullts, p.getShelfLife());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getShelfLife(CURRENT) field null", nullts, p.getShelfLife(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getShelfLife(MIN) field null", nullts, p.getShelfLife(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getShelfLife(MAX) field null", nullts, p.getShelfLife(MAX_VALUE));

  // set ShelfLife CURRENT_VALUE
  p.setShelfLife(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setShelfLife(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setShelfLife(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setShelfLife(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  //assertEquals("setShelfLife(val1,CURRENT) field val1bits", cif7val1, VRTMath::unpackUUID(p.getPayloadPointer(), 12));
  assertEquals("setShelfLife(val1,CURRENT) field val1bits", UTC_JUL1985LS, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getShelfLife(CURRENT) field val1", true, (isNull(p.getShelfLife(CURRENT_VALUE)))? false : p.getShelfLife(CURRENT_VALUE).equals(cif7val1));

  // set ShelfLife MIN_VALUE
  p.setShelfLife(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setShelfLife(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setShelfLife(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setShelfLife(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  //assertEquals("setShelfLife(val3,MIN) field val3bits", cif7val3, VRTMath::unpackUUID(p.getPayloadPointer(), 12+2*size));
  assertEquals("setShelfLife(val3,MIN) field val3bits", UTC_DEC2005LS, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getShelfLife(MIN) field val3", true, (isNull(p.getShelfLife(MIN_VALUE)))? false : p.getShelfLife(MIN_VALUE).equals(cif7val3));

  // set ShelfLife MAX_VALUE
  p.setShelfLife(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setShelfLife(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setShelfLife(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setShelfLife(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  //assertEquals("setShelfLife(val2,MAX) field val2bits", cif7val2, VRTMath::unpackUUID(p.getPayloadPointer(), 12+size));
  assertEquals("setShelfLife(val2,MAX) field val2bits", UTC_JUL1985LS, VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("getShelfLife(MAX) field val2", true, (isNull(p.getShelfLife(MAX_VALUE)))? false : p.getShelfLife(MAX_VALUE).equals(cif7val2));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    UTC_DEC2005LS,    VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    UTC_JUL1985LS,    VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getShelfLife(MIN) field val3",     true,    p.getShelfLife(MIN_VALUE).equals(cif7val3));
  assertEquals("getShelfLife(MAX) field val2",     true,    p.getShelfLife(MAX_VALUE).equals(cif7val2));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetAge () {
  // CIF3 bit 17
  const size_t CIF = 3;
  const size_t CIF_bit = 17;

  const int32_t UTC_JUL1985LS =  489024015; //1985-07-01:00:00:00 UTC time
  const int32_t UTC_DEC2005LS = 1136073625; //2006-01-01:00:00:00 UTC time
  const int32_t GPS_JUL1985LS =  173059200; //1985-07-01:00:00:00 GPS time
  const int64_t ps = 123456789;

  const int32_t l1 = 12; // length of UTC/RealTime ts
  const TimeStamp val1(IntegerMode_UTC,   FractionalMode_RealTime, UTC_JUL1985LS, ps);
  const TimeStamp val2(IntegerMode_UTC,   FractionalMode_RealTime, UTC_DEC2005LS, ps);
  const int32_t l2 = 4; // length of Other/None ts
  const TimeStamp val3(IntegerMode_Other, FractionalMode_None, GPS_JUL1985LS, INT64_NULL);
  const TimeStamp nullts;

  // create packet and modify tsi/tsf values if necessary
  // default packet has buf[1]==0x60, which is TSI: UTC, TSF: Real-Time (ps) fractional timestamp
  BasicQueryAcknowledgePacket p;
  p.setTimeStamp(TimeStamp(IntegerMode_UTC, FractionalMode_RealTime, 0, 0));

  int32_t len0 = p.getPayloadLength();

  // add CIF3 for Age
  p.addCIF3();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF3() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF3() pkt len", len0+4, len1);
  assertEquals("addCIF3() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getAge() field null", nullts, p.getAge());

  // set Age of CIF3
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setAge(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setAge(val1) CIF3 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setAge(val1) pkt len", len1+l1, len2);
  assertEquals("setAge(val1) field val1bits", UTC_JUL1985LS, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getAge(val1) field val1", true, (isNull(p.getAge()))? false : p.getAge().equals(val1));

  // set Age of CIF3 again
  p.setAge(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setAge(val2) CIF3 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setAge(val2) pkt len", len2, len3);
  assertEquals("setAge(val2) field val2bits", UTC_DEC2005LS, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getAge(val2) field val2", true, (isNull(p.getAge()))? false : p.getAge().equals(val2));

  // unset Age of CIF3
  p.setAge(nullts);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setAge(null) CIF3 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setAge(null) CIF3 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setAge(null) pkt len", len1, len4);
  assertEquals("setAge(null) field null", nullts, p.getAge());

  // modify tsi/tsf values
  p.setTimeStamp(TimeStamp(IntegerMode_Other, FractionalMode_None, 0, 0));

  // add CIF3 for Age
  p.addCIF3();
  int32_t len5 = p.getPayloadLength();
  assertEquals("addCIF3()2 CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF3()2 pkt len", len0+4, len5);
  assertEquals("addCIF3()2 init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getAge()2 field null", nullts, p.getAge());

  // set Age of CIF3
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setAge(val3);
  int32_t len6 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setAge(val3) CIF3 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setAge(val3) pkt len", len1+l2, len6);
  assertEquals("setAge(val3) field val3bits", GPS_JUL1985LS, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getAge(val3) field val3", true, (isNull(p.getAge()))? false : p.getAge().equals(val3));

  // unset Age of CIF3
  p.setAge(nullts);
  int32_t len7 = p.getPayloadLength();
  assertEquals("setAge(null)2 CIF3 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setAge(null)2 CIF3 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setAge(null)2 pkt len", len1, len7);
  assertEquals("setAge(null)2 field null", nullts, p.getAge());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  p.setTimeStamp(TimeStamp(IntegerMode_UTC, FractionalMode_RealTime, 0, 0));
  const TimeStamp cif7val1(IntegerMode_UTC,   FractionalMode_RealTime, UTC_JUL1985LS, ps*2);
  const TimeStamp cif7val2 = val1;
  const TimeStamp cif7val3 = val2;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;
  const int32_t size = l1;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getAge() field null", nullts, p.getAge());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getAge(CURRENT) field null", nullts, p.getAge(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getAge(MIN) field null", nullts, p.getAge(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getAge(MAX) field null", nullts, p.getAge(MAX_VALUE));

  // set Age CURRENT_VALUE
  p.setAge(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setAge(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setAge(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setAge(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  //assertEquals("setAge(val1,CURRENT) field val1bits", cif7val1, VRTMath::unpackUUID(p.getPayloadPointer(), 12));
  assertEquals("setAge(val1,CURRENT) field val1bits", UTC_JUL1985LS, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getAge(CURRENT) field val1", true, (isNull(p.getAge(CURRENT_VALUE)))? false : p.getAge(CURRENT_VALUE).equals(cif7val1));

  // set Age MIN_VALUE
  p.setAge(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setAge(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setAge(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setAge(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  //assertEquals("setAge(val3,MIN) field val3bits", cif7val3, VRTMath::unpackUUID(p.getPayloadPointer(), 12+2*size));
  assertEquals("setAge(val3,MIN) field val3bits", UTC_DEC2005LS, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getAge(MIN) field val3", true, (isNull(p.getAge(MIN_VALUE)))? false : p.getAge(MIN_VALUE).equals(cif7val3));

  // set Age MAX_VALUE
  p.setAge(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setAge(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setAge(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setAge(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  //assertEquals("setAge(val2,MAX) field val2bits", cif7val2, VRTMath::unpackUUID(p.getPayloadPointer(), 12+size));
  assertEquals("setAge(val2,MAX) field val2bits", UTC_JUL1985LS, VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("getAge(MAX) field val2", true, (isNull(p.getAge(MAX_VALUE)))? false : p.getAge(MAX_VALUE).equals(cif7val2));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    UTC_DEC2005LS,    VRTMath::unpackInt(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    UTC_JUL1985LS,    VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getAge(MIN) field val3",     true,    p.getAge(MIN_VALUE).equals(cif7val3));
  assertEquals("getAge(MAX) field val2",     true,    p.getAge(MAX_VALUE).equals(cif7val2));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetJitter () {
  // CIF3 bit 20
  const size_t CIF = 3;
  const size_t CIF_bit = 20;

  const int64_t val1 = 0x123456789ABCDEF0;
  const int64_t val2 = 0x0FEDCBA987654321;
  const int32_t size = 8;
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF3
  p.addCIF3();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF3() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF3() pkt len", len0+4, len1);
  assertEquals("addCIF3() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getJitter() field null", INT64_NULL, p.getJitter());

  // set Jitter of CIF3
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setJitter(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setJitter(val1) CIF3 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setJitter(val1) pkt len", len1+size, len2);
  assertEquals("setJitter(val1) field val1bits", val1, VRTMath::unpackLong(p.getPayloadPointer(), 8));
  assertEquals("getJitter(val1) field val1", val1, p.getJitter());

  // set Jitter of CIF3 again
  p.setJitter(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setJitter(val2) CIF3 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setJitter(val2) pkt len", len2, len3);
  assertEquals("setJitter(val2) field val2bits", val2, VRTMath::unpackLong(p.getPayloadPointer(), 8));
  assertEquals("getJitter(val2) field val2", val2, p.getJitter());

  // unset Jitter of CIF3
  p.setJitter(INT64_NULL);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setJitter(null) CIF3 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setJitter(null) CIF3 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setJitter(null) pkt len", len1, len4);
  assertEquals("setJitter(null) field null", INT64_NULL, p.getJitter());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const int64_t cif7val1 = 0x0;
  const int64_t cif7val2 = val1;
  const int64_t cif7val3 = val2;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getJitter() field null", INT64_NULL, p.getJitter());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getJitter(CURRENT) field null", INT64_NULL, p.getJitter(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getJitter(MIN) field null", INT64_NULL, p.getJitter(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getJitter(MAX) field null", INT64_NULL, p.getJitter(MAX_VALUE));

  // set Jitter CURRENT_VALUE
  p.setJitter(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setJitter(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setJitter(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setJitter(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setJitter(val1,CURRENT) field val1bits", cif7val1, VRTMath::unpackLong(p.getPayloadPointer(), 12));
  assertEquals("getJitter(CURRENT) field val1", cif7val1, p.getJitter(CURRENT_VALUE));

  // set Jitter MIN_VALUE
  p.setJitter(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setJitter(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setJitter(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setJitter(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setJitter(val3,MIN) field val3bits", cif7val3, VRTMath::unpackLong(p.getPayloadPointer(), 12+2*size));
  assertEquals("getJitter(MIN) field val3", cif7val3, p.getJitter(MIN_VALUE));

  // set Jitter MAX_VALUE
  p.setJitter(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setJitter(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setJitter(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setJitter(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setJitter(val2,MAX) field val2bits", cif7val2, VRTMath::unpackLong(p.getPayloadPointer(), 12+size));
  assertEquals("getJitter(MAX) field val2", cif7val2, p.getJitter(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    cif7val3,    VRTMath::unpackLong(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    cif7val2,    VRTMath::unpackLong(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getJitter(MIN) field val3",     cif7val3,    p.getJitter(MIN_VALUE));
  assertEquals("getJitter(MAX) field val2",     cif7val2,    p.getJitter(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetDwell () {
  // CIF3 bit 21
  const size_t CIF = 3;
  const size_t CIF_bit = 21;

  const int64_t val1 = 0x123456789ABCDEF0;
  const int64_t val2 = 0x0FEDCBA987654321;
  const int32_t size = 8;
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF3
  p.addCIF3();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF3() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF3() pkt len", len0+4, len1);
  assertEquals("addCIF3() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getDwell() field null", INT64_NULL, p.getDwell());

  // set Dwell of CIF3
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setDwell(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setDwell(val1) CIF3 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setDwell(val1) pkt len", len1+size, len2);
  assertEquals("setDwell(val1) field val1bits", val1, VRTMath::unpackLong(p.getPayloadPointer(), 8));
  assertEquals("getDwell(val1) field val1", val1, p.getDwell());

  // set Dwell of CIF3 again
  p.setDwell(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setDwell(val2) CIF3 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setDwell(val2) pkt len", len2, len3);
  assertEquals("setDwell(val2) field val2bits", val2, VRTMath::unpackLong(p.getPayloadPointer(), 8));
  assertEquals("getDwell(val2) field val2", val2, p.getDwell());

  // unset Dwell of CIF3
  p.setDwell(INT64_NULL);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setDwell(null) CIF3 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setDwell(null) CIF3 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setDwell(null) pkt len", len1, len4);
  assertEquals("setDwell(null) field null", INT64_NULL, p.getDwell());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const int64_t cif7val1 = 0x0;
  const int64_t cif7val2 = val1;
  const int64_t cif7val3 = val2;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getDwell() field null", INT64_NULL, p.getDwell());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getDwell(CURRENT) field null", INT64_NULL, p.getDwell(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getDwell(MIN) field null", INT64_NULL, p.getDwell(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getDwell(MAX) field null", INT64_NULL, p.getDwell(MAX_VALUE));

  // set Dwell CURRENT_VALUE
  p.setDwell(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setDwell(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setDwell(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setDwell(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setDwell(val1,CURRENT) field val1bits", cif7val1, VRTMath::unpackLong(p.getPayloadPointer(), 12));
  assertEquals("getDwell(CURRENT) field val1", cif7val1, p.getDwell(CURRENT_VALUE));

  // set Dwell MIN_VALUE
  p.setDwell(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setDwell(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setDwell(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setDwell(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setDwell(val3,MIN) field val3bits", cif7val3, VRTMath::unpackLong(p.getPayloadPointer(), 12+2*size));
  assertEquals("getDwell(MIN) field val3", cif7val3, p.getDwell(MIN_VALUE));

  // set Dwell MAX_VALUE
  p.setDwell(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setDwell(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setDwell(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setDwell(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setDwell(val2,MAX) field val2bits", cif7val2, VRTMath::unpackLong(p.getPayloadPointer(), 12+size));
  assertEquals("getDwell(MAX) field val2", cif7val2, p.getDwell(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    cif7val3,    VRTMath::unpackLong(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    cif7val2,    VRTMath::unpackLong(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getDwell(MIN) field val3",     cif7val3,    p.getDwell(MIN_VALUE));
  assertEquals("getDwell(MAX) field val2",     cif7val2,    p.getDwell(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetDuration () {
  // CIF3 bit 22
  const size_t CIF = 3;
  const size_t CIF_bit = 22;

  const int64_t val1 = 0x123456789ABCDEF0;
  const int64_t val2 = 0x0FEDCBA987654321;
  const int32_t size = 8;
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF3
  p.addCIF3();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF3() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF3() pkt len", len0+4, len1);
  assertEquals("addCIF3() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getDuration() field null", INT64_NULL, p.getDuration());

  // set Duration of CIF3
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setDuration(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setDuration(val1) CIF3 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setDuration(val1) pkt len", len1+size, len2);
  assertEquals("setDuration(val1) field val1bits", val1, VRTMath::unpackLong(p.getPayloadPointer(), 8));
  assertEquals("getDuration(val1) field val1", val1, p.getDuration());

  // set Duration of CIF3 again
  p.setDuration(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setDuration(val2) CIF3 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setDuration(val2) pkt len", len2, len3);
  assertEquals("setDuration(val2) field val2bits", val2, VRTMath::unpackLong(p.getPayloadPointer(), 8));
  assertEquals("getDuration(val2) field val2", val2, p.getDuration());

  // unset Duration of CIF3
  p.setDuration(INT64_NULL);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setDuration(null) CIF3 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setDuration(null) CIF3 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setDuration(null) pkt len", len1, len4);
  assertEquals("setDuration(null) field null", INT64_NULL, p.getDuration());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const int64_t cif7val1 = 0x0;
  const int64_t cif7val2 = val1;
  const int64_t cif7val3 = val2;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getDuration() field null", INT64_NULL, p.getDuration());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getDuration(CURRENT) field null", INT64_NULL, p.getDuration(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getDuration(MIN) field null", INT64_NULL, p.getDuration(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getDuration(MAX) field null", INT64_NULL, p.getDuration(MAX_VALUE));

  // set Duration CURRENT_VALUE
  p.setDuration(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setDuration(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setDuration(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setDuration(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setDuration(val1,CURRENT) field val1bits", cif7val1, VRTMath::unpackLong(p.getPayloadPointer(), 12));
  assertEquals("getDuration(CURRENT) field val1", cif7val1, p.getDuration(CURRENT_VALUE));

  // set Duration MIN_VALUE
  p.setDuration(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setDuration(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setDuration(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setDuration(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setDuration(val3,MIN) field val3bits", cif7val3, VRTMath::unpackLong(p.getPayloadPointer(), 12+2*size));
  assertEquals("getDuration(MIN) field val3", cif7val3, p.getDuration(MIN_VALUE));

  // set Duration MAX_VALUE
  p.setDuration(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setDuration(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setDuration(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setDuration(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setDuration(val2,MAX) field val2bits", cif7val2, VRTMath::unpackLong(p.getPayloadPointer(), 12+size));
  assertEquals("getDuration(MAX) field val2", cif7val2, p.getDuration(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    cif7val3,    VRTMath::unpackLong(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    cif7val2,    VRTMath::unpackLong(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getDuration(MIN) field val3",     cif7val3,    p.getDuration(MIN_VALUE));
  assertEquals("getDuration(MAX) field val2",     cif7val2,    p.getDuration(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetPeriod () {
  // CIF3 bit 23
  const size_t CIF = 3;
  const size_t CIF_bit = 23;

  const int64_t val1 = 0x123456789ABCDEF0;
  const int64_t val2 = 0x0FEDCBA987654321;
  const int32_t size = 8;
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF3
  p.addCIF3();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF3() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF3() pkt len", len0+4, len1);
  assertEquals("addCIF3() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getPeriod() field null", INT64_NULL, p.getPeriod());

  // set Period of CIF3
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setPeriod(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setPeriod(val1) CIF3 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setPeriod(val1) pkt len", len1+size, len2);
  assertEquals("setPeriod(val1) field val1bits", val1, VRTMath::unpackLong(p.getPayloadPointer(), 8));
  assertEquals("getPeriod(val1) field val1", val1, p.getPeriod());

  // set Period of CIF3 again
  p.setPeriod(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setPeriod(val2) CIF3 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setPeriod(val2) pkt len", len2, len3);
  assertEquals("setPeriod(val2) field val2bits", val2, VRTMath::unpackLong(p.getPayloadPointer(), 8));
  assertEquals("getPeriod(val2) field val2", val2, p.getPeriod());

  // unset Period of CIF3
  p.setPeriod(INT64_NULL);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setPeriod(null) CIF3 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setPeriod(null) CIF3 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setPeriod(null) pkt len", len1, len4);
  assertEquals("setPeriod(null) field null", INT64_NULL, p.getPeriod());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const int64_t cif7val1 = 0x0;
  const int64_t cif7val2 = val1;
  const int64_t cif7val3 = val2;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getPeriod() field null", INT64_NULL, p.getPeriod());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getPeriod(CURRENT) field null", INT64_NULL, p.getPeriod(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getPeriod(MIN) field null", INT64_NULL, p.getPeriod(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getPeriod(MAX) field null", INT64_NULL, p.getPeriod(MAX_VALUE));

  // set Period CURRENT_VALUE
  p.setPeriod(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setPeriod(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setPeriod(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setPeriod(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setPeriod(val1,CURRENT) field val1bits", cif7val1, VRTMath::unpackLong(p.getPayloadPointer(), 12));
  assertEquals("getPeriod(CURRENT) field val1", cif7val1, p.getPeriod(CURRENT_VALUE));

  // set Period MIN_VALUE
  p.setPeriod(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setPeriod(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setPeriod(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setPeriod(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setPeriod(val3,MIN) field val3bits", cif7val3, VRTMath::unpackLong(p.getPayloadPointer(), 12+2*size));
  assertEquals("getPeriod(MIN) field val3", cif7val3, p.getPeriod(MIN_VALUE));

  // set Period MAX_VALUE
  p.setPeriod(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setPeriod(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setPeriod(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setPeriod(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setPeriod(val2,MAX) field val2bits", cif7val2, VRTMath::unpackLong(p.getPayloadPointer(), 12+size));
  assertEquals("getPeriod(MAX) field val2", cif7val2, p.getPeriod(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    cif7val3,    VRTMath::unpackLong(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    cif7val2,    VRTMath::unpackLong(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getPeriod(MIN) field val3",     cif7val3,    p.getPeriod(MIN_VALUE));
  assertEquals("getPeriod(MAX) field val2",     cif7val2,    p.getPeriod(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetPulseWidth () {
  // CIF3 bit 24
  const size_t CIF = 3;
  const size_t CIF_bit = 24;

  const int64_t val1 = 0x123456789ABCDEF0;
  const int64_t val2 = 0x0FEDCBA987654321;
  const int32_t size = 8;
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF3
  p.addCIF3();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF3() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF3() pkt len", len0+4, len1);
  assertEquals("addCIF3() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getPulseWidth() field null", INT64_NULL, p.getPulseWidth());

  // set PulseWidth of CIF3
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setPulseWidth(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setPulseWidth(val1) CIF3 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setPulseWidth(val1) pkt len", len1+size, len2);
  assertEquals("setPulseWidth(val1) field val1bits", val1, VRTMath::unpackLong(p.getPayloadPointer(), 8));
  assertEquals("getPulseWidth(val1) field val1", val1, p.getPulseWidth());

  // set PulseWidth of CIF3 again
  p.setPulseWidth(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setPulseWidth(val2) CIF3 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setPulseWidth(val2) pkt len", len2, len3);
  assertEquals("setPulseWidth(val2) field val2bits", val2, VRTMath::unpackLong(p.getPayloadPointer(), 8));
  assertEquals("getPulseWidth(val2) field val2", val2, p.getPulseWidth());

  // unset PulseWidth of CIF3
  p.setPulseWidth(INT64_NULL);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setPulseWidth(null) CIF3 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setPulseWidth(null) CIF3 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setPulseWidth(null) pkt len", len1, len4);
  assertEquals("setPulseWidth(null) field null", INT64_NULL, p.getPulseWidth());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const int64_t cif7val1 = 0x0;
  const int64_t cif7val2 = val1;
  const int64_t cif7val3 = val2;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getPulseWidth() field null", INT64_NULL, p.getPulseWidth());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getPulseWidth(CURRENT) field null", INT64_NULL, p.getPulseWidth(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getPulseWidth(MIN) field null", INT64_NULL, p.getPulseWidth(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getPulseWidth(MAX) field null", INT64_NULL, p.getPulseWidth(MAX_VALUE));

  // set PulseWidth CURRENT_VALUE
  p.setPulseWidth(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setPulseWidth(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setPulseWidth(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setPulseWidth(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setPulseWidth(val1,CURRENT) field val1bits", cif7val1, VRTMath::unpackLong(p.getPayloadPointer(), 12));
  assertEquals("getPulseWidth(CURRENT) field val1", cif7val1, p.getPulseWidth(CURRENT_VALUE));

  // set PulseWidth MIN_VALUE
  p.setPulseWidth(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setPulseWidth(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setPulseWidth(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setPulseWidth(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setPulseWidth(val3,MIN) field val3bits", cif7val3, VRTMath::unpackLong(p.getPayloadPointer(), 12+2*size));
  assertEquals("getPulseWidth(MIN) field val3", cif7val3, p.getPulseWidth(MIN_VALUE));

  // set PulseWidth MAX_VALUE
  p.setPulseWidth(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setPulseWidth(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setPulseWidth(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setPulseWidth(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setPulseWidth(val2,MAX) field val2bits", cif7val2, VRTMath::unpackLong(p.getPayloadPointer(), 12+size));
  assertEquals("getPulseWidth(MAX) field val2", cif7val2, p.getPulseWidth(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    cif7val3,    VRTMath::unpackLong(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    cif7val2,    VRTMath::unpackLong(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getPulseWidth(MIN) field val3",     cif7val3,    p.getPulseWidth(MIN_VALUE));
  assertEquals("getPulseWidth(MAX) field val2",     cif7val2,    p.getPulseWidth(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetOffsetTime () {
  // CIF3 bit 25
  const size_t CIF = 3;
  const size_t CIF_bit = 25;

  const int64_t val1 = 0x123456789ABCDEF0;
  const int64_t val2 = 0x0FEDCBA987654321;
  const int32_t size = 8;
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF3
  p.addCIF3();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF3() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF3() pkt len", len0+4, len1);
  assertEquals("addCIF3() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getOffsetTime() field null", INT64_NULL, p.getOffsetTime());

  // set OffsetTime of CIF3
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setOffsetTime(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setOffsetTime(val1) CIF3 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setOffsetTime(val1) pkt len", len1+size, len2);
  assertEquals("setOffsetTime(val1) field val1bits", val1, VRTMath::unpackLong(p.getPayloadPointer(), 8));
  assertEquals("getOffsetTime(val1) field val1", val1, p.getOffsetTime());

  // set OffsetTime of CIF3 again
  p.setOffsetTime(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setOffsetTime(val2) CIF3 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setOffsetTime(val2) pkt len", len2, len3);
  assertEquals("setOffsetTime(val2) field val2bits", val2, VRTMath::unpackLong(p.getPayloadPointer(), 8));
  assertEquals("getOffsetTime(val2) field val2", val2, p.getOffsetTime());

  // unset OffsetTime of CIF3
  p.setOffsetTime(INT64_NULL);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setOffsetTime(null) CIF3 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setOffsetTime(null) CIF3 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setOffsetTime(null) pkt len", len1, len4);
  assertEquals("setOffsetTime(null) field null", INT64_NULL, p.getOffsetTime());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const int64_t cif7val1 = 0x0;
  const int64_t cif7val2 = val1;
  const int64_t cif7val3 = val2;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getOffsetTime() field null", INT64_NULL, p.getOffsetTime());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getOffsetTime(CURRENT) field null", INT64_NULL, p.getOffsetTime(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getOffsetTime(MIN) field null", INT64_NULL, p.getOffsetTime(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getOffsetTime(MAX) field null", INT64_NULL, p.getOffsetTime(MAX_VALUE));

  // set OffsetTime CURRENT_VALUE
  p.setOffsetTime(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setOffsetTime(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setOffsetTime(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setOffsetTime(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setOffsetTime(val1,CURRENT) field val1bits", cif7val1, VRTMath::unpackLong(p.getPayloadPointer(), 12));
  assertEquals("getOffsetTime(CURRENT) field val1", cif7val1, p.getOffsetTime(CURRENT_VALUE));

  // set OffsetTime MIN_VALUE
  p.setOffsetTime(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setOffsetTime(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setOffsetTime(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setOffsetTime(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setOffsetTime(val3,MIN) field val3bits", cif7val3, VRTMath::unpackLong(p.getPayloadPointer(), 12+2*size));
  assertEquals("getOffsetTime(MIN) field val3", cif7val3, p.getOffsetTime(MIN_VALUE));

  // set OffsetTime MAX_VALUE
  p.setOffsetTime(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setOffsetTime(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setOffsetTime(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setOffsetTime(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setOffsetTime(val2,MAX) field val2bits", cif7val2, VRTMath::unpackLong(p.getPayloadPointer(), 12+size));
  assertEquals("getOffsetTime(MAX) field val2", cif7val2, p.getOffsetTime(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    cif7val3,    VRTMath::unpackLong(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    cif7val2,    VRTMath::unpackLong(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getOffsetTime(MIN) field val3",     cif7val3,    p.getOffsetTime(MIN_VALUE));
  assertEquals("getOffsetTime(MAX) field val2",     cif7val2,    p.getOffsetTime(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetFallTime () {
  // CIF3 bit 26
  const size_t CIF = 3;
  const size_t CIF_bit = 26;

  const int64_t val1 = 0x123456789ABCDEF0;
  const int64_t val2 = 0x0FEDCBA987654321;
  const int32_t size = 8;
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF3
  p.addCIF3();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF3() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF3() pkt len", len0+4, len1);
  assertEquals("addCIF3() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getFallTime() field null", INT64_NULL, p.getFallTime());

  // set FallTime of CIF3
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setFallTime(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setFallTime(val1) CIF3 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setFallTime(val1) pkt len", len1+size, len2);
  assertEquals("setFallTime(val1) field val1bits", val1, VRTMath::unpackLong(p.getPayloadPointer(), 8));
  assertEquals("getFallTime(val1) field val1", val1, p.getFallTime());

  // set FallTime of CIF3 again
  p.setFallTime(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setFallTime(val2) CIF3 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setFallTime(val2) pkt len", len2, len3);
  assertEquals("setFallTime(val2) field val2bits", val2, VRTMath::unpackLong(p.getPayloadPointer(), 8));
  assertEquals("getFallTime(val2) field val2", val2, p.getFallTime());

  // unset FallTime of CIF3
  p.setFallTime(INT64_NULL);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setFallTime(null) CIF3 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setFallTime(null) CIF3 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setFallTime(null) pkt len", len1, len4);
  assertEquals("setFallTime(null) field null", INT64_NULL, p.getFallTime());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const int64_t cif7val1 = 0x0;
  const int64_t cif7val2 = val1;
  const int64_t cif7val3 = val2;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getFallTime() field null", INT64_NULL, p.getFallTime());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getFallTime(CURRENT) field null", INT64_NULL, p.getFallTime(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getFallTime(MIN) field null", INT64_NULL, p.getFallTime(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getFallTime(MAX) field null", INT64_NULL, p.getFallTime(MAX_VALUE));

  // set FallTime CURRENT_VALUE
  p.setFallTime(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setFallTime(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setFallTime(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setFallTime(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setFallTime(val1,CURRENT) field val1bits", cif7val1, VRTMath::unpackLong(p.getPayloadPointer(), 12));
  assertEquals("getFallTime(CURRENT) field val1", cif7val1, p.getFallTime(CURRENT_VALUE));

  // set FallTime MIN_VALUE
  p.setFallTime(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setFallTime(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setFallTime(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setFallTime(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setFallTime(val3,MIN) field val3bits", cif7val3, VRTMath::unpackLong(p.getPayloadPointer(), 12+2*size));
  assertEquals("getFallTime(MIN) field val3", cif7val3, p.getFallTime(MIN_VALUE));

  // set FallTime MAX_VALUE
  p.setFallTime(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setFallTime(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setFallTime(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setFallTime(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setFallTime(val2,MAX) field val2bits", cif7val2, VRTMath::unpackLong(p.getPayloadPointer(), 12+size));
  assertEquals("getFallTime(MAX) field val2", cif7val2, p.getFallTime(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    cif7val3,    VRTMath::unpackLong(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    cif7val2,    VRTMath::unpackLong(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getFallTime(MIN) field val3",     cif7val3,    p.getFallTime(MIN_VALUE));
  assertEquals("getFallTime(MAX) field val2",     cif7val2,    p.getFallTime(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetRiseTime () {
  // CIF3 bit 27
  const size_t CIF = 3;
  const size_t CIF_bit = 27;

  const int64_t val1 = 0x123456789ABCDEF0;
  const int64_t val2 = 0x0FEDCBA987654321;
  const int32_t size = 8;
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF3
  p.addCIF3();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF3() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF3() pkt len", len0+4, len1);
  assertEquals("addCIF3() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getRiseTime() field null", INT64_NULL, p.getRiseTime());

  // set RiseTime of CIF3
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setRiseTime(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setRiseTime(val1) CIF3 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setRiseTime(val1) pkt len", len1+size, len2);
  assertEquals("setRiseTime(val1) field val1bits", val1, VRTMath::unpackLong(p.getPayloadPointer(), 8));
  assertEquals("getRiseTime(val1) field val1", val1, p.getRiseTime());

  // set RiseTime of CIF3 again
  p.setRiseTime(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setRiseTime(val2) CIF3 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setRiseTime(val2) pkt len", len2, len3);
  assertEquals("setRiseTime(val2) field val2bits", val2, VRTMath::unpackLong(p.getPayloadPointer(), 8));
  assertEquals("getRiseTime(val2) field val2", val2, p.getRiseTime());

  // unset RiseTime of CIF3
  p.setRiseTime(INT64_NULL);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setRiseTime(null) CIF3 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setRiseTime(null) CIF3 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setRiseTime(null) pkt len", len1, len4);
  assertEquals("setRiseTime(null) field null", INT64_NULL, p.getRiseTime());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const int64_t cif7val1 = 0x0;
  const int64_t cif7val2 = val1;
  const int64_t cif7val3 = val2;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getRiseTime() field null", INT64_NULL, p.getRiseTime());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getRiseTime(CURRENT) field null", INT64_NULL, p.getRiseTime(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getRiseTime(MIN) field null", INT64_NULL, p.getRiseTime(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getRiseTime(MAX) field null", INT64_NULL, p.getRiseTime(MAX_VALUE));

  // set RiseTime CURRENT_VALUE
  p.setRiseTime(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setRiseTime(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setRiseTime(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setRiseTime(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setRiseTime(val1,CURRENT) field val1bits", cif7val1, VRTMath::unpackLong(p.getPayloadPointer(), 12));
  assertEquals("getRiseTime(CURRENT) field val1", cif7val1, p.getRiseTime(CURRENT_VALUE));

  // set RiseTime MIN_VALUE
  p.setRiseTime(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setRiseTime(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setRiseTime(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setRiseTime(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setRiseTime(val3,MIN) field val3bits", cif7val3, VRTMath::unpackLong(p.getPayloadPointer(), 12+2*size));
  assertEquals("getRiseTime(MIN) field val3", cif7val3, p.getRiseTime(MIN_VALUE));

  // set RiseTime MAX_VALUE
  p.setRiseTime(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setRiseTime(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setRiseTime(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setRiseTime(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setRiseTime(val2,MAX) field val2bits", cif7val2, VRTMath::unpackLong(p.getPayloadPointer(), 12+size));
  assertEquals("getRiseTime(MAX) field val2", cif7val2, p.getRiseTime(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    cif7val3,    VRTMath::unpackLong(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    cif7val2,    VRTMath::unpackLong(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getRiseTime(MIN) field val3",     cif7val3,    p.getRiseTime(MIN_VALUE));
  assertEquals("getRiseTime(MAX) field val2",     cif7val2,    p.getRiseTime(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetTimestampSkew () {
  // CIF3 bit 30
  const size_t CIF = 3;
  const size_t CIF_bit = 30;

  const int64_t val1 = 0x123456789ABCDEF0;
  const int64_t val2 = 0x0FEDCBA987654321;
  const int32_t size = 8;
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF3
  p.addCIF3();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF3() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF3() pkt len", len0+4, len1);
  assertEquals("addCIF3() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getTimestampSkew() field null", INT64_NULL, p.getTimestampSkew());

  // set TimestampSkew of CIF3
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setTimestampSkew(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setTimestampSkew(val1) CIF3 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setTimestampSkew(val1) pkt len", len1+size, len2);
  assertEquals("setTimestampSkew(val1) field val1bits", val1, VRTMath::unpackLong(p.getPayloadPointer(), 8));
  assertEquals("getTimestampSkew(val1) field val1", val1, p.getTimestampSkew());

  // set TimestampSkew of CIF3 again
  p.setTimestampSkew(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setTimestampSkew(val2) CIF3 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setTimestampSkew(val2) pkt len", len2, len3);
  assertEquals("setTimestampSkew(val2) field val2bits", val2, VRTMath::unpackLong(p.getPayloadPointer(), 8));
  assertEquals("getTimestampSkew(val2) field val2", val2, p.getTimestampSkew());

  // unset TimestampSkew of CIF3
  p.setTimestampSkew(INT64_NULL);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setTimestampSkew(null) CIF3 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setTimestampSkew(null) CIF3 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setTimestampSkew(null) pkt len", len1, len4);
  assertEquals("setTimestampSkew(null) field null", INT64_NULL, p.getTimestampSkew());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const int64_t cif7val1 = 0x0;
  const int64_t cif7val2 = val1;
  const int64_t cif7val3 = val2;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getTimestampSkew() field null", INT64_NULL, p.getTimestampSkew());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getTimestampSkew(CURRENT) field null", INT64_NULL, p.getTimestampSkew(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getTimestampSkew(MIN) field null", INT64_NULL, p.getTimestampSkew(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getTimestampSkew(MAX) field null", INT64_NULL, p.getTimestampSkew(MAX_VALUE));

  // set TimestampSkew CURRENT_VALUE
  p.setTimestampSkew(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setTimestampSkew(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setTimestampSkew(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setTimestampSkew(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setTimestampSkew(val1,CURRENT) field val1bits", cif7val1, VRTMath::unpackLong(p.getPayloadPointer(), 12));
  assertEquals("getTimestampSkew(CURRENT) field val1", cif7val1, p.getTimestampSkew(CURRENT_VALUE));

  // set TimestampSkew MIN_VALUE
  p.setTimestampSkew(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setTimestampSkew(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setTimestampSkew(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setTimestampSkew(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setTimestampSkew(val3,MIN) field val3bits", cif7val3, VRTMath::unpackLong(p.getPayloadPointer(), 12+2*size));
  assertEquals("getTimestampSkew(MIN) field val3", cif7val3, p.getTimestampSkew(MIN_VALUE));

  // set TimestampSkew MAX_VALUE
  p.setTimestampSkew(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setTimestampSkew(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setTimestampSkew(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setTimestampSkew(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setTimestampSkew(val2,MAX) field val2bits", cif7val2, VRTMath::unpackLong(p.getPayloadPointer(), 12+size));
  assertEquals("getTimestampSkew(MAX) field val2", cif7val2, p.getTimestampSkew(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    cif7val3,    VRTMath::unpackLong(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    cif7val2,    VRTMath::unpackLong(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getTimestampSkew(MIN) field val3",     cif7val3,    p.getTimestampSkew(MIN_VALUE));
  assertEquals("getTimestampSkew(MAX) field val2",     cif7val2,    p.getTimestampSkew(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}

void BasicQueryAcknowledgePacketTest::testSetTimestampDetails () {
  // CIF3 bit 31
  const size_t CIF = 3;
  const size_t CIF_bit = 31;

  const int64_t val1 = 0x123456789ABCDEF0;
  const int64_t val2 = 0x0FEDCBA987654321;
  const int64_t mask = 0xFF07FFFFFFFFFFFF;
  const int32_t size = 8;
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // add CIF3
  p.addCIF3();
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF3() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF3() pkt len", len0+4, len1);
  assertEquals("addCIF3() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getTimestampDetails() field null", INT64_NULL, p.getTimestampDetails());

  // set TimestampDetails of CIF3
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);
  p.setTimestampDetails(val1);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setTimestampDetails(val1) CIF3 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setTimestampDetails(val1) pkt len", len1+size, len2);
  assertEquals("setTimestampDetails(val1) field val1bits", val1&mask, VRTMath::unpackLong(p.getPayloadPointer(), 8));
  assertEquals("getTimestampDetails(val1) field val1", val1&mask, p.getTimestampDetails());

  // set TimestampDetails of CIF3 again
  p.setTimestampDetails(val2);
  int32_t len3 = p.getPayloadLength();
  assertEquals("setTimestampDetails(val2) CIF3 bit", 0x1<<CIF_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setTimestampDetails(val2) pkt len", len2, len3);
  assertEquals("setTimestampDetails(val2) field val2bits", val2&mask, VRTMath::unpackLong(p.getPayloadPointer(), 8));
  assertEquals("getTimestampDetails(val2) field val2", val2&mask, p.getTimestampDetails());

  // unset TimestampDetails of CIF3
  p.setTimestampDetails(INT64_NULL);
  int32_t len4 = p.getPayloadLength();
  assertEquals("setTimestampDetails(null) CIF3 bit unset", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setTimestampDetails(null) CIF3 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setTimestampDetails(null) pkt len", len1, len4);
  assertEquals("setTimestampDetails(null) field null", INT64_NULL, p.getTimestampDetails());

  // CIF7 tests
  const IndicatorFieldEnum_t parent_CIF = (IndicatorFieldEnum_t)((CIF<<5)|CIF_bit);
  const int64_t cif7val1 = 0x0;
  const int64_t cif7val2 = val1;
  const int64_t cif7val3 = val2;
  const int32_t cif7belief1 = 0x12345678;
  const int32_t cif7belief2 = cif7belief1&_BELIEF_MASK;
  const int32_t cif7prob1 = 0x87654321;
  const int32_t cif7prob2 = cif7prob1&_PROBABILITY_MASK;

  // add CIF1
  //p.addCIF1(); // don't need to do this b/c it was added previously and not removed
  len1 = p.getPayloadLength();
  assertEquals("addCIF1() CIF0 bit", (0x1<<CIF), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF));
  assertEquals("addCIF1() pkt len", len0+4, len1);
  assertEquals("addCIF1() init 0", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getTimestampDetails() field null", INT64_NULL, p.getTimestampDetails());
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1b = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len1+4, len1b);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1b);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2b);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1b, len2b);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getTimestampDetails(CURRENT) field null", INT64_NULL, p.getTimestampDetails(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3b);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2b, len3b);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("getTimestampDetails(MIN) field null", INT64_NULL, p.getTimestampDetails(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4b);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3b, len4b);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & (_MAX_VALUE));
  assertEquals("getTimestampDetails(MAX) field null", INT64_NULL, p.getTimestampDetails(MAX_VALUE));

  // set TimestampDetails CURRENT_VALUE
  p.setTimestampDetails(cif7val1, CURRENT_VALUE);
  int32_t len5b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5b);
  assertEquals("setTimestampDetails(val1,CURRENT) pkt len", len4b+size*3, len5b); // size*3 b/c of the 3 CIF7 attrs
  assertEquals("setTimestampDetails(val1,CURRENT) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setTimestampDetails(val1,CURRENT) CIF7 bit", _CURRENT_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setTimestampDetails(val1,CURRENT) field val1bits", cif7val1&mask, VRTMath::unpackLong(p.getPayloadPointer(), 12));
  assertEquals("getTimestampDetails(CURRENT) field val1", cif7val1&mask, p.getTimestampDetails(CURRENT_VALUE));

  // set TimestampDetails MIN_VALUE
  p.setTimestampDetails(cif7val3, MIN_VALUE);
  int32_t len6b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6b);
  assertEquals("setTimestampDetails(val3,MIN) pkt len", len5b, len6b);
  assertEquals("setTimestampDetails(val3,MIN) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setTimestampDetails(val3,MIN) CIF7 bit", _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setTimestampDetails(val3,MIN) field val3bits", cif7val3&mask, VRTMath::unpackLong(p.getPayloadPointer(), 12+2*size));
  assertEquals("getTimestampDetails(MIN) field val3", cif7val3&mask, p.getTimestampDetails(MIN_VALUE));

  // set TimestampDetails MAX_VALUE
  p.setTimestampDetails(cif7val2, MAX_VALUE);
  int32_t len7b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7b);
  assertEquals("setTimestampDetails(val2,MAX) pkt len", len6b, len7b);
  assertEquals("setTimestampDetails(val2,MAX) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setTimestampDetails(val2,MAX) CIF7 bit", _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setTimestampDetails(val2,MAX) field val2bits", cif7val2&mask, VRTMath::unpackLong(p.getPayloadPointer(), 12+size));
  assertEquals("getTimestampDetails(MAX) field val2", cif7val2&mask, p.getTimestampDetails(MAX_VALUE));

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len8b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8b);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len7b+_BELIEF_SIZE, len8b);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("getCIF7Belief(parent_CIF) field null", 0, p.getCIF7Belief(parent_CIF));

  // set Belief of parent_CIF
  p.setCIF7Belief(parent_CIF, cif7belief1);
  int32_t len9b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(parent_CIF,val1) CIF7 bit", _BELIEF, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Belief(parent_CIF,val1) pkt len", len8b, len9b);
  assertEquals("setCIF7Belief(parent_CIF,val1) field val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+3*size));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // remove CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, false);
  int32_t len10b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) pkt len", len9b-size, len10b);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 CURRENT bit", 0x0,        VRTMath::unpackInt(p.getPayloadPointer(), 8) & _CURRENT_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MIN bit",     _MIN_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MIN_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 MAX bit",     _MAX_VALUE, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _MAX_VALUE);
  assertEquals("setCIF7Attribute(CURRENT,false) CIF7 BELIEF bit",  _BELIEF,    VRTMath::unpackInt(p.getPayloadPointer(), 8) & _BELIEF);
  assertEquals("setCIF7Attribute(CURRENT,false) MIN val3bits",    cif7val3&mask,    VRTMath::unpackLong(p.getPayloadPointer(), 12+size));
  assertEquals("setCIF7Attribute(CURRENT,false) MAX val2bits",    cif7val2&mask,    VRTMath::unpackLong(p.getPayloadPointer(), 12));
  assertEquals("setCIF7Attribute(CURRENT,false) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getTimestampDetails(MIN) field val3",     cif7val3&mask,    p.getTimestampDetails(MIN_VALUE));
  assertEquals("getTimestampDetails(MAX) field val2",     cif7val2&mask,    p.getTimestampDetails(MAX_VALUE));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len11b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len10b+_PROBABILITY_SIZE, len11b);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Attribute(PROBABILITY) BELIEF val1bits", cif7belief2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size+_PROBABILITY_SIZE));
  assertEquals("getCIF7Probability(parent_CIF) field null", 0, p.getCIF7Probability(parent_CIF));
  assertEquals("getCIF7Belief(parent_CIF) field val1", cif7belief2, p.getCIF7Belief(parent_CIF));

  // Set Probability of parent_CIF
  p.setCIF7Probability(parent_CIF, cif7prob1);
  int32_t len12b = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF1 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(parent_CIF,val1) CIF7 bit", _PROBABILITY, VRTMath::unpackInt(p.getPayloadPointer(), 8) & _PROBABILITY);
  assertEquals("setCIF7Probability(parent_CIF,val1) pkt len", len11b, len12b);
  assertEquals("setCIF7Probability(parent_CIF,val1) field val1bits", cif7prob2, VRTMath::unpackInt(p.getPayloadPointer(), 12+2*size));
  assertEquals("getCIF7Probability(parent_CIF) field val1", cif7prob2, p.getCIF7Probability(parent_CIF));
}


// CIF7 tests
    // BELIEF_mask                = 0x00080000; // 1 (See V49.2 spec Section 9.12 rules)
    // PROBABILITY_mask           = 0x00100000; // 1 (See V49.2 spec Section 9.12 rules)
    // THIRD_DERIVATIVE_mask      = 0x00200000; // same as field it describes
    // SECOND_DERIVATIVE_mask     = 0x00400000; // same as field it describes
    // FIRST_DERIVATIVE_mask      = 0x00800000; // same as field it describes
    // ACCURACY_mask              = 0x01000000; // same as field it describes
    // PRECISION_mask             = 0x02000000; // same as field it describes
    // MIN_VALUE_mask             = 0x04000000; // same as field it describes
    // MAX_VALUE_mask             = 0x08000000; // same as field it describes
    // STANDARD_DEVIATION_mask    = 0x10000000; // same as field it describes
    // MEDIAN_VALUE_mask          = 0x20000000; // same as field it describes
    // AVERAGE_VALUE_mask         = 0x40000000; // same as field it describes
    // CURRENT_VALUE_mask         = 0x80000000; // same as field it describes

void BasicQueryAcknowledgePacketTest::testSetCIF7Belief () {
  // CIF0 bit 30 (target)
  // CIF7 bit 19 (BELIEF attribute)
  //const size_t CIF = 0; // not needed for CIF0, since it's always there
  const size_t CIF_bit = 30;  // REF_POINT
  const size_t CIF7_bit = 19; // BELIEF
  //const size_t CIF7_CUR = 31; // CURRENT_VALUE

  const int32_t val1 = 0x0;
  const int32_t val2 = 0x12345678;
  const int32_t val3 = 0xFFFFFFFF;
  const int32_t mask = 0x000000FF;
  const int32_t size = 4;
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len0+4, len1);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Set CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, true);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setCIF7Attribute(BELIEF) pkt len", len1, len2);
  assertEquals("setCIF7Attribute(BELIEF) CIF7 bit", 0x1<<CIF7_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getCIF7Belief(BELIEF) field null", INT32_NULL, p.getCIF7Belief(REF_POINT));

  // set Belief of REF_POINT
  p.setCIF7Belief(REF_POINT, val1);
  int32_t len3 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3);
  assertEquals("setCIF7Belief(REF_POINT,val1) CIF0 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(REF_POINT,val1) CIF7 bit", 0x1<<CIF7_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setCIF7Belief(REF_POINT,val1) pkt len", len2+size, len3);
  assertEquals("setCIF7Belief(REF_POINT,val1) field val1bits", val1&mask, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getCIF7Belief(REF_POINT) field val1", val1&mask, p.getCIF7Belief(REF_POINT));

  // set Belief of REF_POINT again
  p.setCIF7Belief(REF_POINT, val2);
  int32_t len4 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4);
  assertEquals("setCIF7Belief(REF_POINT,val2) CIF0 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(REF_POINT,val2) CIF7 bit", 0x1<<CIF7_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setCIF7Belief(REF_POINT,val2) pkt len", len3, len4);
  assertEquals("setCIF7Belief(REF_POINT,val2) field val2bits", val2&mask, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getCIF7Belief(REF_POINT) field val2", val2&mask, p.getCIF7Belief(REF_POINT));

  // set Belief of REF_POINT again
  p.setCIF7Belief(REF_POINT, val3);
  int32_t len5 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5);
  assertEquals("setCIF7Belief(REF_POINT,val3) CIF0 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF_bit));
  assertEquals("setCIF7Belief(REF_POINT,val3) CIF7 bit", 0x1<<CIF7_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setCIF7Belief(REF_POINT,val3) pkt len", len4, len5);
  assertEquals("setCIF7Belief(REF_POINT,val3) field val3bits", val3&mask, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getCIF7Belief(REF_POINT) field val3", val3&mask, p.getCIF7Belief(REF_POINT));

  // unset ReferencePointIdentifier
  p.setReferencePointIdentifier(INT32_NULL);
  int32_t len6 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6);
  assertEquals("setReferencePointIdentifier(NULL) CIF0 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF_bit));
  assertEquals("setReferencePointIdentifier(NULL) CIF7", (0x1<<CIF7_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setReferencePointIdentifier(NULL) pkt len", len2, len6);
  assertEquals("getCIF7Belief(REF_POINT) field null", INT32_NULL, p.getCIF7Belief(REF_POINT));

  // Unset CIF7 Attribute BELIEF
  p.setCIF7Attribute(BELIEF, false);
  int32_t len7 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7);
  assertEquals("setCIF7Attribute(BELIEF,false) CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF7_bit));
  assertEquals("setCIF7Attribute(BELIEF,false) CIF7 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setCIF7Attribute(BELIEF,false) pkt len", len7, len6);

  // Remove CIF7
  p.addCIF7(false);
  int32_t len8 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8);
  assertEquals("addCIF7(false) pkt len", len0, len8);
  assertEquals("addCIF7(false) CIF0 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
}

void BasicQueryAcknowledgePacketTest::testSetCIF7Probability () {
  // CIF0 bit 30 (target)
  // CIF7 bit 20 (PROBABILITY attribute)
  //const size_t CIF = 0; // not needed for CIF0, since it's always there
  const size_t CIF_bit = 30;  // REF_POINT
  const size_t CIF7_bit = 20; // PROBABILITY
  //const size_t CIF7_CUR = 31; // CURRENT_VALUE

  const int32_t val1 = 0x0;
  const int32_t val2 = 0x12345678;
  const int32_t val3 = 0xFFFFFFFF;
  const int32_t mask = 0x0000FFFF;
  const int32_t size = 4;
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len0+4, len1);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Set CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, true);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setCIF7Attribute(PROBABILITY) pkt len", len1, len2);
  assertEquals("setCIF7Attribute(PROBABILITY) CIF7 bit", 0x1<<CIF7_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getCIF7Probability(REF_POINT) field null", INT32_NULL, p.getCIF7Probability(REF_POINT));

  // set Probability for REF_POINT
  p.setCIF7Probability(REF_POINT, val1);
  int32_t len3 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3);
  assertEquals("setCIF7Probability(REF_POINT,val1) CIF0 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(REF_POINT,val1) CIF7 bit", 0x1<<CIF7_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setCIF7Probability(REF_POINT,val1) pkt len", len2+size, len3);
  assertEquals("setCIF7Probability(REF_POINT,val1) field val1bits", val1&mask, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getCIF7Probability(REF_POINT) field val1", val1&mask, p.getCIF7Probability(REF_POINT));

  // set Probability for REF_POINT again
  p.setCIF7Probability(REF_POINT, val2);
  int32_t len4 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4);
  assertEquals("setCIF7Probability(REF_POINT,val2) CIF0 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(REF_POINT,val2) CIF7 bit", 0x1<<CIF7_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setCIF7Probability(REF_POINT,val2) pkt len", len3, len4);
  assertEquals("setCIF7Probability(REF_POINT,val2) field val1bits", val2&mask, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getCIF7Probability(REF_POINT) field val1", val2&mask, p.getCIF7Probability(REF_POINT));

  // set Probability for REF_POINT again
  p.setCIF7Probability(REF_POINT, val3);
  int32_t len5 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5);
  assertEquals("setCIF7Probability(REF_POINT,val3) CIF0 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF_bit));
  assertEquals("setCIF7Probability(REF_POINT,val3) CIF7 bit", 0x1<<CIF7_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setCIF7Probability(REF_POINT,val3) pkt len", len4, len5);
  assertEquals("setCIF7Probability(REF_POINT,val3) field val1bits", val3&mask, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getCIF7Probability(REF_POINT) field val1", val3&mask, p.getCIF7Probability(REF_POINT));

  // unset ReferencePointIdentifier
  p.setReferencePointIdentifier(INT32_NULL);
  int32_t len6 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6);
  assertEquals("setReferencePointIdentifier(NULL) CIF0 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF_bit));
  assertEquals("setReferencePointIdentifier(NULL) CIF7", (0x1<<CIF7_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setReferencePointIdentifier(NULL) pkt len", len2, len6);
  assertEquals("getCIF7Probability(REF_POINT) field null", INT32_NULL, p.getCIF7Probability(REF_POINT));

  // Unset CIF7 Attribute PROBABILITY
  p.setCIF7Attribute(PROBABILITY, false);
  int32_t len7 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7);
  assertEquals("setCIF7Attribute(PROBABILITY,false) CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF7_bit));
  assertEquals("setCIF7Attribute(PROBABILITY,false) CIF7 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setCIF7Attribute(PROBABILITY,false) pkt len", len7, len6);

  // Remove CIF7
  p.addCIF7(false);
  int32_t len8 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8);
  assertEquals("addCIF7(false) pkt len", len0, len8);
  assertEquals("addCIF7(false) CIF0 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);

}

void BasicQueryAcknowledgePacketTest::testSetReferencePointIdentifierCIF7Median () {
  // CIF0 bit 30
  //const size_t CIF = 0; // not needed for CIF0, since it's always there
  const size_t CIF_bit = 30;  // REF_POINT
  const size_t CIF7_bit = 29; // MEDIAN_VALUE
  const size_t CIF7_CUR = 31; // CURRENT_VALUE

  const int32_t val1 = 0x0;
  const int32_t val2 = 0x12345678;
  const int32_t val3 = 0xFFFFFFFF;
  //const int32_t mask = 0xFFFFFFFF;
  const int32_t size = 4;
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len0+4, len1);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Set CIF7 Attribute MEDIAN_VALUE
  p.setCIF7Attribute(MEDIAN_VALUE, true);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  //p.setCIF7Attribute(AVERAGE_VALUE, true);
  //p.setCIF7Attribute(CURRENT_VALUE, true);
  assertEquals("setCIF7Attribute(MEDIAN) pkt len", len1, len2);
  assertEquals("setCIF7Attribute(MEDIAN) CIF7 bit", 0x1<<CIF7_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getReferencePointIdentifier(MEDIAN) field null", INT32_NULL, p.getReferencePointIdentifier(MEDIAN_VALUE));

  // set ReferencePointIdentifier MEDIAN_VALUE
  p.setReferencePointIdentifier(val1, MEDIAN_VALUE);
  int32_t len3 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3);
  assertEquals("setReferencePointIdentifier(val1,MEDIAN) CIF0 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF_bit));
  assertEquals("setReferencePointIdentifier(val1,MEDIAN) CIF7 bit", 0x1<<CIF7_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setReferencePointIdentifier(val1,MEDIAN) pkt len", len2+size, len3);
  assertEquals("setReferencePointIdentifier(val1,MEDIAN) field val1bits", val1, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getReferencePointIdentifier(MEDIAN) field val1", val1, p.getReferencePointIdentifier(MEDIAN_VALUE));

  // set ReferencePointIdentifier MEDIAN_VALUE again
  p.setReferencePointIdentifier(val2, MEDIAN_VALUE);
  int32_t len4 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4);
  assertEquals("setReferencePointIdentifier(val2,MEDIAN) CIF0 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF_bit));
  assertEquals("setReferencePointIdentifier(val2,MEDIAN) CIF7 bit", 0x1<<CIF7_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setReferencePointIdentifier(val2,MEDIAN) pkt len", len3, len4);
  assertEquals("setReferencePointIdentifier(val2,MEDIAN) field val1bits", val2, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getReferencePointIdentifier(MEDIAN) field val1", val2, p.getReferencePointIdentifier(MEDIAN_VALUE));

  // set ReferencePointIdentifier MEDIAN_VALUE again
  p.setReferencePointIdentifier(val3, MEDIAN_VALUE);
  int32_t len5 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5);
  assertEquals("setReferencePointIdentifier(val3,MEDIAN) CIF0 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF_bit));
  assertEquals("setReferencePointIdentifier(val3,MEDIAN) CIF7 bit", 0x1<<CIF7_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setReferencePointIdentifier(val3,MEDIAN) pkt len", len4, len5);
  assertEquals("setReferencePointIdentifier(val3,MEDIAN) field val1bits", val3, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getReferencePointIdentifier(MEDIAN) field val1", val3, p.getReferencePointIdentifier(MEDIAN_VALUE));

  // unset ReferencePointIdentifier
  p.setReferencePointIdentifier(INT32_NULL);
  int32_t len6 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6);
  assertEquals("setReferencePointIdentifier(NULL) CIF0 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF_bit));
  assertEquals("setReferencePointIdentifier(NULL) CIF7", (0x1<<CIF7_bit), VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setReferencePointIdentifier(NULL) pkt len", len2, len6);
  assertEquals("getReferencePointIdentifier(MEDIAN) field null", INT32_NULL, p.getReferencePointIdentifier(MEDIAN_VALUE));

  // Unset CIF7 Attribute MEDIAN_VALUE
  p.setCIF7Attribute(MEDIAN_VALUE, false);
  int32_t len7 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7);
  //p.setCIF7Attribute(AVERAGE_VALUE, false);
  //p.setCIF7Attribute(CURRENT_VALUE, false);
  assertEquals("setCIF7Attribute(MEDIAN,false) CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF7_bit));
  assertEquals("setCIF7Attribute(MEDIAN,false) CIF7 blank", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("setCIF7Attribute(MEDIAN,false) pkt len", len7, len6);

  // Remove CIF7
  p.addCIF7(false);
  int32_t len8 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8);
  assertEquals("addCIF7(false) pkt len", len0, len8);
  assertEquals("addCIF7(false) CIF0 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);

  // set ReferencePointIdentifier before setting CIF7
  p.setReferencePointIdentifier(val1);
  int32_t len9 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9);
  assertEquals("setReferencePointIdentifier(val1) CIF0 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF_bit));
  assertEquals("setReferencePointIdentifier(val1) pkt len", len8+size, len9);
  assertEquals("setReferencePointIdentifier(val1) field val1bits", val1, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getReferencePointIdentifier() field val1", val1, p.getReferencePointIdentifier());

  // Add CIF7 after already setting ReferencePointIdentifier
  p.addCIF7(); // default is true
  int32_t len10 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10);
  assertEquals("addCIF7()b pkt len", len9+4, len10);
  assertEquals("addCIF7()b CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7()b default CIF7 bit", (0x1<<CIF7_CUR), VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("addCIF7()b field val1bits", val1, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("addCIF7()b field val1", val1, p.getReferencePointIdentifier());
  assertEquals("getReferencePointIdentifier(CURRENT) field val1", val1, p.getReferencePointIdentifier(CURRENT_VALUE));

  // set ReferencePointIdentifier w/o specifying CIF7 attribute
  p.setReferencePointIdentifier(val2);
  int32_t len11 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11);
  assertEquals("setReferencePointIdentifier(val2) pkt len", len10, len11);
  assertEquals("setReferencePointIdentifier(val2) field val2bits", val2, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getReferencePointIdentifier(CURRENT) field val2", val2, p.getReferencePointIdentifier(CURRENT_VALUE));
  assertEquals("getReferencePointIdentifier() field val2", val2, p.getReferencePointIdentifier());

  // set ReferencePointIdentifier CURRENT_VALUE
  p.setReferencePointIdentifier(val3, CURRENT_VALUE);
  int32_t len12 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12);
  assertEquals("setReferencePointIdentifier(val3,CURRENT) pkt len", len11, len12);
  assertEquals("setReferencePointIdentifier(val3,CURRENT) field val3bits", val3, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getReferencePointIdentifier(CURRENT) field val3", val3, p.getReferencePointIdentifier(CURRENT_VALUE));
  assertEquals("getReferencePointIdentifier() field val3", val3, p.getReferencePointIdentifier());

  // Set second CIF7 Attribute MEDIAN_VALUE
  p.setCIF7Attribute(MEDIAN_VALUE, true);
  int32_t len13 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len13);
  //p.setCIF7Attribute(AVERAGE_VALUE, true);
  //p.setCIF7Attribute(CURRENT_VALUE, true);
  assertEquals("setCIF7Attribute(MEDIAN) pkt len", len12+size, len13);
  assertEquals("setCIF7Attribute(MEDIAN) CIF7 MEDIAN bit", 0x1<<CIF7_bit, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF7_bit));
  assertEquals("setCIF7Attribute(MEDIAN) CIF7 CURRENT bit", 0x1<<CIF7_CUR, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF7_CUR));
  assertEquals("setCIF7Attribute(MEDIAN) CURRENT val3bits", val3, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("setCIF7Attribute(MEDIAN) MEDIAN default", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getReferencePointIdentifier(CURRENT) field val3", val3, p.getReferencePointIdentifier(CURRENT_VALUE));
  assertEquals("getReferencePointIdentifier(MEDIAN) field default", 0x0, p.getReferencePointIdentifier(MEDIAN_VALUE));

  // set ReferencePointIdentifier MEDIAN_VALUE
  p.setReferencePointIdentifier(val1, MEDIAN_VALUE);
  int32_t len14 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len14);
  assertEquals("setReferencePointIdentifier(val1,MEDIAN)b pkt len", len13, len14);
  assertEquals("setReferencePointIdentifier(val1,MEDIAN)b CURRENT val3bits", val3, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("setReferencePointIdentifier(val1,MEDIAN)b MEDIAN val1bits", val1, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getReferencePointIdentifier(CURRENT) field val3", val3, p.getReferencePointIdentifier(CURRENT_VALUE));
  assertEquals("getReferencePointIdentifier(MEDIAN) field val1", val1, p.getReferencePointIdentifier(MEDIAN_VALUE));

  // set ReferencePointIdentifier MEDIAN_VALUE again
  p.setReferencePointIdentifier(val2, MEDIAN_VALUE);
  int32_t len15 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len15);
  assertEquals("setReferencePointIdentifier(val2,MEDIAN)b pkt len", len14, len15);
  assertEquals("setReferencePointIdentifier(val2,MEDIAN)b CURRENT val3bits", val3, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("setReferencePointIdentifier(val2,MEDIAN)b MEDIAN val2bits", val2, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getReferencePointIdentifier(CURRENT) field val3", val3, p.getReferencePointIdentifier(CURRENT_VALUE));
  assertEquals("getReferencePointIdentifier(MEDIAN) field val2", val2, p.getReferencePointIdentifier(MEDIAN_VALUE));

  // Unset CIF7 Attribute MEDIAN_VALUE
  p.setCIF7Attribute(MEDIAN_VALUE, false);
  int32_t len16 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len16);
  assertEquals("setCIF7Attribute(MEDIAN,false) pkt len", len16, len15-size);
  assertEquals("setCIF7Attribute(MEDIAN,false) CIF7 MEDIAN bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF7_bit));
  assertEquals("setCIF7Attribute(MEDIAN,false) CIF7 CURRENT bit", 0x1<<CIF7_CUR, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF7_CUR));
  assertEquals("setCIF7Attribute(MEDIAN,false) CURRENT val3bits", val3, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getReferencePointIdentifier(CURRENT) field val3", val3, p.getReferencePointIdentifier(CURRENT_VALUE));

  // Remove CIF7
  p.addCIF7(false);
  int32_t len17 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len17);
  assertEquals("addCIF7(false) pkt len", len17, len16-4);
  assertEquals("addCIF7(false) CIF0 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7(false) val3bits", val3, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getReferencePointIdentifier() field val3", val3, p.getReferencePointIdentifier());

  // Unset ReferencePointIdentifier
  p.setReferencePointIdentifier(INT32_NULL);
  int32_t len18 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len18);
  assertEquals("setReferencePointIdentifier(NULL) pkt len", len18, len17-size);
  assertEquals("setReferencePointIdentifier(NULL) CIF0 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF_bit));
}

void BasicQueryAcknowledgePacketTest::testSetReferencePointIdentifierCIF7Multiple () {
  // CIF0 bit 30
  //const size_t CIF = 0; // not needed for CIF0, since it's always there
  const size_t CIF_bit   = 30; // REF_POINT
  const size_t CIF7_CUR  = 31; // CURRENT_VALUE
  const size_t CIF7_bit3 = 29; // MEDIAN_VALUE
  const size_t CIF7_bit2 = 27; // MAX_VALUE
  const size_t CIF7_bit1 = 26; // MIN_VALUE

  const int32_t val1 = 0x0;
  const int32_t val2 = 0x12345678;
  const int32_t val3 = 0xFFFFFFFF;
  //const int32_t mask = 0xFFFFFFFF;
  const int32_t size = 4;
  BasicQueryAcknowledgePacket p;
  int32_t len0 = p.getPayloadLength();

  // Add CIF7
  p.addCIF7(); // default is true
  int32_t len1 = p.getPayloadLength();
  assertEquals("addCIF7() pkt len", len0+4, len1);
  assertEquals("addCIF7() CIF0 bit", _CIF7_ENABLE, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
  assertEquals("addCIF7() default CIF7 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  //Utilities::dumpBytes(p.getPayloadPointer(), len1);

  // Set CIF7 Attribute CURRENT_VALUE
  p.setCIF7Attribute(CURRENT_VALUE, true);
  int32_t len2 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len2);
  assertEquals("setCIF7Attribute(CURRENT) pkt len", len1, len2);
  assertEquals("setCIF7Attribute(CURRENT) CIF7 bit", 0x1<<CIF7_CUR, VRTMath::unpackInt(p.getPayloadPointer(), 4));
  assertEquals("getReferencePointIdentifier(CURRENT) field null", INT32_NULL, p.getReferencePointIdentifier(CURRENT_VALUE));

  // Set CIF7 Attribute MIN_VALUE
  p.setCIF7Attribute(MIN_VALUE, true);
  int32_t len3 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len3);
  assertEquals("setCIF7Attribute(MIN) pkt len", len2, len3);
  assertEquals("setCIF7Attribute(MIN) CIF7 bit", 0x1<<CIF7_bit1, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF7_bit1));
  assertEquals("getReferencePointIdentifier(MIN) field null", INT32_NULL, p.getReferencePointIdentifier(MIN_VALUE));

  // Set CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, true);
  int32_t len4 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len4);
  assertEquals("setCIF7Attribute(MAX) pkt len", len3, len4);
  assertEquals("setCIF7Attribute(MAX) CIF7 bit", 0x1<<CIF7_bit2, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF7_bit2));
  assertEquals("getReferencePointIdentifier(MAX) field null", INT32_NULL, p.getReferencePointIdentifier(MAX_VALUE));

  // Set CIF7 Attribute MEDIAN_VALUE
  p.setCIF7Attribute(MEDIAN_VALUE, true);
  int32_t len5 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len5);
  assertEquals("setCIF7Attribute(MEDIAN) pkt len", len4, len5);
  assertEquals("setCIF7Attribute(MEDIAN) CIF7 bit", 0x1<<CIF7_bit3, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF7_bit3));
  assertEquals("getReferencePointIdentifier(MEDIAN) field null", INT32_NULL, p.getReferencePointIdentifier(MEDIAN_VALUE));

  // set ReferencePointIdentifier CURRENT_VALUE
  p.setReferencePointIdentifier(val1, CURRENT_VALUE);
  int32_t len6 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len6);
  assertEquals("setReferencePointIdentifier(val1,CURRENT) pkt len", len5+size*4, len6);
  assertEquals("setReferencePointIdentifier(val1,CURRENT) CIF0 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF_bit));
  assertEquals("setReferencePointIdentifier(val1,CURRENT) CIF7 bit", 0x1<<CIF7_CUR, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF7_CUR));
  assertEquals("setReferencePointIdentifier(val1,CURRENT) field val1bits", val1, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getReferencePointIdentifier(CURRENT) field val1", val1, p.getReferencePointIdentifier(CURRENT_VALUE));

  // set ReferencePointIdentifier MIN_VALUE
  p.setReferencePointIdentifier(val3, MIN_VALUE);
  int32_t len7 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len7);
  assertEquals("setReferencePointIdentifier(val3,MIN) pkt len", len6, len7);
  assertEquals("setReferencePointIdentifier(val3,MIN) CIF0 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF_bit));
  assertEquals("setReferencePointIdentifier(val3,MIN) CIF7 bit", 0x1<<CIF7_bit1, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF7_bit1));
  assertEquals("setReferencePointIdentifier(val3,MIN) field val3bits", val3, VRTMath::unpackInt(p.getPayloadPointer(), 20));
  assertEquals("getReferencePointIdentifier(MIN) field val3", val3, p.getReferencePointIdentifier(MIN_VALUE));

  // set ReferencePointIdentifier MAX_VALUE
  p.setReferencePointIdentifier(val2, MAX_VALUE);
  int32_t len8 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8);
  assertEquals("setReferencePointIdentifier(val2,MAX) pkt len", len7, len8);
  assertEquals("setReferencePointIdentifier(val2,MAX) CIF0 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF_bit));
  assertEquals("setReferencePointIdentifier(val2,MAX) CIF7 bit", 0x1<<CIF7_bit2, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF7_bit2));
  assertEquals("setReferencePointIdentifier(val2,MAX) field val2bits", val2, VRTMath::unpackInt(p.getPayloadPointer(), 16));
  assertEquals("getReferencePointIdentifier(MAX) field val2", val2, p.getReferencePointIdentifier(MAX_VALUE));

  // set ReferencePointIdentifier MEDIAN_VALUE
  p.setReferencePointIdentifier(val1, MEDIAN_VALUE);
  int32_t len9 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len9);
  assertEquals("setReferencePointIdentifier(val1,MEDIAN) pkt len", len8, len9);
  assertEquals("setReferencePointIdentifier(val1,MEDIAN) CIF0 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF_bit));
  assertEquals("setReferencePointIdentifier(val1,MEDIAN) CIF7 bit", 0x1<<CIF7_bit3, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF7_bit3));
  assertEquals("setReferencePointIdentifier(val1,MEDIAN) field val1bits", val1, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getReferencePointIdentifier(MEDIAN) field val1", val1, p.getReferencePointIdentifier(MEDIAN_VALUE));

  // set ReferencePointIdentifier CURRENT_VALUE again
  p.setReferencePointIdentifier(val2, CURRENT_VALUE);
  int32_t len10 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len10);
  assertEquals("setReferencePointIdentifier(val2,CURRENT) pkt len", len9, len10);
  assertEquals("setReferencePointIdentifier(val2,CURRENT) CIF0 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF_bit));
  assertEquals("setReferencePointIdentifier(val2,CURRENT) CIF7 bit", 0x1<<CIF7_CUR, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF7_CUR));
  assertEquals("setReferencePointIdentifier(val2,CURRENT) field val2bits", val2, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getReferencePointIdentifier(CURRENT) field val2", val2, p.getReferencePointIdentifier(CURRENT_VALUE));

  // set ReferencePointIdentifier MIN_VALUE again
  p.setReferencePointIdentifier(val1, MIN_VALUE);
  int32_t len11 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len11);
  assertEquals("setReferencePointIdentifier(val1,MIN) pkt len", len10, len11);
  assertEquals("setReferencePointIdentifier(val1,MIN) CIF0 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF_bit));
  assertEquals("setReferencePointIdentifier(val1,MIN) CIF7 bit", 0x1<<CIF7_bit1, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF7_bit1));
  assertEquals("setReferencePointIdentifier(val1,MIN) field val1bits", val1, VRTMath::unpackInt(p.getPayloadPointer(), 20));
  assertEquals("getReferencePointIdentifier(MIN) field val1", val1, p.getReferencePointIdentifier(MIN_VALUE));

  // set ReferencePointIdentifier MAX_VALUE again
  p.setReferencePointIdentifier(val3, MAX_VALUE);
  int32_t len12 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len12);
  assertEquals("setReferencePointIdentifier(val3,MAX) pkt len", len11, len12);
  assertEquals("setReferencePointIdentifier(val3,MAX) CIF0 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF_bit));
  assertEquals("setReferencePointIdentifier(val3,MAX) CIF7 bit", 0x1<<CIF7_bit2, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF7_bit2));
  assertEquals("setReferencePointIdentifier(val3,MAX) field val3bits", val3, VRTMath::unpackInt(p.getPayloadPointer(), 16));
  assertEquals("getReferencePointIdentifier(MAX) field val3", val3, p.getReferencePointIdentifier(MAX_VALUE));

  // set ReferencePointIdentifier MEDIAN_VALUE again
  p.setReferencePointIdentifier(val3, MEDIAN_VALUE);
  int32_t len13 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len13);
  assertEquals("setReferencePointIdentifier(val3,MEDIAN) pkt len", len12, len13);
  assertEquals("setReferencePointIdentifier(val3,MEDIAN) CIF0 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF_bit));
  assertEquals("setReferencePointIdentifier(val3,MEDIAN) CIF7 bit", 0x1<<CIF7_bit3, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF7_bit3));
  assertEquals("setReferencePointIdentifier(val3,MEDIAN) field val3bits", val3, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getReferencePointIdentifier(MEDIAN) field val3", val3, p.getReferencePointIdentifier(MEDIAN_VALUE));

  // set ReferencePointIdentifier CURRENT_VALUE again
  p.setReferencePointIdentifier(val3, CURRENT_VALUE);
  int32_t len14 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len14);
  assertEquals("setReferencePointIdentifier(val3,CURRENT) pkt len", len13, len14);
  assertEquals("setReferencePointIdentifier(val3,CURRENT) CIF0 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF_bit));
  assertEquals("setReferencePointIdentifier(val3,CURRENT) CIF7 bit", 0x1<<CIF7_CUR, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF7_CUR));
  assertEquals("setReferencePointIdentifier(val3,CURRENT) field val3bits", val3, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("getReferencePointIdentifier(CURRENT) field val3", val3, p.getReferencePointIdentifier(CURRENT_VALUE));

  // set ReferencePointIdentifier MIN_VALUE again
  p.setReferencePointIdentifier(val2, MIN_VALUE);
  int32_t len15 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len15);
  assertEquals("setReferencePointIdentifier(val2,MIN) pkt len", len14, len15);
  assertEquals("setReferencePointIdentifier(val2,MIN) CIF0 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF_bit));
  assertEquals("setReferencePointIdentifier(val2,MIN) CIF7 bit", 0x1<<CIF7_bit1, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF7_bit1));
  assertEquals("setReferencePointIdentifier(val2,MIN) field val2bits", val2, VRTMath::unpackInt(p.getPayloadPointer(), 20));
  assertEquals("getReferencePointIdentifier(MIN) field val2", val2, p.getReferencePointIdentifier(MIN_VALUE));

  // set ReferencePointIdentifier MAX_VALUE again
  p.setReferencePointIdentifier(val1, MAX_VALUE);
  int32_t len16 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len16);
  assertEquals("setReferencePointIdentifier(val1,MAX) pkt len", len15, len16);
  assertEquals("setReferencePointIdentifier(val1,MAX) CIF0 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF_bit));
  assertEquals("setReferencePointIdentifier(val1,MAX) CIF7 bit", 0x1<<CIF7_bit2, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF7_bit2));
  assertEquals("setReferencePointIdentifier(val1,MAX) field val1bits", val1, VRTMath::unpackInt(p.getPayloadPointer(), 16));
  assertEquals("getReferencePointIdentifier(MAX) field val1", val1, p.getReferencePointIdentifier(MAX_VALUE));

  // set ReferencePointIdentifier MEDIAN_VALUE again
  p.setReferencePointIdentifier(val1, MEDIAN_VALUE);
  int32_t len17 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len17);
  assertEquals("setReferencePointIdentifier(val1,MEDIAN) pkt len", len16, len17);
  assertEquals("setReferencePointIdentifier(val1,MEDIAN) CIF0 bit", (0x1<<CIF_bit), VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF_bit));
  assertEquals("setReferencePointIdentifier(val1,MEDIAN) CIF7 bit", 0x1<<CIF7_bit3, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF7_bit3));
  assertEquals("setReferencePointIdentifier(val1,MEDIAN) field val1bits", val1, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getReferencePointIdentifier(MEDIAN) field val1", val1, p.getReferencePointIdentifier(MEDIAN_VALUE));

  // Unset CIF7 Attribute MEDIAN_VALUE
  p.setCIF7Attribute(MEDIAN_VALUE, false);
  int32_t len18 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len18);
  assertEquals("setCIF7Attribute(MEDIAN,false) pkt len", len17-size, len18);
  assertEquals("setCIF7Attribute(MEDIAN,false) CIF7 MEDIAN bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF7_bit3));
  assertEquals("setCIF7Attribute(MEDIAN,false) CIF7 CURRENT bit", 0x1<<CIF7_CUR, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF7_CUR));
  assertEquals("setCIF7Attribute(MEDIAN,false) CIF7 MIN bit", 0x1<<CIF7_bit1, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF7_bit1));
  assertEquals("setCIF7Attribute(MEDIAN,false) CIF7 MAX bit", 0x1<<CIF7_bit2, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF7_bit2));
  assertEquals("setCIF7Attribute(MEDIAN,false) CURRENT val3bits", val3, VRTMath::unpackInt(p.getPayloadPointer(), 8));
  assertEquals("setCIF7Attribute(MEDIAN,false) MIN val2bits", val2, VRTMath::unpackInt(p.getPayloadPointer(), 16));
  assertEquals("setCIF7Attribute(MEDIAN,false) MAX val1bits", val1, VRTMath::unpackInt(p.getPayloadPointer(), 12));
  assertEquals("getReferencePointIdentifier(CURRENT) field val3", val3, p.getReferencePointIdentifier(CURRENT_VALUE));
  assertEquals("getReferencePointIdentifier(MIN) field val2", val2, p.getReferencePointIdentifier(MIN_VALUE));
  assertEquals("getReferencePointIdentifier(MAX) field val1", val1, p.getReferencePointIdentifier(MAX_VALUE));

  // unset ReferencePointIdentifier
  p.setReferencePointIdentifier(INT32_NULL);
  int32_t len19 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len19);
  assertEquals("setReferencePointIdentifier(NULL) pkt len", len18-size*3, len19);
  assertEquals("setReferencePointIdentifier(NULL) CIF0 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 0) & (0x1<<CIF_bit));
  assertEquals("setReferencePointIdentifier(NULL) CIF7 CUR bit", (0x1<<CIF7_CUR), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF7_CUR));
  assertEquals("setReferencePointIdentifier(NULL) CIF7 MIN bit", (0x1<<CIF7_bit1), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF7_bit1));
  assertEquals("setReferencePointIdentifier(NULL) CIF7 MAX bit", (0x1<<CIF7_bit2), VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF7_bit2));
  assertEquals("getReferencePointIdentifier(CURRENT) field null", INT32_NULL, p.getReferencePointIdentifier(CURRENT_VALUE));
  assertEquals("getReferencePointIdentifier(MIN) field null", INT32_NULL, p.getReferencePointIdentifier(MIN_VALUE));
  assertEquals("getReferencePointIdentifier(MAX) field null", INT32_NULL, p.getReferencePointIdentifier(MAX_VALUE));

  // Unset CIF7 Attribute MAX_VALUE
  p.setCIF7Attribute(MAX_VALUE, false);
  int32_t len20 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len20);
  assertEquals("setCIF7Attribute(MAX,false) pkt len", len19, len20);
  assertEquals("setCIF7Attribute(MAX,false) CIF7 MAX bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF7_bit2));
  assertEquals("setCIF7Attribute(MAX,false) CIF7 CUR bit", 0x1<<CIF7_CUR, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF7_CUR));
  assertEquals("setCIF7Attribute(MAX,false) CIF7 MIN bit", 0x1<<CIF7_bit1, VRTMath::unpackInt(p.getPayloadPointer(), 4) & (0x1<<CIF7_bit1));

  // Remove CIF7
  p.addCIF7(false);
  int32_t len21 = p.getPayloadLength();
  //Utilities::dumpBytes(p.getPayloadPointer(), len8);
  assertEquals("addCIF7(false) pkt len", len20-4, len21);
  assertEquals("addCIF7(false) CIF0 bit", 0x0, VRTMath::unpackInt(p.getPayloadPointer(), 0) & _CIF7_ENABLE);
}

// TODO - test multiple CIFs w/ CIF7 attributes


//////////////////////////////////////////////////////////////////////////////
// INTERNAL METHODS
//////////////////////////////////////////////////////////////////////////////

/** Reads a 32-bit word from the packet's payload for the given field. */
static int32_t getOneWordFieldValue (char* input, int64_t field) {
  return VRTMath::unpackInt(input, getByteOffset(input,field)+4, BIG_ENDIAN);
}

/** Reads a 64-bit double-word from the packet's payload for the given field. */
static int64_t getTwoWordFieldValue (char* input, int64_t field) {
  return VRTMath::unpackLong(input, getByteOffset(input,field)+4, BIG_ENDIAN);
}

/** Computes the offset for the given field. */
static int32_t getByteOffset (char* input, int64_t field) {
  int32_t indicator = VRTMath::unpackInt(input, 0, BIG_ENDIAN);
  if ((field & indicator) == 0) {      //the field is not set
    return -1;
  }
  int32_t i;
  int32_t ret = 0;
  int32_t off;
  for (i = 0; (field & 1) == 0; i++) {
    field = field >> 1;
  }
  for (int32_t j = 1; i+j < 32;j++){
    if (((indicator >> (i+j)) & 1) == 1) {
      switch(1 << (i+j)) {
        case _REF_POINT:   // FALLTHROUGH
        case _REF_LEVEL:   // FALLTHROUGH
        case _GAIN:        // FALLTHROUGH
        case _OVER_RANGE:  // FALLTHROUGH
        case _TIME_CALIB:  // FALLTHROUGH
        case _TEMPERATURE: // FALLTHROUGH
        case _STATE_EVENT: // FALLTHROUGH
        case _EPHEM_REF:
          ret += 4;       // these are all 1-word fields
          break;
        case _BANDWIDTH:   // FALLTHROUGH
        case _IF_FREQ:     // FALLTHROUGH
        case _RF_FREQ:     // FALLTHROUGH
        case _IF_OFFSET:   // FALLTHROUGH
        case _RF_OFFSET:   // FALLTHROUGH
        case _SAMPLE_RATE: // FALLTHROUGH
        case _TIME_ADJUST: // FALLTHROUGH
        case _DEVICE_ID:   // FALLTHROUGH
        case _DATA_FORMAT:
          ret += 8;       // these are all 2-word fields
          break;
        case _GPS_EPHEM:   // FALLTHROUGH
        case _INS_EPHEM:
          ret += 44;      // these are all 11-word fields
          break;
        case _ECEF_EPHEM:  // FALLTHROUGH
        case _REL_EPHEM:
          ret += 52;      // these are all 13-word field
          break;
        case _GPS_ASCII:
          off = getByteOffset(input,_GPS_ASCII);
          ret += 4*(2 + VRTMath::unpackInt(input, off+4, BIG_ENDIAN));     //2 + X words
          break;
        case _CONTEXT_ASOC:
          off = getByteOffset(input,_CONTEXT_ASOC);
          ret += 8;
          ret += 4*((((int32_t)input[off+4]) << 8) + input[off+5]); //source list size
          ret += 4*((((int32_t)input[off+6]) << 8) + input[off+7]); //system list size
          ret += 4*((((int32_t)input[off+8]) << 8) + input[off+9]); //vector-component list size
          ret += (((((int32_t)input[off+10]) & 0x80) == 0) ? 4 : 8)*(((((int32_t)input[off+10]) & 0x7F) << 8) + (input[off+11] & 0xFF));
          break;
      }
    }
  }
  return ret;
}
